
/*
 * This file was generated by the SOM Compiler.
 * FileName: ticket.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.44
 */

#ifndef SOM_Ticket_xh
#define SOM_Ticket_xh

class Ticket;

#define Ticket_MajorVersion 0
#define Ticket_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Ticket_API
#define Ticket_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the Ticket Class */
SOMEXTERN SOMClass * SOMLINK TicketNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Ticket class object, and the methods it introduces. */
SOMEXTERN struct TicketClassDataStructure {
	SOMClass *classObject;
	somMToken _get_ticketNum;
	somMToken _set_ticketNum;
	somMToken _get_parkingSlotNum;
	somMToken _set_parkingSlotNum;
} SOMDLINK TicketClassData;
#define _Ticket TicketClassData.classObject

/* The API to parentMtabs for Ticket, and the instance data it introduces. */
SOMEXTERN struct TicketCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK TicketCClassData;

/*
 * -- Typedefs for Ticket Method Procedures
 */
SOMEXTERN {
typedef long   SOMLINK somTP_Ticket__get_ticketNum(Ticket *somSelf, Environment *ev);
typedef somTP_Ticket__get_ticketNum *somTD_Ticket__get_ticketNum;
typedef void   SOMLINK somTP_Ticket__set_ticketNum(Ticket *somSelf, Environment *ev, 
		long ticketNum);
typedef somTP_Ticket__set_ticketNum *somTD_Ticket__set_ticketNum;
typedef long   SOMLINK somTP_Ticket__get_parkingSlotNum(Ticket *somSelf, Environment *ev);
typedef somTP_Ticket__get_parkingSlotNum *somTD_Ticket__get_parkingSlotNum;
typedef void   SOMLINK somTP_Ticket__set_parkingSlotNum(Ticket *somSelf, Environment *ev, 
		long parkingSlotNum);
typedef somTP_Ticket__set_parkingSlotNum *somTD_Ticket__set_parkingSlotNum;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_Ticket_somDefaultInit(Ticket *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_Ticket_somDefaultInit *somTD_Ticket_somDefaultInit;
typedef void   SOMLINK somTP_Ticket_somDestruct(Ticket *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_Ticket_somDestruct *somTD_Ticket_somDestruct;
typedef void   SOMLINK somTP_Ticket_somDefaultCopyInit(Ticket *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Ticket_somDefaultCopyInit *somTD_Ticket_somDefaultCopyInit;
typedef Ticket*   SOMLINK somTP_Ticket_somDefaultAssign(Ticket *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Ticket_somDefaultAssign *somTD_Ticket_somDefaultAssign;
typedef void   SOMLINK somTP_Ticket_somDefaultConstCopyInit(Ticket *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Ticket_somDefaultConstCopyInit *somTD_Ticket_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_Ticket_somDefaultVCopyInit(Ticket *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Ticket_somDefaultVCopyInit *somTD_Ticket_somDefaultVCopyInit;
typedef void   SOMLINK somTP_Ticket_somDefaultConstVCopyInit(Ticket *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Ticket_somDefaultConstVCopyInit *somTD_Ticket_somDefaultConstVCopyInit;
typedef Ticket*   SOMLINK somTP_Ticket_somDefaultConstAssign(Ticket *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Ticket_somDefaultConstAssign *somTD_Ticket_somDefaultConstAssign;
typedef Ticket*   SOMLINK somTP_Ticket_somDefaultVAssign(Ticket *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Ticket_somDefaultVAssign *somTD_Ticket_somDefaultVAssign;
typedef Ticket*   SOMLINK somTP_Ticket_somDefaultConstVAssign(Ticket *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Ticket_somDefaultConstVAssign *somTD_Ticket_somDefaultConstVAssign;
typedef void   SOMLINK somTP_Ticket_somInit(Ticket *somSelf);
typedef somTP_Ticket_somInit *somTD_Ticket_somInit;
typedef void   SOMLINK somTP_Ticket_somFree(Ticket *somSelf);
typedef somTP_Ticket_somFree *somTD_Ticket_somFree;
typedef void   SOMLINK somTP_Ticket_somUninit(Ticket *somSelf);
typedef somTP_Ticket_somUninit *somTD_Ticket_somUninit;
typedef SOMClass*   SOMLINK somTP_Ticket_somGetClass(Ticket *somSelf);
typedef somTP_Ticket_somGetClass *somTD_Ticket_somGetClass;
typedef string   SOMLINK somTP_Ticket_somGetClassName(Ticket *somSelf);
typedef somTP_Ticket_somGetClassName *somTD_Ticket_somGetClassName;
typedef long   SOMLINK somTP_Ticket_somGetSize(Ticket *somSelf);
typedef somTP_Ticket_somGetSize *somTD_Ticket_somGetSize;
typedef boolean   SOMLINK somTP_Ticket_somIsA(Ticket *somSelf, 
		SOMClass* aClassObj);
typedef somTP_Ticket_somIsA *somTD_Ticket_somIsA;
typedef boolean   SOMLINK somTP_Ticket_somIsInstanceOf(Ticket *somSelf, 
		SOMClass* aClassObj);
typedef somTP_Ticket_somIsInstanceOf *somTD_Ticket_somIsInstanceOf;
typedef boolean   SOMLINK somTP_Ticket_somRespondsTo(Ticket *somSelf, 
		somId mId);
typedef somTP_Ticket_somRespondsTo *somTD_Ticket_somRespondsTo;
typedef boolean   SOMLINK somTP_Ticket_somDispatch(Ticket *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_Ticket_somDispatch *somTD_Ticket_somDispatch;
typedef boolean   SOMLINK somTP_Ticket_somClassDispatch(Ticket *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_Ticket_somClassDispatch *somTD_Ticket_somClassDispatch;
typedef boolean   SOMLINK somTP_Ticket_somCastObj(Ticket *somSelf, 
		SOMClass* cls);
typedef somTP_Ticket_somCastObj *somTD_Ticket_somCastObj;
typedef boolean   SOMLINK somTP_Ticket_somResetObj(Ticket *somSelf);
typedef somTP_Ticket_somResetObj *somTD_Ticket_somResetObj;
typedef void   SOMLINK somTP_Ticket_somDispatchV(Ticket *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Ticket_somDispatchV *somTD_Ticket_somDispatchV;
typedef long   SOMLINK somTP_Ticket_somDispatchL(Ticket *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Ticket_somDispatchL *somTD_Ticket_somDispatchL;
typedef void*   SOMLINK somTP_Ticket_somDispatchA(Ticket *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Ticket_somDispatchA *somTD_Ticket_somDispatchA;
typedef double   SOMLINK somTP_Ticket_somDispatchD(Ticket *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Ticket_somDispatchD *somTD_Ticket_somDispatchD;
typedef SOMObject*   SOMLINK somTP_Ticket_somPrintSelf(Ticket *somSelf);
typedef somTP_Ticket_somPrintSelf *somTD_Ticket_somPrintSelf;
typedef void   SOMLINK somTP_Ticket_somDumpSelf(Ticket *somSelf, 
		long level);
typedef somTP_Ticket_somDumpSelf *somTD_Ticket_somDumpSelf;
typedef void   SOMLINK somTP_Ticket_somDumpSelfInt(Ticket *somSelf, 
		long level);
typedef somTP_Ticket_somDumpSelfInt *somTD_Ticket_somDumpSelfInt;
}

#endif /* Ticket_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Ticket
 */
class Ticket : public SOMObject
{
public:

// Ticket::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_Ticket) TicketNewClass(Ticket_MajorVersion,Ticket_MinorVersion);
   return (void*)
      SOM_Resolve(_Ticket,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_Ticket));
}

// Ticket::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

Ticket& operator=(Ticket& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

Ticket()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (TicketCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

Ticket(Ticket* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (TicketCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

Ticket(const Ticket* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (TicketCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: _get_ticketNum */
long   _get_ticketNum(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute long ticketNum"
 */
    return SOM_ResolveD(this,Ticket,Ticket,_get_ticketNum)
	(this, ev);
}


/* method: _set_ticketNum */
void   _set_ticketNum(Environment *ev, 
		long ticketNum)
{
/*
 * Method from the IDL attribute statement:
 * "attribute long ticketNum"
 */
    SOM_ResolveD(this,Ticket,Ticket,_set_ticketNum)
	(this, ev,ticketNum);
}


/* method: _get_parkingSlotNum */
long   _get_parkingSlotNum(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute long parkingSlotNum"
 */
    return SOM_ResolveD(this,Ticket,Ticket,_get_parkingSlotNum)
	(this, ev);
}


/* method: _set_parkingSlotNum */
void   _set_parkingSlotNum(Environment *ev, 
		long parkingSlotNum)
{
/*
 * Method from the IDL attribute statement:
 * "attribute long parkingSlotNum"
 */
    SOM_ResolveD(this,Ticket,Ticket,_set_parkingSlotNum)
	(this, ev,parkingSlotNum);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
    SOM_ResolveD(this,Ticket,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
    SOM_ResolveD(this,Ticket,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
    SOM_ResolveD(this,Ticket,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
Ticket*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
    return SOM_ResolveD(this,Ticket,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
    SOM_ResolveD(this,Ticket,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
    SOM_ResolveD(this,Ticket,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
    SOM_ResolveD(this,Ticket,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
Ticket*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
    return SOM_ResolveD(this,Ticket,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
Ticket*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
    return SOM_ResolveD(this,Ticket,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
Ticket*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
    return SOM_ResolveD(this,Ticket,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
    SOM_ResolveD(this,Ticket,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
    SOM_ResolveD(this,Ticket,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
    SOM_ResolveD(this,Ticket,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
    return SOM_ResolveD(this,Ticket,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
    return SOM_ResolveD(this,Ticket,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
    return SOM_ResolveD(this,Ticket,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
    return SOM_ResolveD(this,Ticket,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
    return SOM_ResolveD(this,Ticket,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
    return SOM_ResolveD(this,Ticket,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   Ticket_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{
return SOM_ResolveD(this,Ticket,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
    va_list ap;
    va_start(ap, methodId);
    boolean __somResult = 
      SOM_ResolveD(this,Ticket,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
    va_end(ap);
    return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   Ticket_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{
return SOM_ResolveD(this,Ticket,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
    va_list ap;
    va_start(ap, methodId);
    boolean __somResult = 
      SOM_ResolveD(this,Ticket,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
    va_end(ap);
    return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
    return SOM_ResolveD(this,Ticket,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
    return SOM_ResolveD(this,Ticket,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   Ticket_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{
    SOM_ResolveD(this,Ticket,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
    va_list ap;
    va_start(ap, descriptor);
    SOM_ResolveD(this,Ticket,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
    va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   Ticket_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{
return SOM_ResolveD(this,Ticket,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
    va_list ap;
    va_start(ap, descriptor);
    long __somResult = 
      SOM_ResolveD(this,Ticket,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
    va_end(ap);
    return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   Ticket_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{
return SOM_ResolveD(this,Ticket,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
    va_list ap;
    va_start(ap, descriptor);
    void* __somResult = 
      SOM_ResolveD(this,Ticket,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
    va_end(ap);
    return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   Ticket_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{
return SOM_ResolveD(this,Ticket,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
    va_list ap;
    va_start(ap, descriptor);
    double __somResult = 
      SOM_ResolveD(this,Ticket,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
    va_end(ap);
    return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
    return SOM_ResolveD(this,Ticket,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
    SOM_ResolveD(this,Ticket,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
    SOM_ResolveD(this,Ticket,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* Ticket */



#endif       /* SOM_Ticket_xh */
