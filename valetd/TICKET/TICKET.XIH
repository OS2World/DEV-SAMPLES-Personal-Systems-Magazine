
/*
 * This file was generated by the SOM Compiler.
 * FileName: ticket.xih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxih: 2.44
 */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_Ticket_xih
#define SOM_Ticket_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_Ticket_xh
#include <ticket.xh>
#endif
#include <somcsr.h>

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif

#define Ticket_MaxNoMethods 4

/*
 * -- Instance Data
 */
typedef struct {
	long ticketNum;

	long parkingSlotNum;

} TicketData;

/*
 * -- Getdata Macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef TicketData* (SOMLINK * somTD_Ticket_DataThunk)(void*);
#define TicketGetData(somSelf) \
   (((somTD_Ticket_DataThunk)(TicketCClassData.instanceDataToken))(somSelf))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _ticketNum (somThis->ticketNum)
  #define _parkingSlotNum (somThis->parkingSlotNum)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(Ticket_Class_Source) || defined(SOM_Module_ticket_Source))

/*
 * Trace/Debug macro
 */
#ifndef TicketMethodDebug
   #define TicketMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define __get_ticketNum somSelf->_get_ticketNum
  #define __set_ticketNum somSelf->_set_ticketNum
  #define __get_parkingSlotNum somSelf->_get_parkingSlotNum
  #define __set_parkingSlotNum somSelf->_set_parkingSlotNum
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
#endif


/*
 * -- The Ticket ClassData Structure
 */
SOMEXTERN struct TicketClassDataStructure SOMDLINK TicketClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary Ticket ClassData structure
 */
SOMEXTERN struct TicketCClassDataStructure SOMDLINK TicketCClassData = {(somMethodTabs) NULL};


/*
 * New Method: _get_ticketNum
 */
SOM_Scope long  SOMLINK _get_ticketNum(Ticket *somSelf, Environment *ev);

/*
 * Method from the IDL attribute statement:
 * "attribute long ticketNum"
 */
#ifndef somMN__get_ticketNum_defined
#define somMN__get_ticketNum_defined
static char *somMN__get_ticketNum = "_get_ticketNum";
static somId somId__get_ticketNum = &somMN__get_ticketNum;
#endif  /* somMN__get_ticketNum_defined */
#ifndef somDS__get_ticketNum_defined
#define somDS__get_ticketNum_defined
static char *somDS__get_ticketNum = "::Ticket::_get_ticketNum";
static somId somDI__get_ticketNum = &somDS__get_ticketNum;
#endif  /* somDS__get_ticketNum_defined */
#define _get_ticketNum_ApInit ((somMethodProc *)0x830106)
#define _get_ticketNum_RdInit ((somMethodProc *) 3)

/*
 * New Method: _set_ticketNum
 */
SOM_Scope void  SOMLINK _set_ticketNum(Ticket *somSelf, Environment *ev,
		long ticketNum);

/*
 * Method from the IDL attribute statement:
 * "attribute long ticketNum"
 */
#ifndef somMN__set_ticketNum_defined
#define somMN__set_ticketNum_defined
static char *somMN__set_ticketNum = "_set_ticketNum";
static somId somId__set_ticketNum = &somMN__set_ticketNum;
#endif  /* somMN__set_ticketNum_defined */
#ifndef somDS__set_ticketNum_defined
#define somDS__set_ticketNum_defined
static char *somDS__set_ticketNum = "::Ticket::_set_ticketNum";
static somId somDI__set_ticketNum = &somDS__set_ticketNum;
#endif  /* somDS__set_ticketNum_defined */
#define _set_ticketNum_ApInit ((somMethodProc *)0x430102)
#define _set_ticketNum_RdInit ((somMethodProc *) 3)

/*
 * New Method: _get_parkingSlotNum
 */
SOM_Scope long  SOMLINK _get_parkingSlotNum(Ticket *somSelf, Environment *ev);

/*
 * Method from the IDL attribute statement:
 * "attribute long parkingSlotNum"
 */
#ifndef somMN__get_parkingSlotNum_defined
#define somMN__get_parkingSlotNum_defined
static char *somMN__get_parkingSlotNum = "_get_parkingSlotNum";
static somId somId__get_parkingSlotNum = &somMN__get_parkingSlotNum;
#endif  /* somMN__get_parkingSlotNum_defined */
#ifndef somDS__get_parkingSlotNum_defined
#define somDS__get_parkingSlotNum_defined
static char *somDS__get_parkingSlotNum = "::Ticket::_get_parkingSlotNum";
static somId somDI__get_parkingSlotNum = &somDS__get_parkingSlotNum;
#endif  /* somDS__get_parkingSlotNum_defined */
#define _get_parkingSlotNum_ApInit ((somMethodProc *)0x830106)
#define _get_parkingSlotNum_RdInit ((somMethodProc *) 3)

/*
 * New Method: _set_parkingSlotNum
 */
SOM_Scope void  SOMLINK _set_parkingSlotNum(Ticket *somSelf, Environment *ev,
		long parkingSlotNum);

/*
 * Method from the IDL attribute statement:
 * "attribute long parkingSlotNum"
 */
#ifndef somMN__set_parkingSlotNum_defined
#define somMN__set_parkingSlotNum_defined
static char *somMN__set_parkingSlotNum = "_set_parkingSlotNum";
static somId somId__set_parkingSlotNum = &somMN__set_parkingSlotNum;
#endif  /* somMN__set_parkingSlotNum_defined */
#ifndef somDS__set_parkingSlotNum_defined
#define somDS__set_parkingSlotNum_defined
static char *somDS__set_parkingSlotNum = "::Ticket::_set_parkingSlotNum";
static somId somDI__set_parkingSlotNum = &somDS__set_parkingSlotNum;
#endif  /* somDS__set_parkingSlotNum_defined */
#define _set_parkingSlotNum_ApInit ((somMethodProc *)0x430102)
#define _set_parkingSlotNum_RdInit ((somMethodProc *) 3)

/*
 * Overridden method: somDefaultInit
 */
SOM_Scope void  SOMLINK somDefaultInit(Ticket *somSelf,
		som3InitCtrl* ctrl);
static char *somMN_TicketsomDefaultInit = "SOMObject::somDefaultInit";
static somId somId_TicketsomDefaultInit = &somMN_TicketsomDefaultInit;
#ifdef somId_somDefaultInit
#undef somId_somDefaultInit
#else
#define somId_somDefaultInit somId_TicketsomDefaultInit
#endif

/*
 * Overridden method: somDestruct
 */
SOM_Scope void  SOMLINK somDestruct(Ticket *somSelf,
		octet doFree,
		som3DestructCtrl* ctrl);
static char *somMN_TicketsomDestruct = "SOMObject::somDestruct";
static somId somId_TicketsomDestruct = &somMN_TicketsomDestruct;
#ifdef somId_somDestruct
#undef somId_somDestruct
#else
#define somId_somDestruct somId_TicketsomDestruct
#endif

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t TicketSM[] = {
    {    &TicketClassData._get_ticketNum,
         &somId__get_ticketNum,
         &somDI__get_ticketNum,
         (somMethodProc *) _get_ticketNum,
         _get_ticketNum_RdInit,
         _get_ticketNum_ApInit},
    {    &TicketClassData._set_ticketNum,
         &somId__set_ticketNum,
         &somDI__set_ticketNum,
         (somMethodProc *) _set_ticketNum,
         _set_ticketNum_RdInit,
         _set_ticketNum_ApInit},
    {    &TicketClassData._get_parkingSlotNum,
         &somId__get_parkingSlotNum,
         &somDI__get_parkingSlotNum,
         (somMethodProc *) _get_parkingSlotNum,
         _get_parkingSlotNum_RdInit,
         _get_parkingSlotNum_ApInit},
    {    &TicketClassData._set_parkingSlotNum,
         &somId__set_parkingSlotNum,
         &somDI__set_parkingSlotNum,
         (somMethodProc *) _set_parkingSlotNum,
         _set_parkingSlotNum_RdInit,
         _set_parkingSlotNum_ApInit},
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t TicketOM[] = {
    {    &somId_TicketsomDefaultInit,
         (somMethodProc *) somDefaultInit  },
    {    &somId_TicketsomDestruct,
         (somMethodProc *) somDestruct  },
};


/*
 *  class Ids
 */
static char * somCN_Ticket = "Ticket";
static char * somPCN_Ticket_SOMObject = "SOMObject";

static somId somPCTicket[] = {
    &somPCN_Ticket_SOMObject,
};

static somStaticClassInfo TicketSCI = {
    4, 4, 2, 0, 0, 0, /* layout version 4 */ 
    Ticket_MajorVersion, Ticket_MinorVersion,
    sizeof(TicketData), Ticket_MaxNoMethods, 1,
    &somCN_Ticket,
    (somId) NULL, 1,
    somPCTicket,
    (somClassDataStructure *) &TicketClassData,
    (somCClassDataStructure *) &TicketCClassData,
    TicketSM, TicketOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    4, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not DTS a class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK TicketNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;
    if (_Ticket && _Ticket->somCheckVersion(somtmajorVersion, somtminorVersion))
          return ((SOMClass*)((void*)_Ticket));
    SOMObjectNewClass(SOMObject_MajorVersion,SOMObject_MinorVersion);	/* static reference */
    result = (SOMClass*)((void*)somBuildClass(0xFFFFFFFF,&TicketSCI, somtmajorVersion, somtminorVersion));
    return result;
}

/*
 * Functions for attributes.
 */
SOM_Scope long  SOMLINK _get_ticketNum(Ticket *somSelf, Environment *ev){
    TicketData *somThis = TicketGetData(somSelf);
    TicketMethodDebug("Ticket","_get_ticketNum");
    SOM_IgnoreWarning(ev);

    return (somThis->ticketNum);
}
SOM_Scope void  SOMLINK _set_ticketNum(Ticket *somSelf, Environment *ev,
		long ticketNum){
    TicketData *somThis = TicketGetData(somSelf);
    TicketMethodDebug("Ticket","_set_ticketNum");
    SOM_IgnoreWarning(ev);

    somThis->ticketNum = ticketNum;
}
SOM_Scope long  SOMLINK _get_parkingSlotNum(Ticket *somSelf, Environment *ev){
    TicketData *somThis = TicketGetData(somSelf);
    TicketMethodDebug("Ticket","_get_parkingSlotNum");
    SOM_IgnoreWarning(ev);

    return (somThis->parkingSlotNum);
}
SOM_Scope void  SOMLINK _set_parkingSlotNum(Ticket *somSelf, Environment *ev,
		long parkingSlotNum){
    TicketData *somThis = TicketGetData(somSelf);
    TicketMethodDebug("Ticket","_set_parkingSlotNum");
    SOM_IgnoreWarning(ev);

    somThis->parkingSlotNum = parkingSlotNum;
}

/*
 * Macros for initializer/destructor entry/exit
 */
#define Ticket_BeginInitializer_somDefaultInit \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)TicketCClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   somThis = (TicketData*)((char*)somSelf + ctrl->info->dataOffset);\
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;
#define Ticket_BeginDestructor \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)TicketCClassData.parentMtab)->destructCtrl),sizeof(somDestructCtrl)); \
   } \
   somThis = (TicketData*)((char*)somSelf + ctrl->info->dataOffset);\
   myMask = ctrl->mask; 
#define Ticket_EndDestructor \
   ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1; \
   Ticket_DeInit_SOMObject_somDestruct(somSelf,0,ctrl); \
   if (doFree) _Ticket->somDeallocate((string)somSelf);

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for SOMObject */
#define Ticket_Init_SOMObject_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
        /* special case SOMObject */\
        ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info));
#define Ticket_DeInit_SOMObject_somDestruct(somSelf, doFree, ctrl) \
        if (myMask[0]&1) \
        /* special case SOMObject */\
        ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info));

#endif /* Primary Implementation Support */

#endif       /* SOM_Ticket_xih */
