
/*
 * This file was generated by the SOM Compiler.
 * FileName: garage.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.44
 */

/*
 * Currently, a Garage will transiently store cars in a garage
 */


#ifndef SOM_Garage_xh
#define SOM_Garage_xh

class Garage;

#define Garage_MajorVersion 0
#define Garage_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include "Ticket.xh"
#include "Car.xh"
#include <iostream.h>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Garage_API
#define Garage_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class Ticket;
#define ex_Garage_CarMissing "::Garage::CarMissing"
typedef
struct Garage_CarMissing {
long  errorCode;
char  reason[80];
} Garage_CarMissing;
#define Garage_PARKING_SPACES 10000 /* 10000 */
#ifndef _IDL_SEQUENCE_Car_defined
#define _IDL_SEQUENCE_Car_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    Car **_buffer;
} _IDL_SEQUENCE_Car;
#endif /* _IDL_SEQUENCE_Car_defined */ 

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_ex_CarMissing
    #ifdef ex_CarMissing
        #undef ex_CarMissing
        #define SOMTGD_ex_CarMissing 1
    #else
        #define ex_CarMissing ex_Garage_CarMissing
    #endif /* ex_CarMissing */
#endif /* SOMTGD_ex_CarMissing */
#ifndef SOMTGD_CarMissing
    #ifdef CarMissing
        #undef CarMissing
        #define SOMTGD_CarMissing 1
    #else
        #define CarMissing Garage_CarMissing
    #endif /* CarMissing */
#endif /* SOMTGD_CarMissing */
#ifndef SOMTGD_PARKING_SPACES
    #ifdef PARKING_SPACES
        #undef PARKING_SPACES
        #define SOMTGD_PARKING_SPACES 1
    #else
        #define PARKING_SPACES Garage_PARKING_SPACES
    #endif /* PARKING_SPACES */
#endif /* SOMTGD_PARKING_SPACES */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the Garage Class */
SOMEXTERN SOMClass * SOMLINK GarageNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Garage class object, and the methods it introduces. */
SOMEXTERN struct GarageClassDataStructure {
	SOMClass *classObject;
	somMToken storeCar;
	somMToken removeCar;
	somMToken getCarCount;
	somMToken listCars;
	somMToken getAvailableParkingSlot;
	somMToken removeAllCars;
	somMToken _get_garage_lot;
	somMToken _set_garage_lot;
} SOMDLINK GarageClassData;
#define _Garage GarageClassData.classObject

/* The API to parentMtabs for Garage, and the instance data it introduces. */
SOMEXTERN struct GarageCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK GarageCClassData;

/*
 * -- Typedefs for Garage Method Procedures
 */
SOMEXTERN {
typedef _IDL_SEQUENCE_Car   SOMLINK somTP_Garage__get_garage_lot(Garage *somSelf, Environment *ev);
typedef somTP_Garage__get_garage_lot *somTD_Garage__get_garage_lot;
typedef void   SOMLINK somTP_Garage__set_garage_lot(Garage *somSelf, Environment *ev, 
		_IDL_SEQUENCE_Car* garage_lot);
typedef somTP_Garage__set_garage_lot *somTD_Garage__set_garage_lot;
typedef void   SOMLINK somTP_Garage_storeCar(Garage *somSelf, Environment *ev, 
		Car* aCar, 
		Ticket* aTicket);
typedef somTP_Garage_storeCar *somTD_Garage_storeCar;
typedef Car*   SOMLINK somTP_Garage_removeCar(Garage *somSelf, Environment *ev, 
		Ticket* aTicket);
typedef somTP_Garage_removeCar *somTD_Garage_removeCar;
typedef void   SOMLINK somTP_Garage_listCars(Garage *somSelf, Environment *ev);
typedef somTP_Garage_listCars *somTD_Garage_listCars;
typedef long   SOMLINK somTP_Garage_getCarCount(Garage *somSelf, Environment *ev);
typedef somTP_Garage_getCarCount *somTD_Garage_getCarCount;
typedef long   SOMLINK somTP_Garage_getAvailableParkingSlot(Garage *somSelf, Environment *ev);
typedef somTP_Garage_getAvailableParkingSlot *somTD_Garage_getAvailableParkingSlot;
typedef void   SOMLINK somTP_Garage_removeAllCars(Garage *somSelf, Environment *ev);
typedef somTP_Garage_removeAllCars *somTD_Garage_removeAllCars;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_Garage_somDefaultInit(Garage *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_Garage_somDefaultInit *somTD_Garage_somDefaultInit;
typedef void   SOMLINK somTP_Garage_somDestruct(Garage *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_Garage_somDestruct *somTD_Garage_somDestruct;
typedef void   SOMLINK somTP_Garage_somDefaultCopyInit(Garage *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Garage_somDefaultCopyInit *somTD_Garage_somDefaultCopyInit;
typedef Garage*   SOMLINK somTP_Garage_somDefaultAssign(Garage *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Garage_somDefaultAssign *somTD_Garage_somDefaultAssign;
typedef void   SOMLINK somTP_Garage_somDefaultConstCopyInit(Garage *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Garage_somDefaultConstCopyInit *somTD_Garage_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_Garage_somDefaultVCopyInit(Garage *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Garage_somDefaultVCopyInit *somTD_Garage_somDefaultVCopyInit;
typedef void   SOMLINK somTP_Garage_somDefaultConstVCopyInit(Garage *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Garage_somDefaultConstVCopyInit *somTD_Garage_somDefaultConstVCopyInit;
typedef Garage*   SOMLINK somTP_Garage_somDefaultConstAssign(Garage *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Garage_somDefaultConstAssign *somTD_Garage_somDefaultConstAssign;
typedef Garage*   SOMLINK somTP_Garage_somDefaultVAssign(Garage *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Garage_somDefaultVAssign *somTD_Garage_somDefaultVAssign;
typedef Garage*   SOMLINK somTP_Garage_somDefaultConstVAssign(Garage *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Garage_somDefaultConstVAssign *somTD_Garage_somDefaultConstVAssign;
typedef void   SOMLINK somTP_Garage_somInit(Garage *somSelf);
typedef somTP_Garage_somInit *somTD_Garage_somInit;
typedef void   SOMLINK somTP_Garage_somFree(Garage *somSelf);
typedef somTP_Garage_somFree *somTD_Garage_somFree;
typedef void   SOMLINK somTP_Garage_somUninit(Garage *somSelf);
typedef somTP_Garage_somUninit *somTD_Garage_somUninit;
typedef SOMClass*   SOMLINK somTP_Garage_somGetClass(Garage *somSelf);
typedef somTP_Garage_somGetClass *somTD_Garage_somGetClass;
typedef string   SOMLINK somTP_Garage_somGetClassName(Garage *somSelf);
typedef somTP_Garage_somGetClassName *somTD_Garage_somGetClassName;
typedef long   SOMLINK somTP_Garage_somGetSize(Garage *somSelf);
typedef somTP_Garage_somGetSize *somTD_Garage_somGetSize;
typedef boolean   SOMLINK somTP_Garage_somIsA(Garage *somSelf, 
		SOMClass* aClassObj);
typedef somTP_Garage_somIsA *somTD_Garage_somIsA;
typedef boolean   SOMLINK somTP_Garage_somIsInstanceOf(Garage *somSelf, 
		SOMClass* aClassObj);
typedef somTP_Garage_somIsInstanceOf *somTD_Garage_somIsInstanceOf;
typedef boolean   SOMLINK somTP_Garage_somRespondsTo(Garage *somSelf, 
		somId mId);
typedef somTP_Garage_somRespondsTo *somTD_Garage_somRespondsTo;
typedef boolean   SOMLINK somTP_Garage_somDispatch(Garage *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_Garage_somDispatch *somTD_Garage_somDispatch;
typedef boolean   SOMLINK somTP_Garage_somClassDispatch(Garage *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_Garage_somClassDispatch *somTD_Garage_somClassDispatch;
typedef boolean   SOMLINK somTP_Garage_somCastObj(Garage *somSelf, 
		SOMClass* cls);
typedef somTP_Garage_somCastObj *somTD_Garage_somCastObj;
typedef boolean   SOMLINK somTP_Garage_somResetObj(Garage *somSelf);
typedef somTP_Garage_somResetObj *somTD_Garage_somResetObj;
typedef void   SOMLINK somTP_Garage_somDispatchV(Garage *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Garage_somDispatchV *somTD_Garage_somDispatchV;
typedef long   SOMLINK somTP_Garage_somDispatchL(Garage *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Garage_somDispatchL *somTD_Garage_somDispatchL;
typedef void*   SOMLINK somTP_Garage_somDispatchA(Garage *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Garage_somDispatchA *somTD_Garage_somDispatchA;
typedef double   SOMLINK somTP_Garage_somDispatchD(Garage *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Garage_somDispatchD *somTD_Garage_somDispatchD;
typedef SOMObject*   SOMLINK somTP_Garage_somPrintSelf(Garage *somSelf);
typedef somTP_Garage_somPrintSelf *somTD_Garage_somPrintSelf;
typedef void   SOMLINK somTP_Garage_somDumpSelf(Garage *somSelf, 
		long level);
typedef somTP_Garage_somDumpSelf *somTD_Garage_somDumpSelf;
typedef void   SOMLINK somTP_Garage_somDumpSelfInt(Garage *somSelf, 
		long level);
typedef somTP_Garage_somDumpSelfInt *somTD_Garage_somDumpSelfInt;
}

#endif /* Garage_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Garage
 */
class Garage : public SOMObject
{
public:

// Garage::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_Garage) GarageNewClass(Garage_MajorVersion,Garage_MinorVersion);
   return (void*)
      SOM_Resolve(_Garage,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_Garage));
}

// Garage::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

Garage& operator=(Garage& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

Garage()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (GarageCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

Garage(Garage* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (GarageCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

Garage(const Garage* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (GarageCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: _get_garage_lot */
_IDL_SEQUENCE_Car   _get_garage_lot(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute _IDL_SEQUENCE_Car garage_lot"
 */
    return SOM_ResolveD(this,Garage,Garage,_get_garage_lot)
	(this, ev);
}


/* method: _set_garage_lot */
void   _set_garage_lot(Environment *ev, 
		_IDL_SEQUENCE_Car* garage_lot)
{
/*
 * Method from the IDL attribute statement:
 * "attribute _IDL_SEQUENCE_Car garage_lot"
 */
    SOM_ResolveD(this,Garage,Garage,_set_garage_lot)
	(this, ev,garage_lot);
}


/* method: storeCar */
void   storeCar(Environment *ev, 
		Car* aCar, 
		Ticket* aTicket)
{
    SOM_ResolveD(this,Garage,Garage,storeCar)
	(this, ev,aCar,aTicket);
}


/* method: removeCar */
Car*   removeCar(Environment *ev, 
		Ticket* aTicket)
{
    return SOM_ResolveD(this,Garage,Garage,removeCar)
	(this, ev,aTicket);
}


/* method: listCars */
void   listCars(Environment *ev)
{
    SOM_ResolveD(this,Garage,Garage,listCars)
	(this, ev);
}


/* method: getCarCount */
long   getCarCount(Environment *ev)
{
    return SOM_ResolveD(this,Garage,Garage,getCarCount)
	(this, ev);
}


/* method: getAvailableParkingSlot */
long   getAvailableParkingSlot(Environment *ev)
{
    return SOM_ResolveD(this,Garage,Garage,getAvailableParkingSlot)
	(this, ev);
}


/* method: removeAllCars */
void   removeAllCars(Environment *ev)
{
    SOM_ResolveD(this,Garage,Garage,removeAllCars)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
    SOM_ResolveD(this,Garage,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
    SOM_ResolveD(this,Garage,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
    SOM_ResolveD(this,Garage,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
Garage*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
    return SOM_ResolveD(this,Garage,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
    SOM_ResolveD(this,Garage,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
    SOM_ResolveD(this,Garage,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
    SOM_ResolveD(this,Garage,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
Garage*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
    return SOM_ResolveD(this,Garage,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
Garage*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
    return SOM_ResolveD(this,Garage,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
Garage*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
    return SOM_ResolveD(this,Garage,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
    SOM_ResolveD(this,Garage,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
    SOM_ResolveD(this,Garage,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
    SOM_ResolveD(this,Garage,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
    return SOM_ResolveD(this,Garage,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
    return SOM_ResolveD(this,Garage,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
    return SOM_ResolveD(this,Garage,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
    return SOM_ResolveD(this,Garage,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
    return SOM_ResolveD(this,Garage,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
    return SOM_ResolveD(this,Garage,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   Garage_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{
return SOM_ResolveD(this,Garage,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
    va_list ap;
    va_start(ap, methodId);
    boolean __somResult = 
      SOM_ResolveD(this,Garage,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
    va_end(ap);
    return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   Garage_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{
return SOM_ResolveD(this,Garage,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
    va_list ap;
    va_start(ap, methodId);
    boolean __somResult = 
      SOM_ResolveD(this,Garage,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
    va_end(ap);
    return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
    return SOM_ResolveD(this,Garage,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
    return SOM_ResolveD(this,Garage,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   Garage_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{
    SOM_ResolveD(this,Garage,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
    va_list ap;
    va_start(ap, descriptor);
    SOM_ResolveD(this,Garage,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
    va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   Garage_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{
return SOM_ResolveD(this,Garage,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
    va_list ap;
    va_start(ap, descriptor);
    long __somResult = 
      SOM_ResolveD(this,Garage,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
    va_end(ap);
    return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   Garage_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{
return SOM_ResolveD(this,Garage,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
    va_list ap;
    va_start(ap, descriptor);
    void* __somResult = 
      SOM_ResolveD(this,Garage,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
    va_end(ap);
    return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   Garage_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{
return SOM_ResolveD(this,Garage,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
    va_list ap;
    va_start(ap, descriptor);
    double __somResult = 
      SOM_ResolveD(this,Garage,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
    va_end(ap);
    return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
    return SOM_ResolveD(this,Garage,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
    SOM_ResolveD(this,Garage,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
    SOM_ResolveD(this,Garage,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* Garage */



#endif       /* SOM_Garage_xh */
