
/*
 * This file was generated by the SOM Compiler.
 * FileName: garage.xih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxih: 2.44
 */

/*
 * Currently, a Garage will transiently store cars in a garage
 */


/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_Garage_xih
#define SOM_Garage_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_Garage_xh
#include <garage.xh>
#endif
#include <somcsr.h>

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif

#define Garage_MaxNoMethods 8

/*
 * -- Instance Data
 */
typedef struct {
	_IDL_SEQUENCE_Car garage_lot;

} GarageData;

/*
 * -- Getdata Macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef GarageData* (SOMLINK * somTD_Garage_DataThunk)(void*);
#define GarageGetData(somSelf) \
   (((somTD_Garage_DataThunk)(GarageCClassData.instanceDataToken))(somSelf))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _garage_lot (somThis->garage_lot)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(Garage_Class_Source) || defined(SOM_Module_garage_Source))

/*
 * Trace/Debug macro
 */
#ifndef GarageMethodDebug
   #define GarageMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define __get_garage_lot somSelf->_get_garage_lot
  #define __set_garage_lot somSelf->_set_garage_lot
  #define _storeCar somSelf->storeCar
  #define _removeCar somSelf->removeCar
  #define _listCars somSelf->listCars
  #define _getCarCount somSelf->getCarCount
  #define _getAvailableParkingSlot somSelf->getAvailableParkingSlot
  #define _removeAllCars somSelf->removeAllCars
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
#endif


/*
 * -- The Garage ClassData Structure
 */
SOMEXTERN struct GarageClassDataStructure SOMDLINK GarageClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary Garage ClassData structure
 */
SOMEXTERN struct GarageCClassDataStructure SOMDLINK GarageCClassData = {(somMethodTabs) NULL};


/*
 * New Method: _get_garage_lot
 */
SOM_Scope _IDL_SEQUENCE_Car  SOMLINK _get_garage_lot(Garage *somSelf, Environment *ev);

/*
 * Method from the IDL attribute statement:
 * "attribute _IDL_SEQUENCE_Car garage_lot"
 */
#ifndef somMN__get_garage_lot_defined
#define somMN__get_garage_lot_defined
static char *somMN__get_garage_lot = "_get_garage_lot";
static somId somId__get_garage_lot = &somMN__get_garage_lot;
#endif  /* somMN__get_garage_lot_defined */
#ifndef somDS__get_garage_lot_defined
#define somDS__get_garage_lot_defined
static char *somDS__get_garage_lot = "::Garage::_get_garage_lot";
static somId somDI__get_garage_lot = &somDS__get_garage_lot;
#endif  /* somDS__get_garage_lot_defined */
#ifndef DEFINEDGarage__get_garage_lot_mp
#define DEFINEDGarage__get_garage_lot_mp
/*[ ::Garage::_get_garage_lot Garage__get_garage_lot_mp ]*/
/* Contract specification:
[CALLTYPE_IDL (2)][RESULT][VERSION 0]
RESULT[out]: [BndSequence<10000> ObjREF]
*/
static struct {  unsigned char csr[8]; } Garage__get_garage_lot_mp={ {
0x06, 0x06, 0x8f, 0x80, 0x00, 0x27, 0x10, 0x16},
};
#endif
#define _get_garage_lot_ApInit ((somMethodProc *)&Garage__get_garage_lot_mp.csr)
#define _get_garage_lot_RdInit ((somMethodProc *) 1)

/*
 * New Method: _set_garage_lot
 */
SOM_Scope void  SOMLINK _set_garage_lot(Garage *somSelf, Environment *ev,
		_IDL_SEQUENCE_Car* garage_lot);

/*
 * Method from the IDL attribute statement:
 * "attribute _IDL_SEQUENCE_Car garage_lot"
 */
#ifndef somMN__set_garage_lot_defined
#define somMN__set_garage_lot_defined
static char *somMN__set_garage_lot = "_set_garage_lot";
static somId somId__set_garage_lot = &somMN__set_garage_lot;
#endif  /* somMN__set_garage_lot_defined */
#ifndef somDS__set_garage_lot_defined
#define somDS__set_garage_lot_defined
static char *somDS__set_garage_lot = "::Garage::_set_garage_lot";
static somId somDI__set_garage_lot = &somDS__set_garage_lot;
#endif  /* somDS__set_garage_lot_defined */
#ifndef DEFINEDGarage__set_garage_lot_mp
#define DEFINEDGarage__set_garage_lot_mp
/*[ ::Garage::_set_garage_lot Garage__set_garage_lot_mp ]*/
/* Contract specification:
[CALLTYPE_IDL (2)][VERSION 0]
ARG 0[in]: [BndSequence<10000> ObjREF]
*/
static struct {  unsigned char csr[8]; } Garage__set_garage_lot_mp={ {
0x02, 0x06, 0x4f, 0x80, 0x00, 0x27, 0x10, 0x16},
};
#endif
#define _set_garage_lot_ApInit ((somMethodProc *)&Garage__set_garage_lot_mp.csr)
#define _set_garage_lot_RdInit ((somMethodProc *) 1)

/*
 * New Method: storeCar
 */
SOM_Scope void  SOMLINK storeCar(Garage *somSelf, Environment *ev,
		Car* aCar,
		Ticket* aTicket);

#ifndef somMN_storeCar_defined
#define somMN_storeCar_defined
static char *somMN_storeCar = "storeCar";
static somId somId_storeCar = &somMN_storeCar;
#endif  /* somMN_storeCar_defined */
#ifndef somDS_storeCar_defined
#define somDS_storeCar_defined
static char *somDS_storeCar = "::Garage::storeCar";
static somId somDI_storeCar = &somDS_storeCar;
#endif  /* somDS_storeCar_defined */
#define storeCar_ApInit ((somMethodProc *)0x56560202)
#define storeCar_RdInit ((somMethodProc *) 3)

/*
 * New Method: removeCar
 */
SOM_Scope Car*  SOMLINK removeCar(Garage *somSelf, Environment *ev,
		Ticket* aTicket);

#ifndef somMN_removeCar_defined
#define somMN_removeCar_defined
static char *somMN_removeCar = "removeCar";
static somId somId_removeCar = &somMN_removeCar;
#endif  /* somMN_removeCar_defined */
#ifndef somDS_removeCar_defined
#define somDS_removeCar_defined
static char *somDS_removeCar = "::Garage::removeCar";
static somId somDI_removeCar = &somDS_removeCar;
#endif  /* somDS_removeCar_defined */
#ifndef DEFINEDGarage_removeCar_mp
#define DEFINEDGarage_removeCar_mp
/*[ ::Garage::removeCar Garage_removeCar_mp ]*/
/* Contract specification:
[CALLTYPE_IDL (2)][RESULT][EXT_HEADER][VERSION 0][HASATTR][USEREXCEPT]
RESULT[out]: ObjREF
ARG 1[in]: ObjREF
RAISES: [::Garage::CarMissing [ReqPtr struct[#0,size=84,align=4] {[OFFSET 0]Long [OFFSET 4][Array<80> Character]}]]
*/
unsigned char Garage_removeCar_mp_tdcs001ee010[11] = {0x19, 0x0c, 0x54, 0x04, 0x06, 0x00, 0x03, 0x04, 0x11, 0x50, 0x09};
static struct somcsr_exception_entry Garage_removeCar_mp_exn001e6d30[1] = {
	{"::Garage::CarMissing",{11, Garage_removeCar_mp_tdcs001ee010}}};
static struct somcsr_Exception_Attributes Garage_removeCar_mp_attr001e6d30 = {1, Garage_removeCar_mp_exn001e6d30};
static struct {  unsigned char csr[8]; void * attrlist[1];} Garage_removeCar_mp={ {
0x16, 0x05, 0x02, 0x96, 0x56},
{	 (void *)&Garage_removeCar_mp_attr001e6d30}
};
#endif
#define removeCar_ApInit ((somMethodProc *)&Garage_removeCar_mp.csr)
#define removeCar_RdInit ((somMethodProc *) 1)

/*
 * New Method: listCars
 */
SOM_Scope void  SOMLINK listCars(Garage *somSelf, Environment *ev);

#ifndef somMN_listCars_defined
#define somMN_listCars_defined
static char *somMN_listCars = "listCars";
static somId somId_listCars = &somMN_listCars;
#endif  /* somMN_listCars_defined */
#ifndef somDS_listCars_defined
#define somDS_listCars_defined
static char *somDS_listCars = "::Garage::listCars";
static somId somDI_listCars = &somDS_listCars;
#endif  /* somDS_listCars_defined */
#define listCars_ApInit ((somMethodProc *)0x2)
#define listCars_RdInit ((somMethodProc *) 3)

/*
 * New Method: getCarCount
 */
SOM_Scope long  SOMLINK getCarCount(Garage *somSelf, Environment *ev);

#ifndef somMN_getCarCount_defined
#define somMN_getCarCount_defined
static char *somMN_getCarCount = "getCarCount";
static somId somId_getCarCount = &somMN_getCarCount;
#endif  /* somMN_getCarCount_defined */
#ifndef somDS_getCarCount_defined
#define somDS_getCarCount_defined
static char *somDS_getCarCount = "::Garage::getCarCount";
static somId somDI_getCarCount = &somDS_getCarCount;
#endif  /* somDS_getCarCount_defined */
#define getCarCount_ApInit ((somMethodProc *)0x830106)
#define getCarCount_RdInit ((somMethodProc *) 3)

/*
 * New Method: getAvailableParkingSlot
 */
SOM_Scope long  SOMLINK getAvailableParkingSlot(Garage *somSelf, Environment *ev);

#ifndef somMN_getAvailableParkingSlot_defined
#define somMN_getAvailableParkingSlot_defined
static char *somMN_getAvailableParkingSlot = "getAvailableParkingSlot";
static somId somId_getAvailableParkingSlot = &somMN_getAvailableParkingSlot;
#endif  /* somMN_getAvailableParkingSlot_defined */
#ifndef somDS_getAvailableParkingSlot_defined
#define somDS_getAvailableParkingSlot_defined
static char *somDS_getAvailableParkingSlot = "::Garage::getAvailableParkingSlot";
static somId somDI_getAvailableParkingSlot = &somDS_getAvailableParkingSlot;
#endif  /* somDS_getAvailableParkingSlot_defined */
#define getAvailableParkingSlot_ApInit ((somMethodProc *)0x830106)
#define getAvailableParkingSlot_RdInit ((somMethodProc *) 3)

/*
 * New Method: removeAllCars
 */
SOM_Scope void  SOMLINK removeAllCars(Garage *somSelf, Environment *ev);

#ifndef somMN_removeAllCars_defined
#define somMN_removeAllCars_defined
static char *somMN_removeAllCars = "removeAllCars";
static somId somId_removeAllCars = &somMN_removeAllCars;
#endif  /* somMN_removeAllCars_defined */
#ifndef somDS_removeAllCars_defined
#define somDS_removeAllCars_defined
static char *somDS_removeAllCars = "::Garage::removeAllCars";
static somId somDI_removeAllCars = &somDS_removeAllCars;
#endif  /* somDS_removeAllCars_defined */
#define removeAllCars_ApInit ((somMethodProc *)0x2)
#define removeAllCars_RdInit ((somMethodProc *) 3)

/*
 * Overridden method: somDefaultInit
 */
SOM_Scope void  SOMLINK somDefaultInit(Garage *somSelf,
		som3InitCtrl* ctrl);
static char *somMN_GaragesomDefaultInit = "SOMObject::somDefaultInit";
static somId somId_GaragesomDefaultInit = &somMN_GaragesomDefaultInit;
#ifdef somId_somDefaultInit
#undef somId_somDefaultInit
#else
#define somId_somDefaultInit somId_GaragesomDefaultInit
#endif

/*
 * Overridden method: somDestruct
 */
SOM_Scope void  SOMLINK somDestruct(Garage *somSelf,
		octet doFree,
		som3DestructCtrl* ctrl);
static char *somMN_GaragesomDestruct = "SOMObject::somDestruct";
static somId somId_GaragesomDestruct = &somMN_GaragesomDestruct;
#ifdef somId_somDestruct
#undef somId_somDestruct
#else
#define somId_somDestruct somId_GaragesomDestruct
#endif

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t GarageSM[] = {
    {    &GarageClassData._get_garage_lot,
         &somId__get_garage_lot,
         &somDI__get_garage_lot,
         (somMethodProc *) _get_garage_lot,
         _get_garage_lot_RdInit,
         _get_garage_lot_ApInit},
    {    &GarageClassData._set_garage_lot,
         &somId__set_garage_lot,
         &somDI__set_garage_lot,
         (somMethodProc *) _set_garage_lot,
         _set_garage_lot_RdInit,
         _set_garage_lot_ApInit},
    {    &GarageClassData.storeCar,
         &somId_storeCar,
         &somDI_storeCar,
         (somMethodProc *) storeCar,
         storeCar_RdInit,
         storeCar_ApInit},
    {    &GarageClassData.removeCar,
         &somId_removeCar,
         &somDI_removeCar,
         (somMethodProc *) removeCar,
         removeCar_RdInit,
         removeCar_ApInit},
    {    &GarageClassData.listCars,
         &somId_listCars,
         &somDI_listCars,
         (somMethodProc *) listCars,
         listCars_RdInit,
         listCars_ApInit},
    {    &GarageClassData.getCarCount,
         &somId_getCarCount,
         &somDI_getCarCount,
         (somMethodProc *) getCarCount,
         getCarCount_RdInit,
         getCarCount_ApInit},
    {    &GarageClassData.getAvailableParkingSlot,
         &somId_getAvailableParkingSlot,
         &somDI_getAvailableParkingSlot,
         (somMethodProc *) getAvailableParkingSlot,
         getAvailableParkingSlot_RdInit,
         getAvailableParkingSlot_ApInit},
    {    &GarageClassData.removeAllCars,
         &somId_removeAllCars,
         &somDI_removeAllCars,
         (somMethodProc *) removeAllCars,
         removeAllCars_RdInit,
         removeAllCars_ApInit},
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t GarageOM[] = {
    {    &somId_GaragesomDefaultInit,
         (somMethodProc *) somDefaultInit  },
    {    &somId_GaragesomDestruct,
         (somMethodProc *) somDestruct  },
};


/*
 *  class Ids
 */
static char * somCN_Garage = "Garage";
static char * somPCN_Garage_SOMObject = "SOMObject";

static somId somPCGarage[] = {
    &somPCN_Garage_SOMObject,
};

static somStaticClassInfo GarageSCI = {
    4, 8, 2, 0, 0, 0, /* layout version 4 */ 
    Garage_MajorVersion, Garage_MinorVersion,
    sizeof(GarageData), Garage_MaxNoMethods, 1,
    &somCN_Garage,
    (somId) NULL, 1,
    somPCGarage,
    (somClassDataStructure *) &GarageClassData,
    (somCClassDataStructure *) &GarageCClassData,
    GarageSM, GarageOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    8, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not DTS a class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK GarageNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;
    if (_Garage && _Garage->somCheckVersion(somtmajorVersion, somtminorVersion))
          return ((SOMClass*)((void*)_Garage));
    SOMObjectNewClass(SOMObject_MajorVersion,SOMObject_MinorVersion);	/* static reference */
    result = (SOMClass*)((void*)somBuildClass(0xFFFFFFFF,&GarageSCI, somtmajorVersion, somtminorVersion));
    return result;
}

/*
 * Functions for attributes.
 */
SOM_Scope _IDL_SEQUENCE_Car  SOMLINK _get_garage_lot(Garage *somSelf, Environment *ev){
    GarageData *somThis = GarageGetData(somSelf);
    GarageMethodDebug("Garage","_get_garage_lot");
    SOM_IgnoreWarning(ev);

    return (somThis->garage_lot);
}
SOM_Scope void  SOMLINK _set_garage_lot(Garage *somSelf, Environment *ev,
		_IDL_SEQUENCE_Car* garage_lot){
    GarageData *somThis = GarageGetData(somSelf);
    GarageMethodDebug("Garage","_set_garage_lot");
    SOM_IgnoreWarning(ev);

    somThis->garage_lot = *garage_lot;
}

/*
 * Macros for initializer/destructor entry/exit
 */
#define Garage_BeginInitializer_somDefaultInit \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)GarageCClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   somThis = (GarageData*)((char*)somSelf + ctrl->info->dataOffset);\
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;
#define Garage_BeginDestructor \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)GarageCClassData.parentMtab)->destructCtrl),sizeof(somDestructCtrl)); \
   } \
   somThis = (GarageData*)((char*)somSelf + ctrl->info->dataOffset);\
   myMask = ctrl->mask; 
#define Garage_EndDestructor \
   ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1; \
   Garage_DeInit_SOMObject_somDestruct(somSelf,0,ctrl); \
   if (doFree) _Garage->somDeallocate((string)somSelf);

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for SOMObject */
#define Garage_Init_SOMObject_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
        /* special case SOMObject */\
        ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info));
#define Garage_DeInit_SOMObject_somDestruct(somSelf, doFree, ctrl) \
        if (myMask[0]&1) \
        /* special case SOMObject */\
        ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info));

#endif /* Primary Implementation Support */

#endif       /* SOM_Garage_xih */
