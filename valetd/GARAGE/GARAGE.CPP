
/*
 *  This file was generated by the SOM Compiler.
 *  Generated using:
 *     SOM incremental update: 2.42
 */


/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using: 
 *      SOM Emitter emitxtm: 2.41
 */

#ifndef SOM_Module_garage_Source
#define SOM_Module_garage_Source
#endif
#define Garage_Class_Source

#include "garage.xih"


SOM_Scope void  SOMLINK storeCar(Garage *somSelf,  Environment *ev, 
                                 Car* aCar, Ticket* aTicket)
{
    GarageData *somThis = GarageGetData(somSelf);
    GarageMethodDebug("Garage","storeCar");

    long slot = aTicket->_get_parkingSlotNum(ev);

//    Car *storedCar = new Car;
//    storedCar->_set_color(ev,aCar->_get_color(ev));
//    storedCar->_set_make(ev,aCar->_get_make(ev));
//    storedCar->_set_model(ev,aCar->_get_model(ev));

 
    somThis->garage_lot._buffer[slot]=aCar;
    somThis->garage_lot._length++;

}

SOM_Scope Car*  SOMLINK removeCar(Garage *somSelf,  Environment *ev, 
                                  Ticket* aTicket)
{
    GarageData *somThis = GarageGetData(somSelf);
    GarageMethodDebug("Garage","removeCar");

    long tNum = aTicket->_get_parkingSlotNum(ev);
    Car *aCar = somThis->garage_lot._buffer[tNum];
    if (aCar!=NULL)
      {
       somThis->garage_lot._buffer[tNum]=0;
       somThis->garage_lot._length--;
      }
    else
      {
       CarMissing *rc;
       rc = (CarMissing *) SOMMalloc(sizeof(CarMissing));  //Allocate exception structure
       rc->errorCode=tNum;
       strcpy(rc->reason,"The vehicle is missing");
       somSetException(ev,USER_EXCEPTION,ex_Garage_CarMissing,(void *)rc);
      }
    return aCar;
}

SOM_Scope void  SOMLINK listCars(Garage *somSelf,  Environment *ev)
{
    GarageData *somThis = GarageGetData(somSelf);
    GarageMethodDebug("Garage","listCars");

    long i=0;
    Car *c;

    for (i=0;i<PARKING_SPACES;i++)
      {
       c=somThis->garage_lot._buffer[i];
       if (c!=NULL)
        cout << "Parking Slot #"<<i<<" contains a " <<c->_get_make(ev) << endl;
      }
}

SOM_Scope long  SOMLINK getCarCount(Garage *somSelf,  Environment *ev)
{
    GarageData *somThis = GarageGetData(somSelf);
    GarageMethodDebug("Garage","getCarCount");

    /* Return statement to be customized: */
    //return somThis->garage_lot->somfCount(ev);
    return somThis->garage_lot._length;
 
}

SOM_Scope long  SOMLINK getAvailableParkingSlot(Garage *somSelf, 
                                                 Environment *ev)
{
    GarageData *somThis = GarageGetData(somSelf);
    GarageMethodDebug("Garage","getAvailableParkingSlot");
    
    long i=0;
    Car *c;
    for (i=0;i<PARKING_SPACES;i++)
       {
        c=somThis->garage_lot._buffer[i];
        if (c==NULL)
          break;
       }
    return i;
    /* Return statement to be customized: */
}

SOM_Scope void  SOMLINK removeAllCars(Garage *somSelf,  Environment *ev)
{
    GarageData *somThis = GarageGetData(somSelf);
    GarageMethodDebug("Garage","removeAllCars");

    Car *c;
    long i=0;

    for (i=0;i<PARKING_SPACES;i++)
      {
       c=somThis->garage_lot._buffer[i];
       if (c!=NULL)
         {
          cout << "The "<<c->_get_make(ev)<<" in parking slot "<<i<<" is being towed." <<endl;
          delete c;
          somThis->garage_lot._length--;
         }
      }

}


/*
 * SOM_Scope void SOMLINK somDefaultInit(Garage *somSelf, somInitCtrl* ctrl)
 */

/*
 * The prototype for somDefaultInit was replaced by the following prototype:
 */
SOM_Scope void SOMLINK somDefaultInit(Garage *somSelf, som3InitCtrl* ctrl)
{
    GarageData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    GarageMethodDebug("Garage","somDefaultInit");
    Garage_BeginInitializer_somDefaultInit;

    Garage_Init_SOMObject_somDefaultInit(somSelf, ctrl);

    somThis->garage_lot._buffer=(Car **) SOMMalloc(sizeof(Car *) * PARKING_SPACES);
 
}



/*
 * SOM_Scope void SOMLINK somDestruct(Garage *somSelf, octet doFree, 
 *                                    somDestructCtrl* ctrl)
 */

/*
 * The prototype for somDestruct was replaced by the following prototype:
 */
SOM_Scope void SOMLINK somDestruct(Garage *somSelf, octet doFree, 
                                   som3DestructCtrl* ctrl)
{
    GarageData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    GarageMethodDebug("Garage","somDestruct");
    Garage_BeginDestructor;

    /* 
     * local Garage deinitialization code added by programmer 
     */
    somSelf->removeAllCars(somGetGlobalEnvironment());  //call the tow-truck
                                                        //in parking garage at
                                                        // closing time to
                                                        //get rid of all cars.
                                 

    if (somThis->garage_lot._buffer)
       SOMFree(somThis->garage_lot._buffer);
    Garage_EndDestructor;
}


