
/*
 *  This file was generated by the SOM Compiler.
 *  Generated using:
 *     SOM incremental update: 2.42
 */


/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using: 
 *      SOM Emitter emitxtm: 2.41
 */

#ifndef SOM_Module_valet_Source
#define SOM_Module_valet_Source
#endif
#define Valet_Class_Source

#include "valet.xih"


/*
 *Method from the IDL attribute statement:
 *"attribute string valetName"
 */

SOM_Scope void  SOMLINK _set_valetName(Valet *somSelf,  Environment *ev, 
                                       string valetName)
{
    ValetData *somThis = ValetGetData(somSelf);
    ValetMethodDebug("Valet","_set_valetName");

    //Added for DSOM since this method is only stubbed because of "noset"
    if (somThis->valetName != 0) {
       SOMFree(somThis->valetName);
    } /* endif */

    somThis->valetName = (char *) SOMMalloc (strlen(valetName) + 1);
    strcpy(somThis->valetName, valetName);
}

/*
 *parkCar method
 */

SOM_Scope Ticket*  SOMLINK parkCar(Valet *somSelf,  Environment *ev, 
                                   Car* aCar)
{
    ValetData *somThis = ValetGetData(somSelf);
    ValetMethodDebug("Valet","parkCar");
    Ticket *aTicket;
 
    aTicket=somThis->aTicketBookSystem->getTicket(ev,somThis->aGarage);
    /* Return statement to be customized: */
    somThis->aGarage->storeCar(ev,aCar,aTicket);
    return aTicket;
}

/*
 *retrieveCar method
 */

SOM_Scope Car*  SOMLINK retrieveCar(Valet *somSelf,  Environment *ev, 
                                    Ticket* aTicket)
{
    ValetData *somThis = ValetGetData(somSelf);
    ValetMethodDebug("Valet","retrieveCar");

    return somThis->aGarage->removeCar(ev,aTicket);
} 

  b
/*
 * SOM_Scope void SOMLINK somDefaultInit(Valet *somSelf, somInitCtrl* ctrl)
 */

/*
 * The prototype for somDefaultInit was replaced by the following prototype:
 */
SOM_Scope void SOMLINK somDefaultInit(Valet *somSelf, som3InitCtrl* ctrl)
{
    ValetData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    ValetMethodDebug("Valet","somDefaultInit");
    Valet_BeginInitializer_somDefaultInit;

    Valet_Init_SOMObject_somDefaultInit(somSelf, ctrl);

    somThis->aGarage = new Garage();
    somThis->aTicketBookSystem = new TktBookS();
}



/*
 * SOM_Scope void SOMLINK somDestruct(Valet *somSelf, octet doFree, 
 *                                    somDestructCtrl* ctrl)
 */

/*
 * The prototype for somDestruct was replaced by the following prototype:
 */
SOM_Scope void SOMLINK somDestruct(Valet *somSelf, octet doFree, 
                                   som3DestructCtrl* ctrl)
{
    ValetData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    ValetMethodDebug("Valet","somDestruct");
    Valet_BeginDestructor;

    /* 
     * local Valet deinitialization code added by programmer 
     */
    delete somThis->aGarage;
    delete somThis->aTicketBookSystem;

    //Following lines added for DSOM
    if (somThis->valetName!=0) {
       SOMFree(somThis->valetName);
    } /* endif */
    
    Valet_EndDestructor;
}


