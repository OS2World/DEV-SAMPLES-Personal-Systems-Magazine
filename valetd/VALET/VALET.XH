
/*
 * This file was generated by the SOM Compiler.
 * FileName: valet.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.44
 */

#ifndef SOM_Valet_xh
#define SOM_Valet_xh

class Valet;

#define Valet_MajorVersion 0
#define Valet_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include "Ticket.xh"
#include "Car.xh"
#include "Garage.xh"
#include <TktBooks.xh>
#include <string.h>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Valet_API
#define Valet_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class Ticket;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the Valet Class */
SOMEXTERN SOMClass * SOMLINK ValetNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Valet class object, and the methods it introduces. */
SOMEXTERN struct ValetClassDataStructure {
	SOMClass *classObject;
	somMToken _get_valetName;
	somMToken _set_valetName;
	somMToken _get_valetID;
	somMToken _set_valetID;
	somMToken parkCar;
	somMToken retrieveCar;
} SOMDLINK ValetClassData;
#define _Valet ValetClassData.classObject

/* The API to parentMtabs for Valet, and the instance data it introduces. */
SOMEXTERN struct ValetCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ValetCClassData;

/*
 * -- Typedefs for Valet Method Procedures
 */
SOMEXTERN {
typedef string   SOMLINK somTP_Valet__get_valetName(Valet *somSelf, Environment *ev);
typedef somTP_Valet__get_valetName *somTD_Valet__get_valetName;
typedef void   SOMLINK somTP_Valet__set_valetName(Valet *somSelf, Environment *ev, 
		string valetName);
typedef somTP_Valet__set_valetName *somTD_Valet__set_valetName;
typedef long   SOMLINK somTP_Valet__get_valetID(Valet *somSelf, Environment *ev);
typedef somTP_Valet__get_valetID *somTD_Valet__get_valetID;
typedef void   SOMLINK somTP_Valet__set_valetID(Valet *somSelf, Environment *ev, 
		long valetID);
typedef somTP_Valet__set_valetID *somTD_Valet__set_valetID;
typedef Ticket*   SOMLINK somTP_Valet_parkCar(Valet *somSelf, Environment *ev, 
		Car* aCar);
typedef somTP_Valet_parkCar *somTD_Valet_parkCar;
typedef Car*   SOMLINK somTP_Valet_retrieveCar(Valet *somSelf, Environment *ev, 
		Ticket* aTicket);
typedef somTP_Valet_retrieveCar *somTD_Valet_retrieveCar;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_Valet_somDefaultInit(Valet *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_Valet_somDefaultInit *somTD_Valet_somDefaultInit;
typedef void   SOMLINK somTP_Valet_somDestruct(Valet *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_Valet_somDestruct *somTD_Valet_somDestruct;
typedef void   SOMLINK somTP_Valet_somDefaultCopyInit(Valet *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Valet_somDefaultCopyInit *somTD_Valet_somDefaultCopyInit;
typedef Valet*   SOMLINK somTP_Valet_somDefaultAssign(Valet *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Valet_somDefaultAssign *somTD_Valet_somDefaultAssign;
typedef void   SOMLINK somTP_Valet_somDefaultConstCopyInit(Valet *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Valet_somDefaultConstCopyInit *somTD_Valet_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_Valet_somDefaultVCopyInit(Valet *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Valet_somDefaultVCopyInit *somTD_Valet_somDefaultVCopyInit;
typedef void   SOMLINK somTP_Valet_somDefaultConstVCopyInit(Valet *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Valet_somDefaultConstVCopyInit *somTD_Valet_somDefaultConstVCopyInit;
typedef Valet*   SOMLINK somTP_Valet_somDefaultConstAssign(Valet *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Valet_somDefaultConstAssign *somTD_Valet_somDefaultConstAssign;
typedef Valet*   SOMLINK somTP_Valet_somDefaultVAssign(Valet *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Valet_somDefaultVAssign *somTD_Valet_somDefaultVAssign;
typedef Valet*   SOMLINK somTP_Valet_somDefaultConstVAssign(Valet *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Valet_somDefaultConstVAssign *somTD_Valet_somDefaultConstVAssign;
typedef void   SOMLINK somTP_Valet_somInit(Valet *somSelf);
typedef somTP_Valet_somInit *somTD_Valet_somInit;
typedef void   SOMLINK somTP_Valet_somFree(Valet *somSelf);
typedef somTP_Valet_somFree *somTD_Valet_somFree;
typedef void   SOMLINK somTP_Valet_somUninit(Valet *somSelf);
typedef somTP_Valet_somUninit *somTD_Valet_somUninit;
typedef SOMClass*   SOMLINK somTP_Valet_somGetClass(Valet *somSelf);
typedef somTP_Valet_somGetClass *somTD_Valet_somGetClass;
typedef string   SOMLINK somTP_Valet_somGetClassName(Valet *somSelf);
typedef somTP_Valet_somGetClassName *somTD_Valet_somGetClassName;
typedef long   SOMLINK somTP_Valet_somGetSize(Valet *somSelf);
typedef somTP_Valet_somGetSize *somTD_Valet_somGetSize;
typedef boolean   SOMLINK somTP_Valet_somIsA(Valet *somSelf, 
		SOMClass* aClassObj);
typedef somTP_Valet_somIsA *somTD_Valet_somIsA;
typedef boolean   SOMLINK somTP_Valet_somIsInstanceOf(Valet *somSelf, 
		SOMClass* aClassObj);
typedef somTP_Valet_somIsInstanceOf *somTD_Valet_somIsInstanceOf;
typedef boolean   SOMLINK somTP_Valet_somRespondsTo(Valet *somSelf, 
		somId mId);
typedef somTP_Valet_somRespondsTo *somTD_Valet_somRespondsTo;
typedef boolean   SOMLINK somTP_Valet_somDispatch(Valet *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_Valet_somDispatch *somTD_Valet_somDispatch;
typedef boolean   SOMLINK somTP_Valet_somClassDispatch(Valet *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_Valet_somClassDispatch *somTD_Valet_somClassDispatch;
typedef boolean   SOMLINK somTP_Valet_somCastObj(Valet *somSelf, 
		SOMClass* cls);
typedef somTP_Valet_somCastObj *somTD_Valet_somCastObj;
typedef boolean   SOMLINK somTP_Valet_somResetObj(Valet *somSelf);
typedef somTP_Valet_somResetObj *somTD_Valet_somResetObj;
typedef void   SOMLINK somTP_Valet_somDispatchV(Valet *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Valet_somDispatchV *somTD_Valet_somDispatchV;
typedef long   SOMLINK somTP_Valet_somDispatchL(Valet *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Valet_somDispatchL *somTD_Valet_somDispatchL;
typedef void*   SOMLINK somTP_Valet_somDispatchA(Valet *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Valet_somDispatchA *somTD_Valet_somDispatchA;
typedef double   SOMLINK somTP_Valet_somDispatchD(Valet *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Valet_somDispatchD *somTD_Valet_somDispatchD;
typedef SOMObject*   SOMLINK somTP_Valet_somPrintSelf(Valet *somSelf);
typedef somTP_Valet_somPrintSelf *somTD_Valet_somPrintSelf;
typedef void   SOMLINK somTP_Valet_somDumpSelf(Valet *somSelf, 
		long level);
typedef somTP_Valet_somDumpSelf *somTD_Valet_somDumpSelf;
typedef void   SOMLINK somTP_Valet_somDumpSelfInt(Valet *somSelf, 
		long level);
typedef somTP_Valet_somDumpSelfInt *somTD_Valet_somDumpSelfInt;
}

#endif /* Valet_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Valet
 */
class Valet : public SOMObject
{
public:

// Valet::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_Valet) ValetNewClass(Valet_MajorVersion,Valet_MinorVersion);
   return (void*)
      SOM_Resolve(_Valet,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_Valet));
}

// Valet::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

Valet& operator=(Valet& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

Valet()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ValetCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

Valet(Valet* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ValetCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

Valet(const Valet* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ValetCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: _get_valetName */
string   _get_valetName(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string valetName"
 */
    return SOM_ResolveD(this,Valet,Valet,_get_valetName)
	(this, ev);
}


/* method: _set_valetName */
void   _set_valetName(Environment *ev, 
		string valetName)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string valetName"
 */
    SOM_ResolveD(this,Valet,Valet,_set_valetName)
	(this, ev,valetName);
}


/* method: _get_valetID */
long   _get_valetID(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute long valetID"
 */
    return SOM_ResolveD(this,Valet,Valet,_get_valetID)
	(this, ev);
}


/* method: _set_valetID */
void   _set_valetID(Environment *ev, 
		long valetID)
{
/*
 * Method from the IDL attribute statement:
 * "attribute long valetID"
 */
    SOM_ResolveD(this,Valet,Valet,_set_valetID)
	(this, ev,valetID);
}


/* method: parkCar */
Ticket*   parkCar(Environment *ev, 
		Car* aCar)
{
/*
 * parkCar method
 */
    return SOM_ResolveD(this,Valet,Valet,parkCar)
	(this, ev,aCar);
}


/* method: retrieveCar */
Car*   retrieveCar(Environment *ev, 
		Ticket* aTicket)
{
/*
 * retrieveCar method
 */
    return SOM_ResolveD(this,Valet,Valet,retrieveCar)
	(this, ev,aTicket);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
    SOM_ResolveD(this,Valet,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
    SOM_ResolveD(this,Valet,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
    SOM_ResolveD(this,Valet,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
Valet*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
    return SOM_ResolveD(this,Valet,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
    SOM_ResolveD(this,Valet,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
    SOM_ResolveD(this,Valet,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
    SOM_ResolveD(this,Valet,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
Valet*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
    return SOM_ResolveD(this,Valet,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
Valet*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
    return SOM_ResolveD(this,Valet,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
Valet*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
    return SOM_ResolveD(this,Valet,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
    SOM_ResolveD(this,Valet,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
    SOM_ResolveD(this,Valet,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
    SOM_ResolveD(this,Valet,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
    return SOM_ResolveD(this,Valet,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
    return SOM_ResolveD(this,Valet,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
    return SOM_ResolveD(this,Valet,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
    return SOM_ResolveD(this,Valet,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
    return SOM_ResolveD(this,Valet,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
    return SOM_ResolveD(this,Valet,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   Valet_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{
return SOM_ResolveD(this,Valet,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
    va_list ap;
    va_start(ap, methodId);
    boolean __somResult = 
      SOM_ResolveD(this,Valet,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
    va_end(ap);
    return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   Valet_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{
return SOM_ResolveD(this,Valet,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
    va_list ap;
    va_start(ap, methodId);
    boolean __somResult = 
      SOM_ResolveD(this,Valet,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
    va_end(ap);
    return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
    return SOM_ResolveD(this,Valet,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
    return SOM_ResolveD(this,Valet,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   Valet_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{
    SOM_ResolveD(this,Valet,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
    va_list ap;
    va_start(ap, descriptor);
    SOM_ResolveD(this,Valet,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
    va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   Valet_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{
return SOM_ResolveD(this,Valet,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
    va_list ap;
    va_start(ap, descriptor);
    long __somResult = 
      SOM_ResolveD(this,Valet,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
    va_end(ap);
    return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   Valet_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{
return SOM_ResolveD(this,Valet,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
    va_list ap;
    va_start(ap, descriptor);
    void* __somResult = 
      SOM_ResolveD(this,Valet,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
    va_end(ap);
    return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   Valet_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{
return SOM_ResolveD(this,Valet,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
    va_list ap;
    va_start(ap, descriptor);
    double __somResult = 
      SOM_ResolveD(this,Valet,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
    va_end(ap);
    return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
    return SOM_ResolveD(this,Valet,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
    SOM_ResolveD(this,Valet,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
    SOM_ResolveD(this,Valet,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* Valet */



#endif       /* SOM_Valet_xh */
