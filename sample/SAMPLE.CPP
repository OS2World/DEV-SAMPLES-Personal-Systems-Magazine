/*******************************************************************************
* FILE NAME: Sample.cpp                                                        *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     Sample                                                                   *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _ICANVAS_
#include <icanvas.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IRECT_
#include <irect.hpp>
#endif

#ifndef _ISPINNUM_
#include <ispinnum.hpp>
#endif

#ifndef _IPUSHBUT_
#include <ipushbut.hpp>
#endif

#ifndef _IENTRYFD_
#include <ientryfd.hpp>
#endif

#ifndef cfuncs_h
#include "cfuncs.h"
#endif

#ifndef _IAPP_
#include <iapp.hpp>
#endif

#ifndef _IRESLIB_
#include <ireslib.hpp>
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _SAMPLE_
#include "Sample.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for SampleConn0
//*****************************************************************************
class SampleConn0 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SampleConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource)
      {source = aSource; enableNotification(); };
   SampleConn0 & setFahrenheit(INumericSpinButton * aSelf) {iFahrenheit = aSelf; return *this;};
   int actionResult() const { return iActionResult; };
   SampleConn0 & setActionResult(int aSelf) {
      iActionResult = aSelf;
      notifyObservers(INotificationEvent(actionResultId, *this));
      return *this;
      };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId actionResultId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton11(buttonClickEvent) to CFunctions(convertFahrenToCelsius))");
         try {setActionResult(convertFahrenToCelsius(iFahrenheit->value()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   INumericSpinButton * iFahrenheit;
   int iActionResult;


};   //SampleConn0

const INotificationId SampleConn0::actionResultId = "SampleConn0::actionResult";

//*****************************************************************************
// Class definition for SampleConn2
//*****************************************************************************
class SampleConn2 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SampleConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(SampleConn0 * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn0(actionResult) to EntryField11(valueAsInt))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->VBSETTEXTFROMVALUE(source->actionResult());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == SampleConn0::actionResultId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   SampleConn0 * source;
   IEntryField * target;
   Boolean aligning;


};   //SampleConn2


//*****************************************************************************
// Class definition for SampleConn3
//*****************************************************************************
class SampleConn3 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SampleConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource)
      {source = aSource; enableNotification(); };
   SampleConn3 & setCelsius(INumericSpinButton * aSelf) {iCelsius = aSelf; return *this;};
   int actionResult() const { return iActionResult; };
   SampleConn3 & setActionResult(int aSelf) {
      iActionResult = aSelf;
      notifyObservers(INotificationEvent(actionResultId, *this));
      return *this;
      };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId actionResultId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton111(buttonClickEvent) to CFunctions(convertCelsiusToFahren))");
         try {setActionResult(convertCelsiusToFahren(iCelsius->value()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   INumericSpinButton * iCelsius;
   int iActionResult;


};   //SampleConn3

const INotificationId SampleConn3::actionResultId = "SampleConn3::actionResult";

//*****************************************************************************
// Class definition for SampleConn5
//*****************************************************************************
class SampleConn5 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SampleConn5(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(SampleConn3 * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn3(actionResult) to EntryField111(valueAsInt))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->VBSETTEXTFROMVALUE(source->actionResult());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == SampleConn3::actionResultId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   SampleConn3 * source;
   IEntryField * target;
   Boolean aligning;


};   //SampleConn5


#pragma export (Sample::readyId)
const INotificationId Sample::readyId = "Sample::readyId";
//------------------------------------------------------------------------------
// Sample :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (Sample::defaultFramingSpec())
const IRectangle Sample::defaultFramingSpec()
{
   return(IRectangle(IPoint(33, IWindow::desktopWindow()->size().height()-32-290),ISize(422, 290)));
}


//------------------------------------------------------------------------------
// Sample :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (Sample::defaultTitle())
IString Sample::defaultTitle()
{
   return(VBSTRINGRC(STRRC_Sample_FrameWindow_title));
}


//------------------------------------------------------------------------------
// Sample :: Sample
//------------------------------------------------------------------------------
#pragma export (Sample::Sample(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
Sample::Sample(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iCanvas = new ICanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iStaticText11 = new IStaticText(
      id+WNDOFFSET_Sample_StaticText11, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(65,75),ISize(92, 21)));
   iStaticText21 = new IStaticText(
      id+WNDOFFSET_Sample_StaticText21, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(290,75),ISize(92, 21)));
   iNumericSpinButton11 = new INumericSpinButton(
      id+WNDOFFSET_Sample_NumericSpinButton11, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(65,39),ISize(80, 29)));
   iPushButton111 = new IPushButton(
      id+WNDOFFSET_Sample_PushButton111, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(165,39),ISize(104, 29)));
   iEntryField111 = new IEntryField(
      id+WNDOFFSET_Sample_EntryField111, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(290,39),ISize(80, 29)), 
      IEntryField::defaultStyle() | IEntryField::readOnly);
   iNumericSpinButton1 = new INumericSpinButton(
      id+WNDOFFSET_Sample_NumericSpinButton1, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(65,162),ISize(80, 29)));
   iStaticText1 = new IStaticText(
      id+WNDOFFSET_Sample_StaticText1, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(65,198),ISize(92, 21)));
   iPushButton11 = new IPushButton(
      id+WNDOFFSET_Sample_PushButton11, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(165,162),ISize(104, 29)));
   iEntryField11 = new IEntryField(
      id+WNDOFFSET_Sample_EntryField11, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(290,162),ISize(80, 29)), 
      IEntryField::defaultStyle() | IEntryField::readOnly);
   iStaticText2 = new IStaticText(
      id+WNDOFFSET_Sample_StaticText2, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(290,198),ISize(92, 21)));

   conn0 = new SampleConn0();
   conn2 = new SampleConn2();
   conn3 = new SampleConn3();
   conn5 = new SampleConn5();

   this->setFocus();
   this->setClient(iCanvas);
   iStaticText11->setText(VBSTRINGRC(STRRC_Sample_StaticText11_text));
   iStaticText11->setMinimumSize(ISize(63, 21));
   iStaticText21->setText(VBSTRINGRC(STRRC_Sample_StaticText21_text));
   iStaticText21->setMinimumSize(ISize(63, 21));
   iNumericSpinButton11->setLimit(255);
   iNumericSpinButton11->setAlignment(IBaseSpinButton::left);
   iNumericSpinButton11->setRange(IRange(0, 100));
   iNumericSpinButton11->setMinimumSize(ISize(63, 26));
   iPushButton111->setText(VBSTRINGRC(STRRC_Sample_PushButton111_text));
   iPushButton111->setMinimumSize(ISize(89, 26));
   iEntryField111->setMinimumSize(ISize(63, 26));
   iNumericSpinButton1->setLimit(255);
   iNumericSpinButton1->setRange(IRange(32, 212));
   iNumericSpinButton1->setMinimumSize(ISize(63, 26));
   iStaticText1->setText(VBSTRINGRC(STRRC_Sample_StaticText1_text));
   iStaticText1->setMinimumSize(ISize(63, 21));
   iPushButton11->setText(VBSTRINGRC(STRRC_Sample_PushButton11_text));
   iPushButton11->setMinimumSize(ISize(89, 26));
   iEntryField11->setMinimumSize(ISize(63, 26));
   iStaticText2->setText(VBSTRINGRC(STRRC_Sample_StaticText2_text));
   iStaticText2->setMinimumSize(ISize(63, 21));
}     //end constructor


//------------------------------------------------------------------------------
// Sample :: ~Sample
//------------------------------------------------------------------------------
#pragma export (Sample::~Sample())
Sample::~Sample()
{
   conn0->stopHandlingNotificationsFor(*iPushButton11);
   conn2->stopHandlingNotificationsFor(*conn0);
   conn2->stopHandlingNotificationsFor(*iEntryField11);
   conn3->stopHandlingNotificationsFor(*iPushButton111);
   conn5->stopHandlingNotificationsFor(*conn3);
   conn5->stopHandlingNotificationsFor(*iEntryField111);

   delete conn0;
   delete conn2;
   delete conn3;
   delete conn5;


   delete iCanvas;
   delete iStaticText11;
   delete iStaticText21;
   delete iNumericSpinButton11;
   delete iPushButton111;
   delete iEntryField111;
   delete iNumericSpinButton1;
   delete iStaticText1;
   delete iPushButton11;
   delete iEntryField11;
   delete iStaticText2;
}

//------------------------------------------------------------------------------
// Sample :: initializePart
//------------------------------------------------------------------------------
#pragma export (Sample::initializePart())
Sample & Sample::initializePart()
{
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// Sample :: makeConnections
//------------------------------------------------------------------------------
#pragma export (Sample::makeConnections())
Boolean Sample::makeConnections()
{
   this->enableNotification();
   iCanvas->enableNotification();
   iStaticText11->enableNotification();
   iStaticText21->enableNotification();
   iNumericSpinButton11->enableNotification();
   iPushButton111->enableNotification();
   iEntryField111->enableNotification();
   iNumericSpinButton1->enableNotification();
   iStaticText1->enableNotification();
   iPushButton11->enableNotification();
   iEntryField11->enableNotification();
   iStaticText2->enableNotification();

   conn0->initialize(iPushButton11);
   conn0->handleNotificationsFor(*iPushButton11);
   conn0->setFahrenheit(iNumericSpinButton1);
   conn2->initialize(conn0, iEntryField11);
   conn2->handleNotificationsFor(*conn0);
   conn2->handleNotificationsFor(*iEntryField11);
   conn3->initialize(iPushButton111);
   conn3->handleNotificationsFor(*iPushButton111);
   conn3->setCelsius(iNumericSpinButton11);
   conn5->initialize(conn3, iEntryField111);
   conn5->handleNotificationsFor(*conn3);
   conn5->handleNotificationsFor(*iEntryField111);

   return true;
}



