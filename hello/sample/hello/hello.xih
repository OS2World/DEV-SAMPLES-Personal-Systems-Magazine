
/*
 * This file was generated by the SOM Compiler.
 * FileName: hello.xih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxih: 2.43
 */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_HelloPart_xih
#define SOM_HelloPart_xih


/*
 * Passthru lines: File: "C.xih", "before"
 */
#define INCL_BASE
#define INCL_PM
#define INCL_OD
#include <os2.h>
#include <od.h>
#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_HelloPart_xh
#include <hello.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope extern "C"
#endif

/*
 * Passthru lines: File: "C.xih", "after"
 */
#include <ordcoll.h>
#include <storutil.h>
#include <mlogimpl.h>
#include <focuslib.h>
#include <string.h>
#include <time.h>
#include <common.hpp>
#include <istring.hpp>
#include <partinfo.hpp>
#include <frminfo.hpp>
#define IDS_BASE        WM_USER
#define IDS_OPENWINDOW  WM_USER + 10
#define WM_HANDLEFOCUS  WM_USER + 20
#define ID_MENU         WM_USER + 21
#define ID_POPUP        WM_USER + 22
#define IDS_COLOR       WM_USER + 23
#define IDS_BLUE        WM_USER + 24
#define IDS_RED         WM_USER + 25
#define IDS_YELLOW      WM_USER + 26
#define IDS_WHITE       WM_USER + 27
#define IDS_BLACK       WM_USER + 28
#define HelloPartMethodDebug(A,B)   DebugLog("%s %s",A,B)
#define M_HelloPartMethodDebug(A,B) DebugLog("%s %s",A,B)

#define HelloPart_MaxNoMethods 5

/*
 * -- Instance Data
 */
typedef struct {
	string data;
	ODSession* fSession;
	ODArbitrator* fArb;
	ODPart* fSelf;
	ODFocusSet* fFocusSet;
	ODMenuBar* fMenuBar;
	ODPopup* fPopup;
	ODxOrderedCollection* fDisplayFrames;
} HelloPartData;

/*
 * -- Getdata Macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef HelloPartData* (SOMLINK * somTD_HelloPart_DataThunk)(void*);
#define HelloPartGetData(somSelf) \
   (((somTD_HelloPart_DataThunk)(HelloPartCClassData.instanceDataToken))(somSelf))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _data (somThis->data)
  #define _fSession (somThis->fSession)
  #define _fArb (somThis->fArb)
  #define _fSelf (somThis->fSelf)
  #define _fFocusSet (somThis->fFocusSet)
  #define _fMenuBar (somThis->fMenuBar)
  #define _fPopup (somThis->fPopup)
  #define _fDisplayFrames (somThis->fDisplayFrames)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(HelloPart_Class_Source) || defined(SOM_Module_hello_Source))

/*
 * Trace/Debug macro
 */
#ifndef HelloPartMethodDebug
   #define HelloPartMethodDebug(c,m) SOMMethodDebug(c,m)
#endif
#ifndef M_HelloPart_Class_Source
#define M_HelloPart_Class_Source
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _InitPart somSelf->InitPart
  #define _InitPartFromStorage somSelf->InitPartFromStorage
  #define _DisplayFrameAdded somSelf->DisplayFrameAdded
  #define _DisplayFrameRemoved somSelf->DisplayFrameRemoved
  #define _DisplayFrameConnected somSelf->DisplayFrameConnected
  #define _DisplayFrameClosed somSelf->DisplayFrameClosed
  #define _AttachSourceFrame somSelf->AttachSourceFrame
  #define _FrameShapeChanged somSelf->FrameShapeChanged
  #define _ViewTypeChanged somSelf->ViewTypeChanged
  #define _PresentationChanged somSelf->PresentationChanged
  #define _SequenceChanged somSelf->SequenceChanged
  #define _LinkStatusChanged somSelf->LinkStatusChanged
  #define _ContainingPartPropertiesUpdated somSelf->ContainingPartPropertiesUpdated
  #define _ReadPartInfo somSelf->ReadPartInfo
  #define _WritePartInfo somSelf->WritePartInfo
  #define _ClonePartInfo somSelf->ClonePartInfo
  #define _Open somSelf->Open
  #define _Draw somSelf->Draw
  #define _FacetAdded somSelf->FacetAdded
  #define _FacetRemoved somSelf->FacetRemoved
  #define _GeometryChanged somSelf->GeometryChanged
  #define _HighlightChanged somSelf->HighlightChanged
  #define _CanvasChanged somSelf->CanvasChanged
  #define _CanvasUpdated somSelf->CanvasUpdated
  #define _GetPrintResolution somSelf->GetPrintResolution
  #define _BeginRelinquishFocus somSelf->BeginRelinquishFocus
  #define _CommitRelinquishFocus somSelf->CommitRelinquishFocus
  #define _AbortRelinquishFocus somSelf->AbortRelinquishFocus
  #define _FocusAcquired somSelf->FocusAcquired
  #define _FocusLost somSelf->FocusLost
  #define _ExternalizeKinds somSelf->ExternalizeKinds
  #define _ChangeKind somSelf->ChangeKind
  #define _HandleEvent somSelf->HandleEvent
  #define _AdjustMenus somSelf->AdjustMenus
  #define _CreateRootMenuBar somSelf->CreateRootMenuBar
  #define _UndoAction somSelf->UndoAction
  #define _RedoAction somSelf->RedoAction
  #define _DisposeActionState somSelf->DisposeActionState
  #define _WriteActionState somSelf->WriteActionState
  #define _ReadActionState somSelf->ReadActionState
  #define _FulfillPromise somSelf->FulfillPromise
  #define _DropCompleted somSelf->DropCompleted
  #define _DragEnter somSelf->DragEnter
  #define _DragWithin somSelf->DragWithin
  #define _DragLeave somSelf->DragLeave
  #define _Drop somSelf->Drop
  #define _CreateLink somSelf->CreateLink
  #define _RevealLink somSelf->RevealLink
  #define _LinkUpdated somSelf->LinkUpdated
  #define _BreakLink somSelf->BreakLink
  #define _BreakLinkSource somSelf->BreakLinkSource
  #define _LinkBroken somSelf->LinkBroken
  #define _UpdateFromLinkSource somSelf->UpdateFromLinkSource
  #define _ShowLink somSelf->ShowLink
  #define _EmbeddedFrameUpdated somSelf->EmbeddedFrameUpdated
  #define _EditInLinkAttempted somSelf->EditInLinkAttempted
  #define _RequestEmbeddedFrame somSelf->RequestEmbeddedFrame
  #define _RemoveEmbeddedFrame somSelf->RemoveEmbeddedFrame
  #define _RequestFrameShape somSelf->RequestFrameShape
  #define _UsedShapeChanged somSelf->UsedShapeChanged
  #define _AdjustBorderShape somSelf->AdjustBorderShape
  #define _AcquireContainingPartProperties somSelf->AcquireContainingPartProperties
  #define _RevealFrame somSelf->RevealFrame
  #define _EmbeddedFrameSpec somSelf->EmbeddedFrameSpec
  #define _CreateEmbeddedFramesIterator somSelf->CreateEmbeddedFramesIterator
  #define _IsRealPart somSelf->IsRealPart
  #define _GetRealPart somSelf->GetRealPart
  #define _ReleaseRealPart somSelf->ReleaseRealPart
  #define _InitPersistentObject somSelf->InitPersistentObject
  #define _InitPersistentObjectFromStorage somSelf->InitPersistentObjectFromStorage
  #define _ReleaseAll somSelf->ReleaseAll
  #define _Externalize somSelf->Externalize
  #define _GetStorageUnit somSelf->GetStorageUnit
  #define _GetID somSelf->GetID
  #define _CloneInto somSelf->CloneInto
  #define _InitRefCntObject somSelf->InitRefCntObject
  #define _Acquire somSelf->Acquire
  #define _Release somSelf->Release
  #define _GetRefCount somSelf->GetRefCount
  #define _InitObject somSelf->InitObject
  #define _HasExtension somSelf->HasExtension
  #define _AcquireExtension somSelf->AcquireExtension
  #define _ReleaseExtension somSelf->ReleaseExtension
  #define _Purge somSelf->Purge
  #define _IsEqualTo somSelf->IsEqualTo
  #define _SubClassResponsibility somSelf->SubClassResponsibility
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define _CommonInit somSelf->CommonInit
  #define _ReadContent somSelf->ReadContent
  #define _WriteContent somSelf->WriteContent
  #define __get_data somSelf->_get_data
  #define __set_data somSelf->_set_data
  #define _somInit somSelf->somInit
  #define _somUninit somSelf->somUninit
  #define _InitPart somSelf->InitPart
  #define _InitPartFromStorage somSelf->InitPartFromStorage
  #define _Externalize somSelf->Externalize
  #define _ExternalizeKinds somSelf->ExternalizeKinds
  #define _CloneInto somSelf->CloneInto
  #define _ClonePartInfo somSelf->ClonePartInfo
  #define _ReadPartInfo somSelf->ReadPartInfo
  #define _WritePartInfo somSelf->WritePartInfo
  #define _AttachSourceFrame somSelf->AttachSourceFrame
  #define _ContainingPartPropertiesUpdated somSelf->ContainingPartPropertiesUpdated
  #define _DisplayFrameAdded somSelf->DisplayFrameAdded
  #define _DisplayFrameClosed somSelf->DisplayFrameClosed
  #define _DisplayFrameConnected somSelf->DisplayFrameConnected
  #define _DisplayFrameRemoved somSelf->DisplayFrameRemoved
  #define _FacetAdded somSelf->FacetAdded
  #define _FacetRemoved somSelf->FacetRemoved
  #define _FrameShapeChanged somSelf->FrameShapeChanged
  #define _GeometryChanged somSelf->GeometryChanged
  #define _Open somSelf->Open
  #define _SequenceChanged somSelf->SequenceChanged
  #define _CanvasChanged somSelf->CanvasChanged
  #define _Draw somSelf->Draw
  #define _GetPrintResolution somSelf->GetPrintResolution
  #define _HighlightChanged somSelf->HighlightChanged
  #define _PresentationChanged somSelf->PresentationChanged
  #define _ViewTypeChanged somSelf->ViewTypeChanged
  #define _BeginRelinquishFocus somSelf->BeginRelinquishFocus
  #define _CommitRelinquishFocus somSelf->CommitRelinquishFocus
  #define _AbortRelinquishFocus somSelf->AbortRelinquishFocus
  #define _FocusAcquired somSelf->FocusAcquired
  #define _FocusLost somSelf->FocusLost
  #define _HandleEvent somSelf->HandleEvent
  #define _AdjustMenus somSelf->AdjustMenus
  #define _ChangeKind somSelf->ChangeKind
  #define _ReleaseAll somSelf->ReleaseAll
  #define _LinkStatusChanged somSelf->LinkStatusChanged
#endif


/*
 * -- The HelloPart ClassData Structure
 */
SOMEXTERN struct HelloPartClassDataStructure SOMDLINK HelloPartClassData = {(M_HelloPart *) NULL};

/*
 * -- The auxiliary HelloPart ClassData structure
 */
SOMEXTERN struct HelloPartCClassDataStructure SOMDLINK HelloPartCClassData = {(somMethodTabs) NULL};


/*
 * -- Apply Stubs for New Methods
 */
static void SOMLINK somAP_HelloCommonInit(HelloPart *somSelf,
		void *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, HelloPart*);
	Environment *ev = va_arg(__ap, Environment*);
	ODPart* partWrapper = va_arg(__ap, ODPart*);
	SOM_IgnoreWarning(__retVal);

	((somTD_HelloPart_CommonInit) __methodPtr) (somSelf, ev, partWrapper);
}

static void SOMLINK somAP_HelloReadContent(HelloPart *somSelf,
		void *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, HelloPart*);
	Environment *ev = va_arg(__ap, Environment*);
	SOM_IgnoreWarning(__ap);
	SOM_IgnoreWarning(__retVal);

	((somTD_HelloPart_ReadContent) __methodPtr) (somSelf, ev);
}

static void SOMLINK somAP_HelloWriteContent(HelloPart *somSelf,
		void *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, HelloPart*);
	Environment *ev = va_arg(__ap, Environment*);
	ODStorageUnit* su = va_arg(__ap, ODStorageUnit*);
	SOM_IgnoreWarning(__retVal);

	((somTD_HelloPart_WriteContent) __methodPtr) (somSelf, ev, su);
}

static void SOMLINK somAP_Hello_get_data(HelloPart *somSelf,
		string *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, HelloPart*);
	Environment *ev = va_arg(__ap, Environment*);
	SOM_IgnoreWarning(__ap);

	*__retVal = ((somTD_HelloPart__get_data) __methodPtr) (somSelf, ev);
}

static void SOMLINK somAP_Hello_set_data(HelloPart *somSelf,
		void *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, HelloPart*);
	Environment *ev = va_arg(__ap, Environment*);
	string data = va_arg(__ap, string);
	SOM_IgnoreWarning(__retVal);

	((somTD_HelloPart__set_data) __methodPtr) (somSelf, ev, data);
}


/*
 * New Method: CommonInit
 */
SOM_Scope void  SOMLINK HelloCommonInit(HelloPart *somSelf, Environment *ev, 
		ODPart* partWrapper);
#ifndef somMN_CommonInit_defined
#define somMN_CommonInit_defined
static char *somMN_CommonInit = "CommonInit";
static somId somId_CommonInit = &somMN_CommonInit;
#endif  /* somMN_CommonInit_defined */
#ifndef somDS_HelloCommonInit_defined
#define somDS_HelloCommonInit_defined
static char *somDS_HelloCommonInit = "::HelloPart::CommonInit";
static somId somDI_HelloCommonInit = &somDS_HelloCommonInit;
#endif  /* somDS_HelloCommonInit_defined */
static void  SOMLINK somRD_HelloCommonInit(HelloPart *somSelf, Environment *ev,
		ODPart* partWrapper)
{
	void* __retVal;

	somSelf->somDispatch((void **)&__retVal, somId_CommonInit, somSelf , ev
		,partWrapper);
}

/*
 * New Method: ReadContent
 */
SOM_Scope void  SOMLINK HelloReadContent(HelloPart *somSelf, Environment *ev);
#ifndef somMN_ReadContent_defined
#define somMN_ReadContent_defined
static char *somMN_ReadContent = "ReadContent";
static somId somId_ReadContent = &somMN_ReadContent;
#endif  /* somMN_ReadContent_defined */
#ifndef somDS_HelloReadContent_defined
#define somDS_HelloReadContent_defined
static char *somDS_HelloReadContent = "::HelloPart::ReadContent";
static somId somDI_HelloReadContent = &somDS_HelloReadContent;
#endif  /* somDS_HelloReadContent_defined */
static void  SOMLINK somRD_HelloReadContent(HelloPart *somSelf, Environment *ev)
{
	void* __retVal;

	somSelf->somDispatch((void **)&__retVal, somId_ReadContent, somSelf , ev
		);
}

/*
 * New Method: WriteContent
 */
SOM_Scope void  SOMLINK HelloWriteContent(HelloPart *somSelf, Environment *ev, 
		ODStorageUnit* su);
#ifndef somMN_WriteContent_defined
#define somMN_WriteContent_defined
static char *somMN_WriteContent = "WriteContent";
static somId somId_WriteContent = &somMN_WriteContent;
#endif  /* somMN_WriteContent_defined */
#ifndef somDS_HelloWriteContent_defined
#define somDS_HelloWriteContent_defined
static char *somDS_HelloWriteContent = "::HelloPart::WriteContent";
static somId somDI_HelloWriteContent = &somDS_HelloWriteContent;
#endif  /* somDS_HelloWriteContent_defined */
static void  SOMLINK somRD_HelloWriteContent(HelloPart *somSelf, Environment *ev,
		ODStorageUnit* su)
{
	void* __retVal;

	somSelf->somDispatch((void **)&__retVal, somId_WriteContent, somSelf , ev
		,su);
}

/*
 * New Method: _get_data
 */
SOM_Scope string  SOMLINK Hello_get_data(HelloPart *somSelf, Environment *ev);
/*
 * Method from the IDL attribute statement:
 * "attribute string data"
 */
#ifndef somMN__get_data_defined
#define somMN__get_data_defined
static char *somMN__get_data = "_get_data";
static somId somId__get_data = &somMN__get_data;
#endif  /* somMN__get_data_defined */
#ifndef somDS_Hello_get_data_defined
#define somDS_Hello_get_data_defined
static char *somDS_Hello_get_data = "::HelloPart::_get_data";
static somId somDI_Hello_get_data = &somDS_Hello_get_data;
#endif  /* somDS_Hello_get_data_defined */
static string  SOMLINK somRD_Hello_get_data(HelloPart *somSelf, Environment *ev)
{
	string __retVal;

	somSelf->somDispatch((void **)&__retVal, somId__get_data, somSelf , ev
		);
	return __retVal;
}

/*
 * New Method: _set_data
 */
SOM_Scope void  SOMLINK Hello_set_data(HelloPart *somSelf, Environment *ev, 
		string data);
/*
 * Method from the IDL attribute statement:
 * "attribute string data"
 */
#ifndef somMN__set_data_defined
#define somMN__set_data_defined
static char *somMN__set_data = "_set_data";
static somId somId__set_data = &somMN__set_data;
#endif  /* somMN__set_data_defined */
#ifndef somDS_Hello_set_data_defined
#define somDS_Hello_set_data_defined
static char *somDS_Hello_set_data = "::HelloPart::_set_data";
static somId somDI_Hello_set_data = &somDS_Hello_set_data;
#endif  /* somDS_Hello_set_data_defined */
static void  SOMLINK somRD_Hello_set_data(HelloPart *somSelf, Environment *ev,
		string data)
{
	void* __retVal;

	somSelf->somDispatch((void **)&__retVal, somId__set_data, somSelf , ev
		,data);
}

/*
 * Overridden method: somInit
 */
SOM_Scope void  SOMLINK HellosomInit(HelloPart *somSelf);
static char *somMN_HelloPartsomInit = "SOMObject::somInit";
static somId somId_HelloPartsomInit = &somMN_HelloPartsomInit;
#ifdef somId_somInit
#undef somId_somInit
#else
#define somId_somInit somId_HelloPartsomInit
#endif
typedef void   SOMLINK somTP_xih_HelloPart_somInit(HelloPart *somSelf);
typedef somTP_xih_HelloPart_somInit *somTD_xih_HelloPart_somInit;
/* define the parent method call macro */
#define HelloPart_parent_ODPart_somInit(__somSelf) \
	somSelf = (__somSelf,somSelf) /* pcalls for somInit/somUninit turned off */
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_somInit
  #ifdef parent_somInit
    #define SOMGD_pmc_parent_somInit
    #undef parent_somInit
  #else
#define parent_somInit HelloPart_parent_ODPart_somInit
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_somInit
  #ifdef parent_ODPart_somInit
    #define SOMGD_pmc_parent_ODPart_somInit
    #undef parent_ODPart_somInit
  #else
    #define parent_ODPart_somInit HelloPart_parent_ODPart_somInit
  #endif
#endif
#define HelloPart_parents_somInit(somSelf) (somSelf)

/*
 * Overridden method: somUninit
 */
SOM_Scope void  SOMLINK HellosomUninit(HelloPart *somSelf);
static char *somMN_HelloPartsomUninit = "SOMObject::somUninit";
static somId somId_HelloPartsomUninit = &somMN_HelloPartsomUninit;
#ifdef somId_somUninit
#undef somId_somUninit
#else
#define somId_somUninit somId_HelloPartsomUninit
#endif
typedef void   SOMLINK somTP_xih_HelloPart_somUninit(HelloPart *somSelf);
typedef somTP_xih_HelloPart_somUninit *somTD_xih_HelloPart_somUninit;
/* define the parent method call macro */
#define HelloPart_parent_ODPart_somUninit(__somSelf) \
	somSelf = (__somSelf,somSelf) /* pcalls for somInit/somUninit turned off */
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_somUninit
  #ifdef parent_somUninit
    #define SOMGD_pmc_parent_somUninit
    #undef parent_somUninit
  #else
#define parent_somUninit HelloPart_parent_ODPart_somUninit
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_somUninit
  #ifdef parent_ODPart_somUninit
    #define SOMGD_pmc_parent_ODPart_somUninit
    #undef parent_ODPart_somUninit
  #else
    #define parent_ODPart_somUninit HelloPart_parent_ODPart_somUninit
  #endif
#endif
#define HelloPart_parents_somUninit(somSelf) (somSelf)

/*
 * Overridden method: InitPart
 */
SOM_Scope void  SOMLINK HelloInitPart(HelloPart *somSelf, Environment *ev,
		ODStorageUnit* storageUnit,
		ODPart* partWrapper);
static char *somMN_HelloPartInitPart = "ODPart::InitPart";
static somId somId_HelloPartInitPart = &somMN_HelloPartInitPart;
#ifdef somId_InitPart
#undef somId_InitPart
#else
#define somId_InitPart somId_HelloPartInitPart
#endif
typedef void   SOMLINK somTP_xih_HelloPart_InitPart(HelloPart *somSelf, Environment *ev, 
		ODStorageUnit* storageUnit, 
		ODPart* partWrapper);
typedef somTP_xih_HelloPart_InitPart *somTD_xih_HelloPart_InitPart;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_InitPart_resolved;
#define HelloPart_parent_ODPart_InitPart(somSelf,ev,storageUnit,partWrapper) \
  ((( somTD_xih_HelloPart_InitPart ) \
      HelloPart_parent_ODPart_InitPart_resolved) \
	(somSelf,ev,storageUnit,partWrapper))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_InitPart
  #ifdef parent_InitPart
    #define SOMGD_pmc_parent_InitPart
    #undef parent_InitPart
  #else
#define parent_InitPart HelloPart_parent_ODPart_InitPart
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_InitPart
  #ifdef parent_ODPart_InitPart
    #define SOMGD_pmc_parent_ODPart_InitPart
    #undef parent_ODPart_InitPart
  #else
    #define parent_ODPart_InitPart HelloPart_parent_ODPart_InitPart
  #endif
#endif
#define HelloPart_parents_InitPart(somSelf,ev,storageUnit,partWrapper) (\
   HelloPart_parent_ODPart_InitPart(somSelf,ev,storageUnit,partWrapper))

/*
 * Overridden method: InitPartFromStorage
 */
SOM_Scope void  SOMLINK HelloInitPartFromStorage(HelloPart *somSelf, Environment *ev,
		ODStorageUnit* storageUnit,
		ODPart* partWrapper);
static char *somMN_HelloPartInitPartFromStorage = "ODPart::InitPartFromStorage";
static somId somId_HelloPartInitPartFromStorage = &somMN_HelloPartInitPartFromStorage;
#ifdef somId_InitPartFromStorage
#undef somId_InitPartFromStorage
#else
#define somId_InitPartFromStorage somId_HelloPartInitPartFromStorage
#endif
typedef void   SOMLINK somTP_xih_HelloPart_InitPartFromStorage(HelloPart *somSelf, Environment *ev, 
		ODStorageUnit* storageUnit, 
		ODPart* partWrapper);
typedef somTP_xih_HelloPart_InitPartFromStorage *somTD_xih_HelloPart_InitPartFromStorage;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_InitPartFromStorage_resolved;
#define HelloPart_parent_ODPart_InitPartFromStorage(somSelf,ev,storageUnit,partWrapper) \
  ((( somTD_xih_HelloPart_InitPartFromStorage ) \
      HelloPart_parent_ODPart_InitPartFromStorage_resolved) \
	(somSelf,ev,storageUnit,partWrapper))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_InitPartFromStorage
  #ifdef parent_InitPartFromStorage
    #define SOMGD_pmc_parent_InitPartFromStorage
    #undef parent_InitPartFromStorage
  #else
#define parent_InitPartFromStorage HelloPart_parent_ODPart_InitPartFromStorage
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_InitPartFromStorage
  #ifdef parent_ODPart_InitPartFromStorage
    #define SOMGD_pmc_parent_ODPart_InitPartFromStorage
    #undef parent_ODPart_InitPartFromStorage
  #else
    #define parent_ODPart_InitPartFromStorage HelloPart_parent_ODPart_InitPartFromStorage
  #endif
#endif
#define HelloPart_parents_InitPartFromStorage(somSelf,ev,storageUnit,partWrapper) (\
   HelloPart_parent_ODPart_InitPartFromStorage(somSelf,ev,storageUnit,partWrapper))

/*
 * Overridden method: Externalize
 */
SOM_Scope void  SOMLINK HelloExternalize(HelloPart *somSelf, Environment *ev);
static char *somMN_HelloPartExternalize = "ODPersistentObject::Externalize";
static somId somId_HelloPartExternalize = &somMN_HelloPartExternalize;
#ifdef somId_Externalize
#undef somId_Externalize
#else
#define somId_Externalize somId_HelloPartExternalize
#endif
typedef void   SOMLINK somTP_xih_HelloPart_Externalize(HelloPart *somSelf, Environment *ev);
typedef somTP_xih_HelloPart_Externalize *somTD_xih_HelloPart_Externalize;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_Externalize_resolved;
#define HelloPart_parent_ODPart_Externalize(somSelf,ev) \
  ((( somTD_xih_HelloPart_Externalize ) \
      HelloPart_parent_ODPart_Externalize_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_Externalize
  #ifdef parent_Externalize
    #define SOMGD_pmc_parent_Externalize
    #undef parent_Externalize
  #else
#define parent_Externalize HelloPart_parent_ODPart_Externalize
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_Externalize
  #ifdef parent_ODPart_Externalize
    #define SOMGD_pmc_parent_ODPart_Externalize
    #undef parent_ODPart_Externalize
  #else
    #define parent_ODPart_Externalize HelloPart_parent_ODPart_Externalize
  #endif
#endif
#define HelloPart_parents_Externalize(somSelf,ev) (\
   HelloPart_parent_ODPart_Externalize(somSelf,ev))

/*
 * Overridden method: ExternalizeKinds
 */
SOM_Scope void  SOMLINK HelloExternalizeKinds(HelloPart *somSelf, Environment *ev,
		ODTypeList* kindset);
static char *somMN_HelloPartExternalizeKinds = "ODPart::ExternalizeKinds";
static somId somId_HelloPartExternalizeKinds = &somMN_HelloPartExternalizeKinds;
#ifdef somId_ExternalizeKinds
#undef somId_ExternalizeKinds
#else
#define somId_ExternalizeKinds somId_HelloPartExternalizeKinds
#endif
typedef void   SOMLINK somTP_xih_HelloPart_ExternalizeKinds(HelloPart *somSelf, Environment *ev, 
		ODTypeList* kindset);
typedef somTP_xih_HelloPart_ExternalizeKinds *somTD_xih_HelloPart_ExternalizeKinds;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_ExternalizeKinds_resolved;
#define HelloPart_parent_ODPart_ExternalizeKinds(somSelf,ev,kindset) \
  ((( somTD_xih_HelloPart_ExternalizeKinds ) \
      HelloPart_parent_ODPart_ExternalizeKinds_resolved) \
	(somSelf,ev,kindset))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_ExternalizeKinds
  #ifdef parent_ExternalizeKinds
    #define SOMGD_pmc_parent_ExternalizeKinds
    #undef parent_ExternalizeKinds
  #else
#define parent_ExternalizeKinds HelloPart_parent_ODPart_ExternalizeKinds
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_ExternalizeKinds
  #ifdef parent_ODPart_ExternalizeKinds
    #define SOMGD_pmc_parent_ODPart_ExternalizeKinds
    #undef parent_ODPart_ExternalizeKinds
  #else
    #define parent_ODPart_ExternalizeKinds HelloPart_parent_ODPart_ExternalizeKinds
  #endif
#endif
#define HelloPart_parents_ExternalizeKinds(somSelf,ev,kindset) (\
   HelloPart_parent_ODPart_ExternalizeKinds(somSelf,ev,kindset))

/*
 * Overridden method: CloneInto
 */
SOM_Scope void  SOMLINK HelloCloneInto(HelloPart *somSelf, Environment *ev,
		ODDraftKey key,
		ODStorageUnit* toSU,
		ODFrame* scope);
static char *somMN_HelloPartCloneInto = "ODPersistentObject::CloneInto";
static somId somId_HelloPartCloneInto = &somMN_HelloPartCloneInto;
#ifdef somId_CloneInto
#undef somId_CloneInto
#else
#define somId_CloneInto somId_HelloPartCloneInto
#endif
typedef void   SOMLINK somTP_xih_HelloPart_CloneInto(HelloPart *somSelf, Environment *ev, 
		ODDraftKey key, 
		ODStorageUnit* toSU, 
		ODFrame* scope);
typedef somTP_xih_HelloPart_CloneInto *somTD_xih_HelloPart_CloneInto;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_CloneInto_resolved;
#define HelloPart_parent_ODPart_CloneInto(somSelf,ev,key,toSU,scope) \
  ((( somTD_xih_HelloPart_CloneInto ) \
      HelloPart_parent_ODPart_CloneInto_resolved) \
	(somSelf,ev,key,toSU,scope))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_CloneInto
  #ifdef parent_CloneInto
    #define SOMGD_pmc_parent_CloneInto
    #undef parent_CloneInto
  #else
#define parent_CloneInto HelloPart_parent_ODPart_CloneInto
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_CloneInto
  #ifdef parent_ODPart_CloneInto
    #define SOMGD_pmc_parent_ODPart_CloneInto
    #undef parent_ODPart_CloneInto
  #else
    #define parent_ODPart_CloneInto HelloPart_parent_ODPart_CloneInto
  #endif
#endif
#define HelloPart_parents_CloneInto(somSelf,ev,key,toSU,scope) (\
   HelloPart_parent_ODPart_CloneInto(somSelf,ev,key,toSU,scope))

/*
 * Overridden method: ClonePartInfo
 */
SOM_Scope void  SOMLINK HelloClonePartInfo(HelloPart *somSelf, Environment *ev,
		ODDraftKey key,
		ODInfoType partInfo,
		ODStorageUnitView* storageUnitView,
		ODFrame* scope);
static char *somMN_HelloPartClonePartInfo = "ODPart::ClonePartInfo";
static somId somId_HelloPartClonePartInfo = &somMN_HelloPartClonePartInfo;
#ifdef somId_ClonePartInfo
#undef somId_ClonePartInfo
#else
#define somId_ClonePartInfo somId_HelloPartClonePartInfo
#endif
typedef void   SOMLINK somTP_xih_HelloPart_ClonePartInfo(HelloPart *somSelf, Environment *ev, 
		ODDraftKey key, 
		ODInfoType partInfo, 
		ODStorageUnitView* storageUnitView, 
		ODFrame* scope);
typedef somTP_xih_HelloPart_ClonePartInfo *somTD_xih_HelloPart_ClonePartInfo;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_ClonePartInfo_resolved;
#define HelloPart_parent_ODPart_ClonePartInfo(somSelf,ev,key,partInfo,storageUnitView,scope) \
  ((( somTD_xih_HelloPart_ClonePartInfo ) \
      HelloPart_parent_ODPart_ClonePartInfo_resolved) \
	(somSelf,ev,key,partInfo,storageUnitView,scope))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_ClonePartInfo
  #ifdef parent_ClonePartInfo
    #define SOMGD_pmc_parent_ClonePartInfo
    #undef parent_ClonePartInfo
  #else
#define parent_ClonePartInfo HelloPart_parent_ODPart_ClonePartInfo
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_ClonePartInfo
  #ifdef parent_ODPart_ClonePartInfo
    #define SOMGD_pmc_parent_ODPart_ClonePartInfo
    #undef parent_ODPart_ClonePartInfo
  #else
    #define parent_ODPart_ClonePartInfo HelloPart_parent_ODPart_ClonePartInfo
  #endif
#endif
#define HelloPart_parents_ClonePartInfo(somSelf,ev,key,partInfo,storageUnitView,scope) (\
   HelloPart_parent_ODPart_ClonePartInfo(somSelf,ev,key,partInfo,storageUnitView,scope))

/*
 * Overridden method: ReadPartInfo
 */
SOM_Scope ODInfoType  SOMLINK HelloReadPartInfo(HelloPart *somSelf, Environment *ev,
		ODFrame* frame,
		ODStorageUnitView* storageUnitView);
static char *somMN_HelloPartReadPartInfo = "ODPart::ReadPartInfo";
static somId somId_HelloPartReadPartInfo = &somMN_HelloPartReadPartInfo;
#ifdef somId_ReadPartInfo
#undef somId_ReadPartInfo
#else
#define somId_ReadPartInfo somId_HelloPartReadPartInfo
#endif
typedef ODInfoType   SOMLINK somTP_xih_HelloPart_ReadPartInfo(HelloPart *somSelf, Environment *ev, 
		ODFrame* frame, 
		ODStorageUnitView* storageUnitView);
typedef somTP_xih_HelloPart_ReadPartInfo *somTD_xih_HelloPart_ReadPartInfo;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_ReadPartInfo_resolved;
#define HelloPart_parent_ODPart_ReadPartInfo(somSelf,ev,frame,storageUnitView) \
  ((( somTD_xih_HelloPart_ReadPartInfo ) \
      HelloPart_parent_ODPart_ReadPartInfo_resolved) \
	(somSelf,ev,frame,storageUnitView))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_ReadPartInfo
  #ifdef parent_ReadPartInfo
    #define SOMGD_pmc_parent_ReadPartInfo
    #undef parent_ReadPartInfo
  #else
#define parent_ReadPartInfo HelloPart_parent_ODPart_ReadPartInfo
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_ReadPartInfo
  #ifdef parent_ODPart_ReadPartInfo
    #define SOMGD_pmc_parent_ODPart_ReadPartInfo
    #undef parent_ODPart_ReadPartInfo
  #else
    #define parent_ODPart_ReadPartInfo HelloPart_parent_ODPart_ReadPartInfo
  #endif
#endif
#define HelloPart_parents_ReadPartInfo(somSelf,ev,frame,storageUnitView) (\
   HelloPart_parent_ODPart_ReadPartInfo(somSelf,ev,frame,storageUnitView))

/*
 * Overridden method: WritePartInfo
 */
SOM_Scope void  SOMLINK HelloWritePartInfo(HelloPart *somSelf, Environment *ev,
		ODInfoType partInfo,
		ODStorageUnitView* storageUnitView);
static char *somMN_HelloPartWritePartInfo = "ODPart::WritePartInfo";
static somId somId_HelloPartWritePartInfo = &somMN_HelloPartWritePartInfo;
#ifdef somId_WritePartInfo
#undef somId_WritePartInfo
#else
#define somId_WritePartInfo somId_HelloPartWritePartInfo
#endif
typedef void   SOMLINK somTP_xih_HelloPart_WritePartInfo(HelloPart *somSelf, Environment *ev, 
		ODInfoType partInfo, 
		ODStorageUnitView* storageUnitView);
typedef somTP_xih_HelloPart_WritePartInfo *somTD_xih_HelloPart_WritePartInfo;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_WritePartInfo_resolved;
#define HelloPart_parent_ODPart_WritePartInfo(somSelf,ev,partInfo,storageUnitView) \
  ((( somTD_xih_HelloPart_WritePartInfo ) \
      HelloPart_parent_ODPart_WritePartInfo_resolved) \
	(somSelf,ev,partInfo,storageUnitView))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_WritePartInfo
  #ifdef parent_WritePartInfo
    #define SOMGD_pmc_parent_WritePartInfo
    #undef parent_WritePartInfo
  #else
#define parent_WritePartInfo HelloPart_parent_ODPart_WritePartInfo
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_WritePartInfo
  #ifdef parent_ODPart_WritePartInfo
    #define SOMGD_pmc_parent_ODPart_WritePartInfo
    #undef parent_ODPart_WritePartInfo
  #else
    #define parent_ODPart_WritePartInfo HelloPart_parent_ODPart_WritePartInfo
  #endif
#endif
#define HelloPart_parents_WritePartInfo(somSelf,ev,partInfo,storageUnitView) (\
   HelloPart_parent_ODPart_WritePartInfo(somSelf,ev,partInfo,storageUnitView))

/*
 * Overridden method: AttachSourceFrame
 */
SOM_Scope void  SOMLINK HelloAttachSourceFrame(HelloPart *somSelf, Environment *ev,
		ODFrame* frame,
		ODFrame* sourceFrame);
static char *somMN_HelloPartAttachSourceFrame = "ODPart::AttachSourceFrame";
static somId somId_HelloPartAttachSourceFrame = &somMN_HelloPartAttachSourceFrame;
#ifdef somId_AttachSourceFrame
#undef somId_AttachSourceFrame
#else
#define somId_AttachSourceFrame somId_HelloPartAttachSourceFrame
#endif
typedef void   SOMLINK somTP_xih_HelloPart_AttachSourceFrame(HelloPart *somSelf, Environment *ev, 
		ODFrame* frame, 
		ODFrame* sourceFrame);
typedef somTP_xih_HelloPart_AttachSourceFrame *somTD_xih_HelloPart_AttachSourceFrame;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_AttachSourceFrame_resolved;
#define HelloPart_parent_ODPart_AttachSourceFrame(somSelf,ev,frame,sourceFrame) \
  ((( somTD_xih_HelloPart_AttachSourceFrame ) \
      HelloPart_parent_ODPart_AttachSourceFrame_resolved) \
	(somSelf,ev,frame,sourceFrame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_AttachSourceFrame
  #ifdef parent_AttachSourceFrame
    #define SOMGD_pmc_parent_AttachSourceFrame
    #undef parent_AttachSourceFrame
  #else
#define parent_AttachSourceFrame HelloPart_parent_ODPart_AttachSourceFrame
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_AttachSourceFrame
  #ifdef parent_ODPart_AttachSourceFrame
    #define SOMGD_pmc_parent_ODPart_AttachSourceFrame
    #undef parent_ODPart_AttachSourceFrame
  #else
    #define parent_ODPart_AttachSourceFrame HelloPart_parent_ODPart_AttachSourceFrame
  #endif
#endif
#define HelloPart_parents_AttachSourceFrame(somSelf,ev,frame,sourceFrame) (\
   HelloPart_parent_ODPart_AttachSourceFrame(somSelf,ev,frame,sourceFrame))

/*
 * Overridden method: ContainingPartPropertiesUpdated
 */
SOM_Scope void  SOMLINK HelloContainingPartPropertiesUpdated(HelloPart *somSelf, Environment *ev,
		ODFrame* frame,
		ODStorageUnit* propertyUnit);
static char *somMN_HelloPartContainingPartPropertiesUpdated = "ODPart::ContainingPartPropertiesUpdated";
static somId somId_HelloPartContainingPartPropertiesUpdated = &somMN_HelloPartContainingPartPropertiesUpdated;
#ifdef somId_ContainingPartPropertiesUpdated
#undef somId_ContainingPartPropertiesUpdated
#else
#define somId_ContainingPartPropertiesUpdated somId_HelloPartContainingPartPropertiesUpdated
#endif
typedef void   SOMLINK somTP_xih_HelloPart_ContainingPartPropertiesUpdated(HelloPart *somSelf, Environment *ev, 
		ODFrame* frame, 
		ODStorageUnit* propertyUnit);
typedef somTP_xih_HelloPart_ContainingPartPropertiesUpdated *somTD_xih_HelloPart_ContainingPartPropertiesUpdated;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_ContainingPartPropertiesUpdated_resolved;
#define HelloPart_parent_ODPart_ContainingPartPropertiesUpdated(somSelf,ev,frame,propertyUnit) \
  ((( somTD_xih_HelloPart_ContainingPartPropertiesUpdated ) \
      HelloPart_parent_ODPart_ContainingPartPropertiesUpdated_resolved) \
	(somSelf,ev,frame,propertyUnit))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_ContainingPartPropertiesUpdated
  #ifdef parent_ContainingPartPropertiesUpdated
    #define SOMGD_pmc_parent_ContainingPartPropertiesUpdated
    #undef parent_ContainingPartPropertiesUpdated
  #else
#define parent_ContainingPartPropertiesUpdated HelloPart_parent_ODPart_ContainingPartPropertiesUpdated
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_ContainingPartPropertiesUpdated
  #ifdef parent_ODPart_ContainingPartPropertiesUpdated
    #define SOMGD_pmc_parent_ODPart_ContainingPartPropertiesUpdated
    #undef parent_ODPart_ContainingPartPropertiesUpdated
  #else
    #define parent_ODPart_ContainingPartPropertiesUpdated HelloPart_parent_ODPart_ContainingPartPropertiesUpdated
  #endif
#endif
#define HelloPart_parents_ContainingPartPropertiesUpdated(somSelf,ev,frame,propertyUnit) (\
   HelloPart_parent_ODPart_ContainingPartPropertiesUpdated(somSelf,ev,frame,propertyUnit))

/*
 * Overridden method: DisplayFrameAdded
 */
SOM_Scope void  SOMLINK HelloDisplayFrameAdded(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
static char *somMN_HelloPartDisplayFrameAdded = "ODPart::DisplayFrameAdded";
static somId somId_HelloPartDisplayFrameAdded = &somMN_HelloPartDisplayFrameAdded;
#ifdef somId_DisplayFrameAdded
#undef somId_DisplayFrameAdded
#else
#define somId_DisplayFrameAdded somId_HelloPartDisplayFrameAdded
#endif
typedef void   SOMLINK somTP_xih_HelloPart_DisplayFrameAdded(HelloPart *somSelf, Environment *ev, 
		ODFrame* frame);
typedef somTP_xih_HelloPart_DisplayFrameAdded *somTD_xih_HelloPart_DisplayFrameAdded;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_DisplayFrameAdded_resolved;
#define HelloPart_parent_ODPart_DisplayFrameAdded(somSelf,ev,frame) \
  ((( somTD_xih_HelloPart_DisplayFrameAdded ) \
      HelloPart_parent_ODPart_DisplayFrameAdded_resolved) \
	(somSelf,ev,frame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_DisplayFrameAdded
  #ifdef parent_DisplayFrameAdded
    #define SOMGD_pmc_parent_DisplayFrameAdded
    #undef parent_DisplayFrameAdded
  #else
#define parent_DisplayFrameAdded HelloPart_parent_ODPart_DisplayFrameAdded
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_DisplayFrameAdded
  #ifdef parent_ODPart_DisplayFrameAdded
    #define SOMGD_pmc_parent_ODPart_DisplayFrameAdded
    #undef parent_ODPart_DisplayFrameAdded
  #else
    #define parent_ODPart_DisplayFrameAdded HelloPart_parent_ODPart_DisplayFrameAdded
  #endif
#endif
#define HelloPart_parents_DisplayFrameAdded(somSelf,ev,frame) (\
   HelloPart_parent_ODPart_DisplayFrameAdded(somSelf,ev,frame))

/*
 * Overridden method: DisplayFrameClosed
 */
SOM_Scope void  SOMLINK HelloDisplayFrameClosed(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
static char *somMN_HelloPartDisplayFrameClosed = "ODPart::DisplayFrameClosed";
static somId somId_HelloPartDisplayFrameClosed = &somMN_HelloPartDisplayFrameClosed;
#ifdef somId_DisplayFrameClosed
#undef somId_DisplayFrameClosed
#else
#define somId_DisplayFrameClosed somId_HelloPartDisplayFrameClosed
#endif
typedef void   SOMLINK somTP_xih_HelloPart_DisplayFrameClosed(HelloPart *somSelf, Environment *ev, 
		ODFrame* frame);
typedef somTP_xih_HelloPart_DisplayFrameClosed *somTD_xih_HelloPart_DisplayFrameClosed;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_DisplayFrameClosed_resolved;
#define HelloPart_parent_ODPart_DisplayFrameClosed(somSelf,ev,frame) \
  ((( somTD_xih_HelloPart_DisplayFrameClosed ) \
      HelloPart_parent_ODPart_DisplayFrameClosed_resolved) \
	(somSelf,ev,frame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_DisplayFrameClosed
  #ifdef parent_DisplayFrameClosed
    #define SOMGD_pmc_parent_DisplayFrameClosed
    #undef parent_DisplayFrameClosed
  #else
#define parent_DisplayFrameClosed HelloPart_parent_ODPart_DisplayFrameClosed
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_DisplayFrameClosed
  #ifdef parent_ODPart_DisplayFrameClosed
    #define SOMGD_pmc_parent_ODPart_DisplayFrameClosed
    #undef parent_ODPart_DisplayFrameClosed
  #else
    #define parent_ODPart_DisplayFrameClosed HelloPart_parent_ODPart_DisplayFrameClosed
  #endif
#endif
#define HelloPart_parents_DisplayFrameClosed(somSelf,ev,frame) (\
   HelloPart_parent_ODPart_DisplayFrameClosed(somSelf,ev,frame))

/*
 * Overridden method: DisplayFrameConnected
 */
SOM_Scope void  SOMLINK HelloDisplayFrameConnected(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
static char *somMN_HelloPartDisplayFrameConnected = "ODPart::DisplayFrameConnected";
static somId somId_HelloPartDisplayFrameConnected = &somMN_HelloPartDisplayFrameConnected;
#ifdef somId_DisplayFrameConnected
#undef somId_DisplayFrameConnected
#else
#define somId_DisplayFrameConnected somId_HelloPartDisplayFrameConnected
#endif
typedef void   SOMLINK somTP_xih_HelloPart_DisplayFrameConnected(HelloPart *somSelf, Environment *ev, 
		ODFrame* frame);
typedef somTP_xih_HelloPart_DisplayFrameConnected *somTD_xih_HelloPart_DisplayFrameConnected;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_DisplayFrameConnected_resolved;
#define HelloPart_parent_ODPart_DisplayFrameConnected(somSelf,ev,frame) \
  ((( somTD_xih_HelloPart_DisplayFrameConnected ) \
      HelloPart_parent_ODPart_DisplayFrameConnected_resolved) \
	(somSelf,ev,frame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_DisplayFrameConnected
  #ifdef parent_DisplayFrameConnected
    #define SOMGD_pmc_parent_DisplayFrameConnected
    #undef parent_DisplayFrameConnected
  #else
#define parent_DisplayFrameConnected HelloPart_parent_ODPart_DisplayFrameConnected
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_DisplayFrameConnected
  #ifdef parent_ODPart_DisplayFrameConnected
    #define SOMGD_pmc_parent_ODPart_DisplayFrameConnected
    #undef parent_ODPart_DisplayFrameConnected
  #else
    #define parent_ODPart_DisplayFrameConnected HelloPart_parent_ODPart_DisplayFrameConnected
  #endif
#endif
#define HelloPart_parents_DisplayFrameConnected(somSelf,ev,frame) (\
   HelloPart_parent_ODPart_DisplayFrameConnected(somSelf,ev,frame))

/*
 * Overridden method: DisplayFrameRemoved
 */
SOM_Scope void  SOMLINK HelloDisplayFrameRemoved(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
static char *somMN_HelloPartDisplayFrameRemoved = "ODPart::DisplayFrameRemoved";
static somId somId_HelloPartDisplayFrameRemoved = &somMN_HelloPartDisplayFrameRemoved;
#ifdef somId_DisplayFrameRemoved
#undef somId_DisplayFrameRemoved
#else
#define somId_DisplayFrameRemoved somId_HelloPartDisplayFrameRemoved
#endif
typedef void   SOMLINK somTP_xih_HelloPart_DisplayFrameRemoved(HelloPart *somSelf, Environment *ev, 
		ODFrame* frame);
typedef somTP_xih_HelloPart_DisplayFrameRemoved *somTD_xih_HelloPart_DisplayFrameRemoved;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_DisplayFrameRemoved_resolved;
#define HelloPart_parent_ODPart_DisplayFrameRemoved(somSelf,ev,frame) \
  ((( somTD_xih_HelloPart_DisplayFrameRemoved ) \
      HelloPart_parent_ODPart_DisplayFrameRemoved_resolved) \
	(somSelf,ev,frame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_DisplayFrameRemoved
  #ifdef parent_DisplayFrameRemoved
    #define SOMGD_pmc_parent_DisplayFrameRemoved
    #undef parent_DisplayFrameRemoved
  #else
#define parent_DisplayFrameRemoved HelloPart_parent_ODPart_DisplayFrameRemoved
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_DisplayFrameRemoved
  #ifdef parent_ODPart_DisplayFrameRemoved
    #define SOMGD_pmc_parent_ODPart_DisplayFrameRemoved
    #undef parent_ODPart_DisplayFrameRemoved
  #else
    #define parent_ODPart_DisplayFrameRemoved HelloPart_parent_ODPart_DisplayFrameRemoved
  #endif
#endif
#define HelloPart_parents_DisplayFrameRemoved(somSelf,ev,frame) (\
   HelloPart_parent_ODPart_DisplayFrameRemoved(somSelf,ev,frame))

/*
 * Overridden method: FacetAdded
 */
SOM_Scope void  SOMLINK HelloFacetAdded(HelloPart *somSelf, Environment *ev,
		ODFacet* facet);
static char *somMN_HelloPartFacetAdded = "ODPart::FacetAdded";
static somId somId_HelloPartFacetAdded = &somMN_HelloPartFacetAdded;
#ifdef somId_FacetAdded
#undef somId_FacetAdded
#else
#define somId_FacetAdded somId_HelloPartFacetAdded
#endif
typedef void   SOMLINK somTP_xih_HelloPart_FacetAdded(HelloPart *somSelf, Environment *ev, 
		ODFacet* facet);
typedef somTP_xih_HelloPart_FacetAdded *somTD_xih_HelloPart_FacetAdded;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_FacetAdded_resolved;
#define HelloPart_parent_ODPart_FacetAdded(somSelf,ev,facet) \
  ((( somTD_xih_HelloPart_FacetAdded ) \
      HelloPart_parent_ODPart_FacetAdded_resolved) \
	(somSelf,ev,facet))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_FacetAdded
  #ifdef parent_FacetAdded
    #define SOMGD_pmc_parent_FacetAdded
    #undef parent_FacetAdded
  #else
#define parent_FacetAdded HelloPart_parent_ODPart_FacetAdded
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_FacetAdded
  #ifdef parent_ODPart_FacetAdded
    #define SOMGD_pmc_parent_ODPart_FacetAdded
    #undef parent_ODPart_FacetAdded
  #else
    #define parent_ODPart_FacetAdded HelloPart_parent_ODPart_FacetAdded
  #endif
#endif
#define HelloPart_parents_FacetAdded(somSelf,ev,facet) (\
   HelloPart_parent_ODPart_FacetAdded(somSelf,ev,facet))

/*
 * Overridden method: FacetRemoved
 */
SOM_Scope void  SOMLINK HelloFacetRemoved(HelloPart *somSelf, Environment *ev,
		ODFacet* facet);
static char *somMN_HelloPartFacetRemoved = "ODPart::FacetRemoved";
static somId somId_HelloPartFacetRemoved = &somMN_HelloPartFacetRemoved;
#ifdef somId_FacetRemoved
#undef somId_FacetRemoved
#else
#define somId_FacetRemoved somId_HelloPartFacetRemoved
#endif
typedef void   SOMLINK somTP_xih_HelloPart_FacetRemoved(HelloPart *somSelf, Environment *ev, 
		ODFacet* facet);
typedef somTP_xih_HelloPart_FacetRemoved *somTD_xih_HelloPart_FacetRemoved;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_FacetRemoved_resolved;
#define HelloPart_parent_ODPart_FacetRemoved(somSelf,ev,facet) \
  ((( somTD_xih_HelloPart_FacetRemoved ) \
      HelloPart_parent_ODPart_FacetRemoved_resolved) \
	(somSelf,ev,facet))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_FacetRemoved
  #ifdef parent_FacetRemoved
    #define SOMGD_pmc_parent_FacetRemoved
    #undef parent_FacetRemoved
  #else
#define parent_FacetRemoved HelloPart_parent_ODPart_FacetRemoved
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_FacetRemoved
  #ifdef parent_ODPart_FacetRemoved
    #define SOMGD_pmc_parent_ODPart_FacetRemoved
    #undef parent_ODPart_FacetRemoved
  #else
    #define parent_ODPart_FacetRemoved HelloPart_parent_ODPart_FacetRemoved
  #endif
#endif
#define HelloPart_parents_FacetRemoved(somSelf,ev,facet) (\
   HelloPart_parent_ODPart_FacetRemoved(somSelf,ev,facet))

/*
 * Overridden method: FrameShapeChanged
 */
SOM_Scope void  SOMLINK HelloFrameShapeChanged(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
static char *somMN_HelloPartFrameShapeChanged = "ODPart::FrameShapeChanged";
static somId somId_HelloPartFrameShapeChanged = &somMN_HelloPartFrameShapeChanged;
#ifdef somId_FrameShapeChanged
#undef somId_FrameShapeChanged
#else
#define somId_FrameShapeChanged somId_HelloPartFrameShapeChanged
#endif
typedef void   SOMLINK somTP_xih_HelloPart_FrameShapeChanged(HelloPart *somSelf, Environment *ev, 
		ODFrame* frame);
typedef somTP_xih_HelloPart_FrameShapeChanged *somTD_xih_HelloPart_FrameShapeChanged;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_FrameShapeChanged_resolved;
#define HelloPart_parent_ODPart_FrameShapeChanged(somSelf,ev,frame) \
  ((( somTD_xih_HelloPart_FrameShapeChanged ) \
      HelloPart_parent_ODPart_FrameShapeChanged_resolved) \
	(somSelf,ev,frame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_FrameShapeChanged
  #ifdef parent_FrameShapeChanged
    #define SOMGD_pmc_parent_FrameShapeChanged
    #undef parent_FrameShapeChanged
  #else
#define parent_FrameShapeChanged HelloPart_parent_ODPart_FrameShapeChanged
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_FrameShapeChanged
  #ifdef parent_ODPart_FrameShapeChanged
    #define SOMGD_pmc_parent_ODPart_FrameShapeChanged
    #undef parent_ODPart_FrameShapeChanged
  #else
    #define parent_ODPart_FrameShapeChanged HelloPart_parent_ODPart_FrameShapeChanged
  #endif
#endif
#define HelloPart_parents_FrameShapeChanged(somSelf,ev,frame) (\
   HelloPart_parent_ODPart_FrameShapeChanged(somSelf,ev,frame))

/*
 * Overridden method: GeometryChanged
 */
SOM_Scope void  SOMLINK HelloGeometryChanged(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		ODBoolean clipShapeChanged,
		ODBoolean externalTransformChanged);
static char *somMN_HelloPartGeometryChanged = "ODPart::GeometryChanged";
static somId somId_HelloPartGeometryChanged = &somMN_HelloPartGeometryChanged;
#ifdef somId_GeometryChanged
#undef somId_GeometryChanged
#else
#define somId_GeometryChanged somId_HelloPartGeometryChanged
#endif
typedef void   SOMLINK somTP_xih_HelloPart_GeometryChanged(HelloPart *somSelf, Environment *ev, 
		ODFacet* facet, 
		ODBoolean clipShapeChanged, 
		ODBoolean externalTransformChanged);
typedef somTP_xih_HelloPart_GeometryChanged *somTD_xih_HelloPart_GeometryChanged;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_GeometryChanged_resolved;
#define HelloPart_parent_ODPart_GeometryChanged(somSelf,ev,facet,clipShapeChanged,externalTransformChanged) \
  ((( somTD_xih_HelloPart_GeometryChanged ) \
      HelloPart_parent_ODPart_GeometryChanged_resolved) \
	(somSelf,ev,facet,clipShapeChanged,externalTransformChanged))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_GeometryChanged
  #ifdef parent_GeometryChanged
    #define SOMGD_pmc_parent_GeometryChanged
    #undef parent_GeometryChanged
  #else
#define parent_GeometryChanged HelloPart_parent_ODPart_GeometryChanged
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_GeometryChanged
  #ifdef parent_ODPart_GeometryChanged
    #define SOMGD_pmc_parent_ODPart_GeometryChanged
    #undef parent_ODPart_GeometryChanged
  #else
    #define parent_ODPart_GeometryChanged HelloPart_parent_ODPart_GeometryChanged
  #endif
#endif
#define HelloPart_parents_GeometryChanged(somSelf,ev,facet,clipShapeChanged,externalTransformChanged) (\
   HelloPart_parent_ODPart_GeometryChanged(somSelf,ev,facet,clipShapeChanged,externalTransformChanged))

/*
 * Overridden method: Open
 */
SOM_Scope ODID  SOMLINK HelloOpen(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
static char *somMN_HelloPartOpen = "ODPart::Open";
static somId somId_HelloPartOpen = &somMN_HelloPartOpen;
#ifdef somId_Open
#undef somId_Open
#else
#define somId_Open somId_HelloPartOpen
#endif
typedef ODID   SOMLINK somTP_xih_HelloPart_Open(HelloPart *somSelf, Environment *ev, 
		ODFrame* frame);
typedef somTP_xih_HelloPart_Open *somTD_xih_HelloPart_Open;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_Open_resolved;
#define HelloPart_parent_ODPart_Open(somSelf,ev,frame) \
  ((( somTD_xih_HelloPart_Open ) \
      HelloPart_parent_ODPart_Open_resolved) \
	(somSelf,ev,frame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_Open
  #ifdef parent_Open
    #define SOMGD_pmc_parent_Open
    #undef parent_Open
  #else
#define parent_Open HelloPart_parent_ODPart_Open
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_Open
  #ifdef parent_ODPart_Open
    #define SOMGD_pmc_parent_ODPart_Open
    #undef parent_ODPart_Open
  #else
    #define parent_ODPart_Open HelloPart_parent_ODPart_Open
  #endif
#endif
#define HelloPart_parents_Open(somSelf,ev,frame) (\
   HelloPart_parent_ODPart_Open(somSelf,ev,frame))

/*
 * Overridden method: SequenceChanged
 */
SOM_Scope void  SOMLINK HelloSequenceChanged(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
static char *somMN_HelloPartSequenceChanged = "ODPart::SequenceChanged";
static somId somId_HelloPartSequenceChanged = &somMN_HelloPartSequenceChanged;
#ifdef somId_SequenceChanged
#undef somId_SequenceChanged
#else
#define somId_SequenceChanged somId_HelloPartSequenceChanged
#endif
typedef void   SOMLINK somTP_xih_HelloPart_SequenceChanged(HelloPart *somSelf, Environment *ev, 
		ODFrame* frame);
typedef somTP_xih_HelloPart_SequenceChanged *somTD_xih_HelloPart_SequenceChanged;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_SequenceChanged_resolved;
#define HelloPart_parent_ODPart_SequenceChanged(somSelf,ev,frame) \
  ((( somTD_xih_HelloPart_SequenceChanged ) \
      HelloPart_parent_ODPart_SequenceChanged_resolved) \
	(somSelf,ev,frame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_SequenceChanged
  #ifdef parent_SequenceChanged
    #define SOMGD_pmc_parent_SequenceChanged
    #undef parent_SequenceChanged
  #else
#define parent_SequenceChanged HelloPart_parent_ODPart_SequenceChanged
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_SequenceChanged
  #ifdef parent_ODPart_SequenceChanged
    #define SOMGD_pmc_parent_ODPart_SequenceChanged
    #undef parent_ODPart_SequenceChanged
  #else
    #define parent_ODPart_SequenceChanged HelloPart_parent_ODPart_SequenceChanged
  #endif
#endif
#define HelloPart_parents_SequenceChanged(somSelf,ev,frame) (\
   HelloPart_parent_ODPart_SequenceChanged(somSelf,ev,frame))

/*
 * Overridden method: CanvasChanged
 */
SOM_Scope void  SOMLINK HelloCanvasChanged(HelloPart *somSelf, Environment *ev,
		ODFacet* facet);
static char *somMN_HelloPartCanvasChanged = "ODPart::CanvasChanged";
static somId somId_HelloPartCanvasChanged = &somMN_HelloPartCanvasChanged;
#ifdef somId_CanvasChanged
#undef somId_CanvasChanged
#else
#define somId_CanvasChanged somId_HelloPartCanvasChanged
#endif
typedef void   SOMLINK somTP_xih_HelloPart_CanvasChanged(HelloPart *somSelf, Environment *ev, 
		ODFacet* facet);
typedef somTP_xih_HelloPart_CanvasChanged *somTD_xih_HelloPart_CanvasChanged;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_CanvasChanged_resolved;
#define HelloPart_parent_ODPart_CanvasChanged(somSelf,ev,facet) \
  ((( somTD_xih_HelloPart_CanvasChanged ) \
      HelloPart_parent_ODPart_CanvasChanged_resolved) \
	(somSelf,ev,facet))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_CanvasChanged
  #ifdef parent_CanvasChanged
    #define SOMGD_pmc_parent_CanvasChanged
    #undef parent_CanvasChanged
  #else
#define parent_CanvasChanged HelloPart_parent_ODPart_CanvasChanged
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_CanvasChanged
  #ifdef parent_ODPart_CanvasChanged
    #define SOMGD_pmc_parent_ODPart_CanvasChanged
    #undef parent_ODPart_CanvasChanged
  #else
    #define parent_ODPart_CanvasChanged HelloPart_parent_ODPart_CanvasChanged
  #endif
#endif
#define HelloPart_parents_CanvasChanged(somSelf,ev,facet) (\
   HelloPart_parent_ODPart_CanvasChanged(somSelf,ev,facet))

/*
 * Overridden method: Draw
 */
SOM_Scope void  SOMLINK HelloDraw(HelloPart *somSelf, Environment *ev,
		ODFacet* facet,
		ODShape* invalidShape);
static char *somMN_HelloPartDraw = "ODPart::Draw";
static somId somId_HelloPartDraw = &somMN_HelloPartDraw;
#ifdef somId_Draw
#undef somId_Draw
#else
#define somId_Draw somId_HelloPartDraw
#endif
typedef void   SOMLINK somTP_xih_HelloPart_Draw(HelloPart *somSelf, Environment *ev, 
		ODFacet* facet, 
		ODShape* invalidShape);
typedef somTP_xih_HelloPart_Draw *somTD_xih_HelloPart_Draw;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_Draw_resolved;
#define HelloPart_parent_ODPart_Draw(somSelf,ev,facet,invalidShape) \
  ((( somTD_xih_HelloPart_Draw ) \
      HelloPart_parent_ODPart_Draw_resolved) \
	(somSelf,ev,facet,invalidShape))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_Draw
  #ifdef parent_Draw
    #define SOMGD_pmc_parent_Draw
    #undef parent_Draw
  #else
#define parent_Draw HelloPart_parent_ODPart_Draw
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_Draw
  #ifdef parent_ODPart_Draw
    #define SOMGD_pmc_parent_ODPart_Draw
    #undef parent_ODPart_Draw
  #else
    #define parent_ODPart_Draw HelloPart_parent_ODPart_Draw
  #endif
#endif
#define HelloPart_parents_Draw(somSelf,ev,facet,invalidShape) (\
   HelloPart_parent_ODPart_Draw(somSelf,ev,facet,invalidShape))

/*
 * Overridden method: GetPrintResolution
 */
SOM_Scope ODULong  SOMLINK HelloGetPrintResolution(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
static char *somMN_HelloPartGetPrintResolution = "ODPart::GetPrintResolution";
static somId somId_HelloPartGetPrintResolution = &somMN_HelloPartGetPrintResolution;
#ifdef somId_GetPrintResolution
#undef somId_GetPrintResolution
#else
#define somId_GetPrintResolution somId_HelloPartGetPrintResolution
#endif
typedef ODULong   SOMLINK somTP_xih_HelloPart_GetPrintResolution(HelloPart *somSelf, Environment *ev, 
		ODFrame* frame);
typedef somTP_xih_HelloPart_GetPrintResolution *somTD_xih_HelloPart_GetPrintResolution;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_GetPrintResolution_resolved;
#define HelloPart_parent_ODPart_GetPrintResolution(somSelf,ev,frame) \
  ((( somTD_xih_HelloPart_GetPrintResolution ) \
      HelloPart_parent_ODPart_GetPrintResolution_resolved) \
	(somSelf,ev,frame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_GetPrintResolution
  #ifdef parent_GetPrintResolution
    #define SOMGD_pmc_parent_GetPrintResolution
    #undef parent_GetPrintResolution
  #else
#define parent_GetPrintResolution HelloPart_parent_ODPart_GetPrintResolution
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_GetPrintResolution
  #ifdef parent_ODPart_GetPrintResolution
    #define SOMGD_pmc_parent_ODPart_GetPrintResolution
    #undef parent_ODPart_GetPrintResolution
  #else
    #define parent_ODPart_GetPrintResolution HelloPart_parent_ODPart_GetPrintResolution
  #endif
#endif
#define HelloPart_parents_GetPrintResolution(somSelf,ev,frame) (\
   HelloPart_parent_ODPart_GetPrintResolution(somSelf,ev,frame))

/*
 * Overridden method: HighlightChanged
 */
SOM_Scope void  SOMLINK HelloHighlightChanged(HelloPart *somSelf, Environment *ev,
		ODFacet* facet);
static char *somMN_HelloPartHighlightChanged = "ODPart::HighlightChanged";
static somId somId_HelloPartHighlightChanged = &somMN_HelloPartHighlightChanged;
#ifdef somId_HighlightChanged
#undef somId_HighlightChanged
#else
#define somId_HighlightChanged somId_HelloPartHighlightChanged
#endif
typedef void   SOMLINK somTP_xih_HelloPart_HighlightChanged(HelloPart *somSelf, Environment *ev, 
		ODFacet* facet);
typedef somTP_xih_HelloPart_HighlightChanged *somTD_xih_HelloPart_HighlightChanged;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_HighlightChanged_resolved;
#define HelloPart_parent_ODPart_HighlightChanged(somSelf,ev,facet) \
  ((( somTD_xih_HelloPart_HighlightChanged ) \
      HelloPart_parent_ODPart_HighlightChanged_resolved) \
	(somSelf,ev,facet))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_HighlightChanged
  #ifdef parent_HighlightChanged
    #define SOMGD_pmc_parent_HighlightChanged
    #undef parent_HighlightChanged
  #else
#define parent_HighlightChanged HelloPart_parent_ODPart_HighlightChanged
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_HighlightChanged
  #ifdef parent_ODPart_HighlightChanged
    #define SOMGD_pmc_parent_ODPart_HighlightChanged
    #undef parent_ODPart_HighlightChanged
  #else
    #define parent_ODPart_HighlightChanged HelloPart_parent_ODPart_HighlightChanged
  #endif
#endif
#define HelloPart_parents_HighlightChanged(somSelf,ev,facet) (\
   HelloPart_parent_ODPart_HighlightChanged(somSelf,ev,facet))

/*
 * Overridden method: PresentationChanged
 */
SOM_Scope void  SOMLINK HelloPresentationChanged(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
static char *somMN_HelloPartPresentationChanged = "ODPart::PresentationChanged";
static somId somId_HelloPartPresentationChanged = &somMN_HelloPartPresentationChanged;
#ifdef somId_PresentationChanged
#undef somId_PresentationChanged
#else
#define somId_PresentationChanged somId_HelloPartPresentationChanged
#endif
typedef void   SOMLINK somTP_xih_HelloPart_PresentationChanged(HelloPart *somSelf, Environment *ev, 
		ODFrame* frame);
typedef somTP_xih_HelloPart_PresentationChanged *somTD_xih_HelloPart_PresentationChanged;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_PresentationChanged_resolved;
#define HelloPart_parent_ODPart_PresentationChanged(somSelf,ev,frame) \
  ((( somTD_xih_HelloPart_PresentationChanged ) \
      HelloPart_parent_ODPart_PresentationChanged_resolved) \
	(somSelf,ev,frame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_PresentationChanged
  #ifdef parent_PresentationChanged
    #define SOMGD_pmc_parent_PresentationChanged
    #undef parent_PresentationChanged
  #else
#define parent_PresentationChanged HelloPart_parent_ODPart_PresentationChanged
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_PresentationChanged
  #ifdef parent_ODPart_PresentationChanged
    #define SOMGD_pmc_parent_ODPart_PresentationChanged
    #undef parent_ODPart_PresentationChanged
  #else
    #define parent_ODPart_PresentationChanged HelloPart_parent_ODPart_PresentationChanged
  #endif
#endif
#define HelloPart_parents_PresentationChanged(somSelf,ev,frame) (\
   HelloPart_parent_ODPart_PresentationChanged(somSelf,ev,frame))

/*
 * Overridden method: ViewTypeChanged
 */
SOM_Scope void  SOMLINK HelloViewTypeChanged(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
static char *somMN_HelloPartViewTypeChanged = "ODPart::ViewTypeChanged";
static somId somId_HelloPartViewTypeChanged = &somMN_HelloPartViewTypeChanged;
#ifdef somId_ViewTypeChanged
#undef somId_ViewTypeChanged
#else
#define somId_ViewTypeChanged somId_HelloPartViewTypeChanged
#endif
typedef void   SOMLINK somTP_xih_HelloPart_ViewTypeChanged(HelloPart *somSelf, Environment *ev, 
		ODFrame* frame);
typedef somTP_xih_HelloPart_ViewTypeChanged *somTD_xih_HelloPart_ViewTypeChanged;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_ViewTypeChanged_resolved;
#define HelloPart_parent_ODPart_ViewTypeChanged(somSelf,ev,frame) \
  ((( somTD_xih_HelloPart_ViewTypeChanged ) \
      HelloPart_parent_ODPart_ViewTypeChanged_resolved) \
	(somSelf,ev,frame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_ViewTypeChanged
  #ifdef parent_ViewTypeChanged
    #define SOMGD_pmc_parent_ViewTypeChanged
    #undef parent_ViewTypeChanged
  #else
#define parent_ViewTypeChanged HelloPart_parent_ODPart_ViewTypeChanged
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_ViewTypeChanged
  #ifdef parent_ODPart_ViewTypeChanged
    #define SOMGD_pmc_parent_ODPart_ViewTypeChanged
    #undef parent_ODPart_ViewTypeChanged
  #else
    #define parent_ODPart_ViewTypeChanged HelloPart_parent_ODPart_ViewTypeChanged
  #endif
#endif
#define HelloPart_parents_ViewTypeChanged(somSelf,ev,frame) (\
   HelloPart_parent_ODPart_ViewTypeChanged(somSelf,ev,frame))

/*
 * Overridden method: BeginRelinquishFocus
 */
SOM_Scope ODBoolean  SOMLINK HelloBeginRelinquishFocus(HelloPart *somSelf, Environment *ev,
		ODTypeToken focus,
		ODFrame* ownerFrame,
		ODFrame* proposedFrame);
static char *somMN_HelloPartBeginRelinquishFocus = "ODPart::BeginRelinquishFocus";
static somId somId_HelloPartBeginRelinquishFocus = &somMN_HelloPartBeginRelinquishFocus;
#ifdef somId_BeginRelinquishFocus
#undef somId_BeginRelinquishFocus
#else
#define somId_BeginRelinquishFocus somId_HelloPartBeginRelinquishFocus
#endif
typedef ODBoolean   SOMLINK somTP_xih_HelloPart_BeginRelinquishFocus(HelloPart *somSelf, Environment *ev, 
		ODTypeToken focus, 
		ODFrame* ownerFrame, 
		ODFrame* proposedFrame);
typedef somTP_xih_HelloPart_BeginRelinquishFocus *somTD_xih_HelloPart_BeginRelinquishFocus;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_BeginRelinquishFocus_resolved;
#define HelloPart_parent_ODPart_BeginRelinquishFocus(somSelf,ev,focus,ownerFrame,proposedFrame) \
  ((( somTD_xih_HelloPart_BeginRelinquishFocus ) \
      HelloPart_parent_ODPart_BeginRelinquishFocus_resolved) \
	(somSelf,ev,focus,ownerFrame,proposedFrame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_BeginRelinquishFocus
  #ifdef parent_BeginRelinquishFocus
    #define SOMGD_pmc_parent_BeginRelinquishFocus
    #undef parent_BeginRelinquishFocus
  #else
#define parent_BeginRelinquishFocus HelloPart_parent_ODPart_BeginRelinquishFocus
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_BeginRelinquishFocus
  #ifdef parent_ODPart_BeginRelinquishFocus
    #define SOMGD_pmc_parent_ODPart_BeginRelinquishFocus
    #undef parent_ODPart_BeginRelinquishFocus
  #else
    #define parent_ODPart_BeginRelinquishFocus HelloPart_parent_ODPart_BeginRelinquishFocus
  #endif
#endif
#define HelloPart_parents_BeginRelinquishFocus(somSelf,ev,focus,ownerFrame,proposedFrame) (\
   HelloPart_parent_ODPart_BeginRelinquishFocus(somSelf,ev,focus,ownerFrame,proposedFrame))

/*
 * Overridden method: CommitRelinquishFocus
 */
SOM_Scope void  SOMLINK HelloCommitRelinquishFocus(HelloPart *somSelf, Environment *ev,
		ODTypeToken focus,
		ODFrame* ownerFrame,
		ODFrame* proposedFrame);
static char *somMN_HelloPartCommitRelinquishFocus = "ODPart::CommitRelinquishFocus";
static somId somId_HelloPartCommitRelinquishFocus = &somMN_HelloPartCommitRelinquishFocus;
#ifdef somId_CommitRelinquishFocus
#undef somId_CommitRelinquishFocus
#else
#define somId_CommitRelinquishFocus somId_HelloPartCommitRelinquishFocus
#endif
typedef void   SOMLINK somTP_xih_HelloPart_CommitRelinquishFocus(HelloPart *somSelf, Environment *ev, 
		ODTypeToken focus, 
		ODFrame* ownerFrame, 
		ODFrame* proposedFrame);
typedef somTP_xih_HelloPart_CommitRelinquishFocus *somTD_xih_HelloPart_CommitRelinquishFocus;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_CommitRelinquishFocus_resolved;
#define HelloPart_parent_ODPart_CommitRelinquishFocus(somSelf,ev,focus,ownerFrame,proposedFrame) \
  ((( somTD_xih_HelloPart_CommitRelinquishFocus ) \
      HelloPart_parent_ODPart_CommitRelinquishFocus_resolved) \
	(somSelf,ev,focus,ownerFrame,proposedFrame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_CommitRelinquishFocus
  #ifdef parent_CommitRelinquishFocus
    #define SOMGD_pmc_parent_CommitRelinquishFocus
    #undef parent_CommitRelinquishFocus
  #else
#define parent_CommitRelinquishFocus HelloPart_parent_ODPart_CommitRelinquishFocus
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_CommitRelinquishFocus
  #ifdef parent_ODPart_CommitRelinquishFocus
    #define SOMGD_pmc_parent_ODPart_CommitRelinquishFocus
    #undef parent_ODPart_CommitRelinquishFocus
  #else
    #define parent_ODPart_CommitRelinquishFocus HelloPart_parent_ODPart_CommitRelinquishFocus
  #endif
#endif
#define HelloPart_parents_CommitRelinquishFocus(somSelf,ev,focus,ownerFrame,proposedFrame) (\
   HelloPart_parent_ODPart_CommitRelinquishFocus(somSelf,ev,focus,ownerFrame,proposedFrame))

/*
 * Overridden method: AbortRelinquishFocus
 */
SOM_Scope void  SOMLINK HelloAbortRelinquishFocus(HelloPart *somSelf, Environment *ev,
		ODTypeToken focus,
		ODFrame* ownerFrame,
		ODFrame* proposedFrame);
static char *somMN_HelloPartAbortRelinquishFocus = "ODPart::AbortRelinquishFocus";
static somId somId_HelloPartAbortRelinquishFocus = &somMN_HelloPartAbortRelinquishFocus;
#ifdef somId_AbortRelinquishFocus
#undef somId_AbortRelinquishFocus
#else
#define somId_AbortRelinquishFocus somId_HelloPartAbortRelinquishFocus
#endif
typedef void   SOMLINK somTP_xih_HelloPart_AbortRelinquishFocus(HelloPart *somSelf, Environment *ev, 
		ODTypeToken focus, 
		ODFrame* ownerFrame, 
		ODFrame* proposedFrame);
typedef somTP_xih_HelloPart_AbortRelinquishFocus *somTD_xih_HelloPart_AbortRelinquishFocus;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_AbortRelinquishFocus_resolved;
#define HelloPart_parent_ODPart_AbortRelinquishFocus(somSelf,ev,focus,ownerFrame,proposedFrame) \
  ((( somTD_xih_HelloPart_AbortRelinquishFocus ) \
      HelloPart_parent_ODPart_AbortRelinquishFocus_resolved) \
	(somSelf,ev,focus,ownerFrame,proposedFrame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_AbortRelinquishFocus
  #ifdef parent_AbortRelinquishFocus
    #define SOMGD_pmc_parent_AbortRelinquishFocus
    #undef parent_AbortRelinquishFocus
  #else
#define parent_AbortRelinquishFocus HelloPart_parent_ODPart_AbortRelinquishFocus
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_AbortRelinquishFocus
  #ifdef parent_ODPart_AbortRelinquishFocus
    #define SOMGD_pmc_parent_ODPart_AbortRelinquishFocus
    #undef parent_ODPart_AbortRelinquishFocus
  #else
    #define parent_ODPart_AbortRelinquishFocus HelloPart_parent_ODPart_AbortRelinquishFocus
  #endif
#endif
#define HelloPart_parents_AbortRelinquishFocus(somSelf,ev,focus,ownerFrame,proposedFrame) (\
   HelloPart_parent_ODPart_AbortRelinquishFocus(somSelf,ev,focus,ownerFrame,proposedFrame))

/*
 * Overridden method: FocusAcquired
 */
SOM_Scope void  SOMLINK HelloFocusAcquired(HelloPart *somSelf, Environment *ev,
		ODTypeToken focus,
		ODFrame* ownerFrame);
static char *somMN_HelloPartFocusAcquired = "ODPart::FocusAcquired";
static somId somId_HelloPartFocusAcquired = &somMN_HelloPartFocusAcquired;
#ifdef somId_FocusAcquired
#undef somId_FocusAcquired
#else
#define somId_FocusAcquired somId_HelloPartFocusAcquired
#endif
typedef void   SOMLINK somTP_xih_HelloPart_FocusAcquired(HelloPart *somSelf, Environment *ev, 
		ODTypeToken focus, 
		ODFrame* ownerFrame);
typedef somTP_xih_HelloPart_FocusAcquired *somTD_xih_HelloPart_FocusAcquired;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_FocusAcquired_resolved;
#define HelloPart_parent_ODPart_FocusAcquired(somSelf,ev,focus,ownerFrame) \
  ((( somTD_xih_HelloPart_FocusAcquired ) \
      HelloPart_parent_ODPart_FocusAcquired_resolved) \
	(somSelf,ev,focus,ownerFrame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_FocusAcquired
  #ifdef parent_FocusAcquired
    #define SOMGD_pmc_parent_FocusAcquired
    #undef parent_FocusAcquired
  #else
#define parent_FocusAcquired HelloPart_parent_ODPart_FocusAcquired
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_FocusAcquired
  #ifdef parent_ODPart_FocusAcquired
    #define SOMGD_pmc_parent_ODPart_FocusAcquired
    #undef parent_ODPart_FocusAcquired
  #else
    #define parent_ODPart_FocusAcquired HelloPart_parent_ODPart_FocusAcquired
  #endif
#endif
#define HelloPart_parents_FocusAcquired(somSelf,ev,focus,ownerFrame) (\
   HelloPart_parent_ODPart_FocusAcquired(somSelf,ev,focus,ownerFrame))

/*
 * Overridden method: FocusLost
 */
SOM_Scope void  SOMLINK HelloFocusLost(HelloPart *somSelf, Environment *ev,
		ODTypeToken focus,
		ODFrame* ownerFrame);
static char *somMN_HelloPartFocusLost = "ODPart::FocusLost";
static somId somId_HelloPartFocusLost = &somMN_HelloPartFocusLost;
#ifdef somId_FocusLost
#undef somId_FocusLost
#else
#define somId_FocusLost somId_HelloPartFocusLost
#endif
typedef void   SOMLINK somTP_xih_HelloPart_FocusLost(HelloPart *somSelf, Environment *ev, 
		ODTypeToken focus, 
		ODFrame* ownerFrame);
typedef somTP_xih_HelloPart_FocusLost *somTD_xih_HelloPart_FocusLost;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_FocusLost_resolved;
#define HelloPart_parent_ODPart_FocusLost(somSelf,ev,focus,ownerFrame) \
  ((( somTD_xih_HelloPart_FocusLost ) \
      HelloPart_parent_ODPart_FocusLost_resolved) \
	(somSelf,ev,focus,ownerFrame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_FocusLost
  #ifdef parent_FocusLost
    #define SOMGD_pmc_parent_FocusLost
    #undef parent_FocusLost
  #else
#define parent_FocusLost HelloPart_parent_ODPart_FocusLost
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_FocusLost
  #ifdef parent_ODPart_FocusLost
    #define SOMGD_pmc_parent_ODPart_FocusLost
    #undef parent_ODPart_FocusLost
  #else
    #define parent_ODPart_FocusLost HelloPart_parent_ODPart_FocusLost
  #endif
#endif
#define HelloPart_parents_FocusLost(somSelf,ev,focus,ownerFrame) (\
   HelloPart_parent_ODPart_FocusLost(somSelf,ev,focus,ownerFrame))

/*
 * Overridden method: HandleEvent
 */
SOM_Scope ODBoolean  SOMLINK HelloHandleEvent(HelloPart *somSelf, Environment *ev,
		ODEventData* event,
		ODFrame* frame,
		ODFacet* facet,
		ODEventInfo* eventInfo);
static char *somMN_HelloPartHandleEvent = "ODPart::HandleEvent";
static somId somId_HelloPartHandleEvent = &somMN_HelloPartHandleEvent;
#ifdef somId_HandleEvent
#undef somId_HandleEvent
#else
#define somId_HandleEvent somId_HelloPartHandleEvent
#endif
typedef ODBoolean   SOMLINK somTP_xih_HelloPart_HandleEvent(HelloPart *somSelf, Environment *ev, 
		ODEventData* event, 
		ODFrame* frame, 
		ODFacet* facet, 
		ODEventInfo* eventInfo);
typedef somTP_xih_HelloPart_HandleEvent *somTD_xih_HelloPart_HandleEvent;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_HandleEvent_resolved;
#define HelloPart_parent_ODPart_HandleEvent(somSelf,ev,event,frame,facet,eventInfo) \
  ((( somTD_xih_HelloPart_HandleEvent ) \
      HelloPart_parent_ODPart_HandleEvent_resolved) \
	(somSelf,ev,event,frame,facet,eventInfo))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_HandleEvent
  #ifdef parent_HandleEvent
    #define SOMGD_pmc_parent_HandleEvent
    #undef parent_HandleEvent
  #else
#define parent_HandleEvent HelloPart_parent_ODPart_HandleEvent
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_HandleEvent
  #ifdef parent_ODPart_HandleEvent
    #define SOMGD_pmc_parent_ODPart_HandleEvent
    #undef parent_ODPart_HandleEvent
  #else
    #define parent_ODPart_HandleEvent HelloPart_parent_ODPart_HandleEvent
  #endif
#endif
#define HelloPart_parents_HandleEvent(somSelf,ev,event,frame,facet,eventInfo) (\
   HelloPart_parent_ODPart_HandleEvent(somSelf,ev,event,frame,facet,eventInfo))

/*
 * Overridden method: AdjustMenus
 */
SOM_Scope void  SOMLINK HelloAdjustMenus(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
static char *somMN_HelloPartAdjustMenus = "ODPart::AdjustMenus";
static somId somId_HelloPartAdjustMenus = &somMN_HelloPartAdjustMenus;
#ifdef somId_AdjustMenus
#undef somId_AdjustMenus
#else
#define somId_AdjustMenus somId_HelloPartAdjustMenus
#endif
typedef void   SOMLINK somTP_xih_HelloPart_AdjustMenus(HelloPart *somSelf, Environment *ev, 
		ODFrame* frame);
typedef somTP_xih_HelloPart_AdjustMenus *somTD_xih_HelloPart_AdjustMenus;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_AdjustMenus_resolved;
#define HelloPart_parent_ODPart_AdjustMenus(somSelf,ev,frame) \
  ((( somTD_xih_HelloPart_AdjustMenus ) \
      HelloPart_parent_ODPart_AdjustMenus_resolved) \
	(somSelf,ev,frame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_AdjustMenus
  #ifdef parent_AdjustMenus
    #define SOMGD_pmc_parent_AdjustMenus
    #undef parent_AdjustMenus
  #else
#define parent_AdjustMenus HelloPart_parent_ODPart_AdjustMenus
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_AdjustMenus
  #ifdef parent_ODPart_AdjustMenus
    #define SOMGD_pmc_parent_ODPart_AdjustMenus
    #undef parent_ODPart_AdjustMenus
  #else
    #define parent_ODPart_AdjustMenus HelloPart_parent_ODPart_AdjustMenus
  #endif
#endif
#define HelloPart_parents_AdjustMenus(somSelf,ev,frame) (\
   HelloPart_parent_ODPart_AdjustMenus(somSelf,ev,frame))

/*
 * Overridden method: ChangeKind
 */
SOM_Scope void  SOMLINK HelloChangeKind(HelloPart *somSelf, Environment *ev,
		ODType kind);
static char *somMN_HelloPartChangeKind = "ODPart::ChangeKind";
static somId somId_HelloPartChangeKind = &somMN_HelloPartChangeKind;
#ifdef somId_ChangeKind
#undef somId_ChangeKind
#else
#define somId_ChangeKind somId_HelloPartChangeKind
#endif
typedef void   SOMLINK somTP_xih_HelloPart_ChangeKind(HelloPart *somSelf, Environment *ev, 
		ODType kind);
typedef somTP_xih_HelloPart_ChangeKind *somTD_xih_HelloPart_ChangeKind;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_ChangeKind_resolved;
#define HelloPart_parent_ODPart_ChangeKind(somSelf,ev,kind) \
  ((( somTD_xih_HelloPart_ChangeKind ) \
      HelloPart_parent_ODPart_ChangeKind_resolved) \
	(somSelf,ev,kind))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_ChangeKind
  #ifdef parent_ChangeKind
    #define SOMGD_pmc_parent_ChangeKind
    #undef parent_ChangeKind
  #else
#define parent_ChangeKind HelloPart_parent_ODPart_ChangeKind
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_ChangeKind
  #ifdef parent_ODPart_ChangeKind
    #define SOMGD_pmc_parent_ODPart_ChangeKind
    #undef parent_ODPart_ChangeKind
  #else
    #define parent_ODPart_ChangeKind HelloPart_parent_ODPart_ChangeKind
  #endif
#endif
#define HelloPart_parents_ChangeKind(somSelf,ev,kind) (\
   HelloPart_parent_ODPart_ChangeKind(somSelf,ev,kind))

/*
 * Overridden method: ReleaseAll
 */
SOM_Scope void  SOMLINK HelloReleaseAll(HelloPart *somSelf, Environment *ev);
static char *somMN_HelloPartReleaseAll = "ODPersistentObject::ReleaseAll";
static somId somId_HelloPartReleaseAll = &somMN_HelloPartReleaseAll;
#ifdef somId_ReleaseAll
#undef somId_ReleaseAll
#else
#define somId_ReleaseAll somId_HelloPartReleaseAll
#endif
typedef void   SOMLINK somTP_xih_HelloPart_ReleaseAll(HelloPart *somSelf, Environment *ev);
typedef somTP_xih_HelloPart_ReleaseAll *somTD_xih_HelloPart_ReleaseAll;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_ReleaseAll_resolved;
#define HelloPart_parent_ODPart_ReleaseAll(somSelf,ev) \
  ((( somTD_xih_HelloPart_ReleaseAll ) \
      HelloPart_parent_ODPart_ReleaseAll_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_ReleaseAll
  #ifdef parent_ReleaseAll
    #define SOMGD_pmc_parent_ReleaseAll
    #undef parent_ReleaseAll
  #else
#define parent_ReleaseAll HelloPart_parent_ODPart_ReleaseAll
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_ReleaseAll
  #ifdef parent_ODPart_ReleaseAll
    #define SOMGD_pmc_parent_ODPart_ReleaseAll
    #undef parent_ODPart_ReleaseAll
  #else
    #define parent_ODPart_ReleaseAll HelloPart_parent_ODPart_ReleaseAll
  #endif
#endif
#define HelloPart_parents_ReleaseAll(somSelf,ev) (\
   HelloPart_parent_ODPart_ReleaseAll(somSelf,ev))

/*
 * Overridden method: LinkStatusChanged
 */
SOM_Scope void  SOMLINK HelloLinkStatusChanged(HelloPart *somSelf, Environment *ev,
		ODFrame* frame);
static char *somMN_HelloPartLinkStatusChanged = "ODPart::LinkStatusChanged";
static somId somId_HelloPartLinkStatusChanged = &somMN_HelloPartLinkStatusChanged;
#ifdef somId_LinkStatusChanged
#undef somId_LinkStatusChanged
#else
#define somId_LinkStatusChanged somId_HelloPartLinkStatusChanged
#endif
typedef void   SOMLINK somTP_xih_HelloPart_LinkStatusChanged(HelloPart *somSelf, Environment *ev, 
		ODFrame* frame);
typedef somTP_xih_HelloPart_LinkStatusChanged *somTD_xih_HelloPart_LinkStatusChanged;
/* define the parent method call macro */
static somMethodProc* HelloPart_parent_ODPart_LinkStatusChanged_resolved;
#define HelloPart_parent_ODPart_LinkStatusChanged(somSelf,ev,frame) \
  ((( somTD_xih_HelloPart_LinkStatusChanged ) \
      HelloPart_parent_ODPart_LinkStatusChanged_resolved) \
	(somSelf,ev,frame))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_LinkStatusChanged
  #ifdef parent_LinkStatusChanged
    #define SOMGD_pmc_parent_LinkStatusChanged
    #undef parent_LinkStatusChanged
  #else
#define parent_LinkStatusChanged HelloPart_parent_ODPart_LinkStatusChanged
  #endif
#endif
#ifndef SOMGD_pmc_parent_ODPart_LinkStatusChanged
  #ifdef parent_ODPart_LinkStatusChanged
    #define SOMGD_pmc_parent_ODPart_LinkStatusChanged
    #undef parent_ODPart_LinkStatusChanged
  #else
    #define parent_ODPart_LinkStatusChanged HelloPart_parent_ODPart_LinkStatusChanged
  #endif
#endif
#define HelloPart_parents_LinkStatusChanged(somSelf,ev,frame) (\
   HelloPart_parent_ODPart_LinkStatusChanged(somSelf,ev,frame))

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t HelloPartSM[] = {
    {    &HelloPartClassData.CommonInit,
         &somId_CommonInit,
         &somDI_HelloCommonInit,
         (somMethodProc *) HelloCommonInit,
         (somMethodProc *) somRD_HelloCommonInit,
         (somMethodProc *) somAP_HelloCommonInit    },
    {    &HelloPartClassData.ReadContent,
         &somId_ReadContent,
         &somDI_HelloReadContent,
         (somMethodProc *) HelloReadContent,
         (somMethodProc *) somRD_HelloReadContent,
         (somMethodProc *) somAP_HelloReadContent    },
    {    &HelloPartClassData.WriteContent,
         &somId_WriteContent,
         &somDI_HelloWriteContent,
         (somMethodProc *) HelloWriteContent,
         (somMethodProc *) somRD_HelloWriteContent,
         (somMethodProc *) somAP_HelloWriteContent    },
    {    &HelloPartClassData._get_data,
         &somId__get_data,
         &somDI_Hello_get_data,
         (somMethodProc *) Hello_get_data,
         (somMethodProc *) somRD_Hello_get_data,
         (somMethodProc *) somAP_Hello_get_data    },
    {    &HelloPartClassData._set_data,
         &somId__set_data,
         &somDI_Hello_set_data,
         (somMethodProc *) Hello_set_data,
         (somMethodProc *) somRD_Hello_set_data,
         (somMethodProc *) somAP_Hello_set_data    },
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t HelloPartOM[] = {
    {    &somId_HelloPartsomInit,
         (somMethodProc *) HellosomInit  },
    {    &somId_HelloPartsomUninit,
         (somMethodProc *) HellosomUninit  },
    {    &somId_HelloPartInitPart,
         (somMethodProc *) HelloInitPart  },
    {    &somId_HelloPartInitPartFromStorage,
         (somMethodProc *) HelloInitPartFromStorage  },
    {    &somId_HelloPartExternalize,
         (somMethodProc *) HelloExternalize  },
    {    &somId_HelloPartExternalizeKinds,
         (somMethodProc *) HelloExternalizeKinds  },
    {    &somId_HelloPartCloneInto,
         (somMethodProc *) HelloCloneInto  },
    {    &somId_HelloPartClonePartInfo,
         (somMethodProc *) HelloClonePartInfo  },
    {    &somId_HelloPartReadPartInfo,
         (somMethodProc *) HelloReadPartInfo  },
    {    &somId_HelloPartWritePartInfo,
         (somMethodProc *) HelloWritePartInfo  },
    {    &somId_HelloPartAttachSourceFrame,
         (somMethodProc *) HelloAttachSourceFrame  },
    {    &somId_HelloPartContainingPartPropertiesUpdated,
         (somMethodProc *) HelloContainingPartPropertiesUpdated  },
    {    &somId_HelloPartDisplayFrameAdded,
         (somMethodProc *) HelloDisplayFrameAdded  },
    {    &somId_HelloPartDisplayFrameClosed,
         (somMethodProc *) HelloDisplayFrameClosed  },
    {    &somId_HelloPartDisplayFrameConnected,
         (somMethodProc *) HelloDisplayFrameConnected  },
    {    &somId_HelloPartDisplayFrameRemoved,
         (somMethodProc *) HelloDisplayFrameRemoved  },
    {    &somId_HelloPartFacetAdded,
         (somMethodProc *) HelloFacetAdded  },
    {    &somId_HelloPartFacetRemoved,
         (somMethodProc *) HelloFacetRemoved  },
    {    &somId_HelloPartFrameShapeChanged,
         (somMethodProc *) HelloFrameShapeChanged  },
    {    &somId_HelloPartGeometryChanged,
         (somMethodProc *) HelloGeometryChanged  },
    {    &somId_HelloPartOpen,
         (somMethodProc *) HelloOpen  },
    {    &somId_HelloPartSequenceChanged,
         (somMethodProc *) HelloSequenceChanged  },
    {    &somId_HelloPartCanvasChanged,
         (somMethodProc *) HelloCanvasChanged  },
    {    &somId_HelloPartDraw,
         (somMethodProc *) HelloDraw  },
    {    &somId_HelloPartGetPrintResolution,
         (somMethodProc *) HelloGetPrintResolution  },
    {    &somId_HelloPartHighlightChanged,
         (somMethodProc *) HelloHighlightChanged  },
    {    &somId_HelloPartPresentationChanged,
         (somMethodProc *) HelloPresentationChanged  },
    {    &somId_HelloPartViewTypeChanged,
         (somMethodProc *) HelloViewTypeChanged  },
    {    &somId_HelloPartBeginRelinquishFocus,
         (somMethodProc *) HelloBeginRelinquishFocus  },
    {    &somId_HelloPartCommitRelinquishFocus,
         (somMethodProc *) HelloCommitRelinquishFocus  },
    {    &somId_HelloPartAbortRelinquishFocus,
         (somMethodProc *) HelloAbortRelinquishFocus  },
    {    &somId_HelloPartFocusAcquired,
         (somMethodProc *) HelloFocusAcquired  },
    {    &somId_HelloPartFocusLost,
         (somMethodProc *) HelloFocusLost  },
    {    &somId_HelloPartHandleEvent,
         (somMethodProc *) HelloHandleEvent  },
    {    &somId_HelloPartAdjustMenus,
         (somMethodProc *) HelloAdjustMenus  },
    {    &somId_HelloPartChangeKind,
         (somMethodProc *) HelloChangeKind  },
    {    &somId_HelloPartReleaseAll,
         (somMethodProc *) HelloReleaseAll  },
    {    &somId_HelloPartLinkStatusChanged,
         (somMethodProc *) HelloLinkStatusChanged  },
};


/*
 *  class Ids
 */
static char * somCN_HelloPart = "HelloPart";
static char * somEMC_HelloPart = "M_HelloPart";
static char * somPCN_HelloPart_ODPart = "ODPart";

static somId somPCHelloPart[] = {
    &somPCN_HelloPart_ODPart,
};

static somStaticClassInfo HelloPartSCI = {
    4, 5, 38, 0, 0, 0, /* layout version 4 */ 
    HelloPart_MajorVersion, HelloPart_MinorVersion,
    sizeof(HelloPartData), HelloPart_MaxNoMethods, 1,
    &somCN_HelloPart,
    &somEMC_HelloPart, 0,
    somPCHelloPart,
    (somClassDataStructure *) &HelloPartClassData,
    (somCClassDataStructure *) &HelloPartCClassData,
    HelloPartSM, HelloPartOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    0, /* default alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    5, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not DTS a class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

M_HelloPart * SOMLINK HelloPartNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    M_HelloPart *result;
    ODPartNewClass(ODPart_MajorVersion,ODPart_MinorVersion);	/* static reference */
    /* Explicit metaclass, so get it */ 
    M_HelloPartNewClass(M_HelloPart_MajorVersion,M_HelloPart_MinorVersion);	/* static reference */
    result = (M_HelloPart*) ((void*)(somBuildClass(1,&HelloPartSCI, somtmajorVersion, somtminorVersion)));
    HelloPart_parent_ODPart_LinkStatusChanged_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.LinkStatusChanged);
    HelloPart_parent_ODPart_ReleaseAll_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPersistentObjectClassData.ReleaseAll);
    HelloPart_parent_ODPart_ChangeKind_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.ChangeKind);
    HelloPart_parent_ODPart_AdjustMenus_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.AdjustMenus);
    HelloPart_parent_ODPart_HandleEvent_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.HandleEvent);
    HelloPart_parent_ODPart_FocusLost_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.FocusLost);
    HelloPart_parent_ODPart_FocusAcquired_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.FocusAcquired);
    HelloPart_parent_ODPart_AbortRelinquishFocus_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.AbortRelinquishFocus);
    HelloPart_parent_ODPart_CommitRelinquishFocus_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.CommitRelinquishFocus);
    HelloPart_parent_ODPart_BeginRelinquishFocus_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.BeginRelinquishFocus);
    HelloPart_parent_ODPart_ViewTypeChanged_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.ViewTypeChanged);
    HelloPart_parent_ODPart_PresentationChanged_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.PresentationChanged);
    HelloPart_parent_ODPart_HighlightChanged_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.HighlightChanged);
    HelloPart_parent_ODPart_GetPrintResolution_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.GetPrintResolution);
    HelloPart_parent_ODPart_Draw_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.Draw);
    HelloPart_parent_ODPart_CanvasChanged_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.CanvasChanged);
    HelloPart_parent_ODPart_SequenceChanged_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.SequenceChanged);
    HelloPart_parent_ODPart_Open_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.Open);
    HelloPart_parent_ODPart_GeometryChanged_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.GeometryChanged);
    HelloPart_parent_ODPart_FrameShapeChanged_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.FrameShapeChanged);
    HelloPart_parent_ODPart_FacetRemoved_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.FacetRemoved);
    HelloPart_parent_ODPart_FacetAdded_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.FacetAdded);
    HelloPart_parent_ODPart_DisplayFrameRemoved_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.DisplayFrameRemoved);
    HelloPart_parent_ODPart_DisplayFrameConnected_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.DisplayFrameConnected);
    HelloPart_parent_ODPart_DisplayFrameClosed_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.DisplayFrameClosed);
    HelloPart_parent_ODPart_DisplayFrameAdded_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.DisplayFrameAdded);
    HelloPart_parent_ODPart_ContainingPartPropertiesUpdated_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.ContainingPartPropertiesUpdated);
    HelloPart_parent_ODPart_AttachSourceFrame_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.AttachSourceFrame);
    HelloPart_parent_ODPart_WritePartInfo_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.WritePartInfo);
    HelloPart_parent_ODPart_ReadPartInfo_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.ReadPartInfo);
    HelloPart_parent_ODPart_ClonePartInfo_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.ClonePartInfo);
    HelloPart_parent_ODPart_CloneInto_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPersistentObjectClassData.CloneInto);
    HelloPart_parent_ODPart_ExternalizeKinds_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.ExternalizeKinds);
    HelloPart_parent_ODPart_Externalize_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPersistentObjectClassData.Externalize);
    HelloPart_parent_ODPart_InitPartFromStorage_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.InitPartFromStorage);
    HelloPart_parent_ODPart_InitPart_resolved = 
	somParentNumResolve(HelloPartCClassData.parentMtab, 1, ODPartClassData.InitPart);
    return result;
}

/*
 * Functions for attributes.
 */
SOM_Scope string  SOMLINK Hello_get_data(HelloPart *somSelf, Environment *ev){
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","Hello_get_data");
    SOM_IgnoreWarning(ev);

    return (somThis->data);
}
SOM_Scope void  SOMLINK Hello_set_data(HelloPart *somSelf, Environment *ev,
		string data){
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","Hello_set_data");
    SOM_IgnoreWarning(ev);

    somThis->data = data;
}

#endif /* Primary Implementation Support */

#endif       /* SOM_HelloPart_xih */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_M_HelloPart_xih
#define SOM_M_HelloPart_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_M_HelloPart_xh
#include <hello.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope extern "C"
#endif

#define M_HelloPart_MaxNoMethods 0

/*
 * -- Instance Data
 */
typedef void M_HelloPartData;

/*
 * This class introduces no instance data, so no GetData macro is provided
 */

/*
 * -- Primary Implementation File Support
 */
#if (defined(HelloPart_Class_Source) || defined(M_HelloPart_Class_Source) || defined(SOM_Module_hello_Source))

/*
 * Trace/Debug macro
 */
#ifndef M_HelloPartMethodDebug
   #define M_HelloPartMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _clsGetODPartHandlerName somSelf->clsGetODPartHandlerName
  #define _clsGetODPartHandlerDisplayName somSelf->clsGetODPartHandlerDisplayName
  #define _clsGetODPartKinds somSelf->clsGetODPartKinds
  #define _clsGetOLE2ClassId somSelf->clsGetOLE2ClassId
  #define _clsGetWindowsIconFileName somSelf->clsGetWindowsIconFileName
  #define __get_somDataAlignment somSelf->_get_somDataAlignment
  #define __get_somInstanceDataOffsets somSelf->_get_somInstanceDataOffsets
  #define __get_somDirectInitClasses somSelf->_get_somDirectInitClasses
  #define __set_somDirectInitClasses somSelf->_set_somDirectInitClasses
  #define _somNew somSelf->somNew
  #define _somNewNoInit somSelf->somNewNoInit
  #define _somRenew somSelf->somRenew
  #define _somRenewNoInit somSelf->somRenewNoInit
  #define _somRenewNoZero somSelf->somRenewNoZero
  #define _somRenewNoInitNoZero somSelf->somRenewNoInitNoZero
  #define _somAllocate somSelf->somAllocate
  #define _somDeallocate somSelf->somDeallocate
  #define __get_somClassAllocate somSelf->_get_somClassAllocate
  #define __get_somClassDeallocate somSelf->_get_somClassDeallocate
  #define _somGetInstanceInitMask somSelf->somGetInstanceInitMask
  #define _somGetInstanceDestructionMask somSelf->somGetInstanceDestructionMask
  #define _somGetInstanceAssignmentMask somSelf->somGetInstanceAssignmentMask
  #define _somInitClass somSelf->somInitClass
  #define _somInitMIClass somSelf->somInitMIClass
  #define _somAddStaticMethod somSelf->somAddStaticMethod
  #define _somAddDynamicMethod somSelf->somAddDynamicMethod
  #define _somOverrideSMethod somSelf->somOverrideSMethod
  #define _somClassReady somSelf->somClassReady
  #define _somGetApplyStub somSelf->somGetApplyStub
  #define _somGetClassData somSelf->somGetClassData
  #define _somSetClassData somSelf->somSetClassData
  #define _somGetClassMtab somSelf->somGetClassMtab
  #define _somGetInstanceOffset somSelf->somGetInstanceOffset
  #define _somGetInstancePartSize somSelf->somGetInstancePartSize
  #define _somGetInstanceSize somSelf->somGetInstanceSize
  #define _somGetInstanceToken somSelf->somGetInstanceToken
  #define _somGetMemberToken somSelf->somGetMemberToken
  #define _somGetMethodData somSelf->somGetMethodData
  #define _somGetRdStub somSelf->somGetRdStub
  #define _somGetMethodDescriptor somSelf->somGetMethodDescriptor
  #define _somGetMethodIndex somSelf->somGetMethodIndex
  #define _somGetMethodToken somSelf->somGetMethodToken
  #define _somGetName somSelf->somGetName
  #define _somGetNthMethodData somSelf->somGetNthMethodData
  #define _somGetNthMethodInfo somSelf->somGetNthMethodInfo
  #define _somGetNumMethods somSelf->somGetNumMethods
  #define _somGetNumStaticMethods somSelf->somGetNumStaticMethods
  #define _somGetParent somSelf->somGetParent
  #define _somGetParents somSelf->somGetParents
  #define _somGetPClsMtab somSelf->somGetPClsMtab
  #define _somGetPClsMtabs somSelf->somGetPClsMtabs
  #define _somGetVersionNumbers somSelf->somGetVersionNumbers
  #define _somSetMethodDescriptor somSelf->somSetMethodDescriptor
  #define _somFindMethod somSelf->somFindMethod
  #define _somFindMethodOk somSelf->somFindMethodOk
  #define _somFindSMethod somSelf->somFindSMethod
  #define _somFindSMethodOk somSelf->somFindSMethodOk
  #define _somLookupMethod somSelf->somLookupMethod
  #define _somCheckVersion somSelf->somCheckVersion
  #define _somDescendedFrom somSelf->somDescendedFrom
  #define _somSupportsMethod somSelf->somSupportsMethod
  #define _somDefinedMethod somSelf->somDefinedMethod
  #define _somOverrideMtab somSelf->somOverrideMtab
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define _clsGetODPartHandlerName somSelf->clsGetODPartHandlerName
  #define _clsGetODPartHandlerDisplayName somSelf->clsGetODPartHandlerDisplayName
  #define _clsGetODPartKinds somSelf->clsGetODPartKinds
  #define _clsGetOLE2ClassId somSelf->clsGetOLE2ClassId
  #define _clsGetWindowsIconFileName somSelf->clsGetWindowsIconFileName
#endif


/*
 * -- The M_HelloPart ClassData Structure
 */
SOMEXTERN struct M_HelloPartClassDataStructure SOMDLINK M_HelloPartClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary M_HelloPart ClassData structure
 */
SOMEXTERN struct M_HelloPartCClassDataStructure SOMDLINK M_HelloPartCClassData = {(somMethodTabs) NULL};


/*
 * Overridden method: clsGetODPartHandlerName
 */
SOM_Scope ISOString  SOMLINK M_HelloclsGetODPartHandlerName(M_HelloPart *somSelf, Environment *ev);
static char *somMN_M_HelloPartclsGetODPartHandlerName = "M_ODPart::clsGetODPartHandlerName";
static somId somId_M_HelloPartclsGetODPartHandlerName = &somMN_M_HelloPartclsGetODPartHandlerName;
#ifdef somId_clsGetODPartHandlerName
#undef somId_clsGetODPartHandlerName
#else
#define somId_clsGetODPartHandlerName somId_M_HelloPartclsGetODPartHandlerName
#endif
typedef ISOString   SOMLINK somTP_xih_M_HelloPart_clsGetODPartHandlerName(M_HelloPart *somSelf, Environment *ev);
typedef somTP_xih_M_HelloPart_clsGetODPartHandlerName *somTD_xih_M_HelloPart_clsGetODPartHandlerName;
/* define the parent method call macro */
static somMethodProc* M_HelloPart_parent_M_ODPart_clsGetODPartHandlerName_resolved;
#define M_HelloPart_parent_M_ODPart_clsGetODPartHandlerName(somSelf,ev) \
  ((( somTD_xih_M_HelloPart_clsGetODPartHandlerName ) \
      M_HelloPart_parent_M_ODPart_clsGetODPartHandlerName_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_clsGetODPartHandlerName
  #ifdef parent_clsGetODPartHandlerName
    #define SOMGD_pmc_parent_clsGetODPartHandlerName
    #undef parent_clsGetODPartHandlerName
  #else
#define parent_clsGetODPartHandlerName M_HelloPart_parent_M_ODPart_clsGetODPartHandlerName
  #endif
#endif
#ifndef SOMGD_pmc_parent_M_ODPart_clsGetODPartHandlerName
  #ifdef parent_M_ODPart_clsGetODPartHandlerName
    #define SOMGD_pmc_parent_M_ODPart_clsGetODPartHandlerName
    #undef parent_M_ODPart_clsGetODPartHandlerName
  #else
    #define parent_M_ODPart_clsGetODPartHandlerName M_HelloPart_parent_M_ODPart_clsGetODPartHandlerName
  #endif
#endif
#define M_HelloPart_parents_clsGetODPartHandlerName(somSelf,ev) (\
   M_HelloPart_parent_M_ODPart_clsGetODPartHandlerName(somSelf,ev))

/*
 * Overridden method: clsGetODPartHandlerDisplayName
 */
SOM_Scope string  SOMLINK M_HelloclsGetODPartHandlerDisplayName(M_HelloPart *somSelf, Environment *ev);
static char *somMN_M_HelloPartclsGetODPartHandlerDisplayName = "M_ODPart::clsGetODPartHandlerDisplayName";
static somId somId_M_HelloPartclsGetODPartHandlerDisplayName = &somMN_M_HelloPartclsGetODPartHandlerDisplayName;
#ifdef somId_clsGetODPartHandlerDisplayName
#undef somId_clsGetODPartHandlerDisplayName
#else
#define somId_clsGetODPartHandlerDisplayName somId_M_HelloPartclsGetODPartHandlerDisplayName
#endif
typedef string   SOMLINK somTP_xih_M_HelloPart_clsGetODPartHandlerDisplayName(M_HelloPart *somSelf, Environment *ev);
typedef somTP_xih_M_HelloPart_clsGetODPartHandlerDisplayName *somTD_xih_M_HelloPart_clsGetODPartHandlerDisplayName;
/* define the parent method call macro */
static somMethodProc* M_HelloPart_parent_M_ODPart_clsGetODPartHandlerDisplayName_resolved;
#define M_HelloPart_parent_M_ODPart_clsGetODPartHandlerDisplayName(somSelf,ev) \
  ((( somTD_xih_M_HelloPart_clsGetODPartHandlerDisplayName ) \
      M_HelloPart_parent_M_ODPart_clsGetODPartHandlerDisplayName_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_clsGetODPartHandlerDisplayName
  #ifdef parent_clsGetODPartHandlerDisplayName
    #define SOMGD_pmc_parent_clsGetODPartHandlerDisplayName
    #undef parent_clsGetODPartHandlerDisplayName
  #else
#define parent_clsGetODPartHandlerDisplayName M_HelloPart_parent_M_ODPart_clsGetODPartHandlerDisplayName
  #endif
#endif
#ifndef SOMGD_pmc_parent_M_ODPart_clsGetODPartHandlerDisplayName
  #ifdef parent_M_ODPart_clsGetODPartHandlerDisplayName
    #define SOMGD_pmc_parent_M_ODPart_clsGetODPartHandlerDisplayName
    #undef parent_M_ODPart_clsGetODPartHandlerDisplayName
  #else
    #define parent_M_ODPart_clsGetODPartHandlerDisplayName M_HelloPart_parent_M_ODPart_clsGetODPartHandlerDisplayName
  #endif
#endif
#define M_HelloPart_parents_clsGetODPartHandlerDisplayName(somSelf,ev) (\
   M_HelloPart_parent_M_ODPart_clsGetODPartHandlerDisplayName(somSelf,ev))

/*
 * Overridden method: clsGetODPartKinds
 */
SOM_Scope _IDL_SEQUENCE_PartKindInfo  SOMLINK M_HelloclsGetODPartKinds(M_HelloPart *somSelf, Environment *ev);
static char *somMN_M_HelloPartclsGetODPartKinds = "M_ODPart::clsGetODPartKinds";
static somId somId_M_HelloPartclsGetODPartKinds = &somMN_M_HelloPartclsGetODPartKinds;
#ifdef somId_clsGetODPartKinds
#undef somId_clsGetODPartKinds
#else
#define somId_clsGetODPartKinds somId_M_HelloPartclsGetODPartKinds
#endif
typedef _IDL_SEQUENCE_PartKindInfo   SOMLINK somTP_xih_M_HelloPart_clsGetODPartKinds(M_HelloPart *somSelf, Environment *ev);
typedef somTP_xih_M_HelloPart_clsGetODPartKinds *somTD_xih_M_HelloPart_clsGetODPartKinds;
/* define the parent method call macro */
static somMethodProc* M_HelloPart_parent_M_ODPart_clsGetODPartKinds_resolved;
#define M_HelloPart_parent_M_ODPart_clsGetODPartKinds(somSelf,ev) \
  ((( somTD_xih_M_HelloPart_clsGetODPartKinds ) \
      M_HelloPart_parent_M_ODPart_clsGetODPartKinds_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_clsGetODPartKinds
  #ifdef parent_clsGetODPartKinds
    #define SOMGD_pmc_parent_clsGetODPartKinds
    #undef parent_clsGetODPartKinds
  #else
#define parent_clsGetODPartKinds M_HelloPart_parent_M_ODPart_clsGetODPartKinds
  #endif
#endif
#ifndef SOMGD_pmc_parent_M_ODPart_clsGetODPartKinds
  #ifdef parent_M_ODPart_clsGetODPartKinds
    #define SOMGD_pmc_parent_M_ODPart_clsGetODPartKinds
    #undef parent_M_ODPart_clsGetODPartKinds
  #else
    #define parent_M_ODPart_clsGetODPartKinds M_HelloPart_parent_M_ODPart_clsGetODPartKinds
  #endif
#endif
#define M_HelloPart_parents_clsGetODPartKinds(somSelf,ev) (\
   M_HelloPart_parent_M_ODPart_clsGetODPartKinds(somSelf,ev))

/*
 * Overridden method: clsGetOLE2ClassId
 */
SOM_Scope string  SOMLINK M_HelloclsGetOLE2ClassId(M_HelloPart *somSelf, Environment *ev);
static char *somMN_M_HelloPartclsGetOLE2ClassId = "M_ODPart::clsGetOLE2ClassId";
static somId somId_M_HelloPartclsGetOLE2ClassId = &somMN_M_HelloPartclsGetOLE2ClassId;
#ifdef somId_clsGetOLE2ClassId
#undef somId_clsGetOLE2ClassId
#else
#define somId_clsGetOLE2ClassId somId_M_HelloPartclsGetOLE2ClassId
#endif
typedef string   SOMLINK somTP_xih_M_HelloPart_clsGetOLE2ClassId(M_HelloPart *somSelf, Environment *ev);
typedef somTP_xih_M_HelloPart_clsGetOLE2ClassId *somTD_xih_M_HelloPart_clsGetOLE2ClassId;
/* define the parent method call macro */
static somMethodProc* M_HelloPart_parent_M_ODPart_clsGetOLE2ClassId_resolved;
#define M_HelloPart_parent_M_ODPart_clsGetOLE2ClassId(somSelf,ev) \
  ((( somTD_xih_M_HelloPart_clsGetOLE2ClassId ) \
      M_HelloPart_parent_M_ODPart_clsGetOLE2ClassId_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_clsGetOLE2ClassId
  #ifdef parent_clsGetOLE2ClassId
    #define SOMGD_pmc_parent_clsGetOLE2ClassId
    #undef parent_clsGetOLE2ClassId
  #else
#define parent_clsGetOLE2ClassId M_HelloPart_parent_M_ODPart_clsGetOLE2ClassId
  #endif
#endif
#ifndef SOMGD_pmc_parent_M_ODPart_clsGetOLE2ClassId
  #ifdef parent_M_ODPart_clsGetOLE2ClassId
    #define SOMGD_pmc_parent_M_ODPart_clsGetOLE2ClassId
    #undef parent_M_ODPart_clsGetOLE2ClassId
  #else
    #define parent_M_ODPart_clsGetOLE2ClassId M_HelloPart_parent_M_ODPart_clsGetOLE2ClassId
  #endif
#endif
#define M_HelloPart_parents_clsGetOLE2ClassId(somSelf,ev) (\
   M_HelloPart_parent_M_ODPart_clsGetOLE2ClassId(somSelf,ev))

/*
 * Overridden method: clsGetWindowsIconFileName
 */
SOM_Scope string  SOMLINK M_HelloclsGetWindowsIconFileName(M_HelloPart *somSelf, Environment *ev);
static char *somMN_M_HelloPartclsGetWindowsIconFileName = "M_ODPart::clsGetWindowsIconFileName";
static somId somId_M_HelloPartclsGetWindowsIconFileName = &somMN_M_HelloPartclsGetWindowsIconFileName;
#ifdef somId_clsGetWindowsIconFileName
#undef somId_clsGetWindowsIconFileName
#else
#define somId_clsGetWindowsIconFileName somId_M_HelloPartclsGetWindowsIconFileName
#endif
typedef string   SOMLINK somTP_xih_M_HelloPart_clsGetWindowsIconFileName(M_HelloPart *somSelf, Environment *ev);
typedef somTP_xih_M_HelloPart_clsGetWindowsIconFileName *somTD_xih_M_HelloPart_clsGetWindowsIconFileName;
/* define the parent method call macro */
static somMethodProc* M_HelloPart_parent_M_ODPart_clsGetWindowsIconFileName_resolved;
#define M_HelloPart_parent_M_ODPart_clsGetWindowsIconFileName(somSelf,ev) \
  ((( somTD_xih_M_HelloPart_clsGetWindowsIconFileName ) \
      M_HelloPart_parent_M_ODPart_clsGetWindowsIconFileName_resolved) \
	(somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_clsGetWindowsIconFileName
  #ifdef parent_clsGetWindowsIconFileName
    #define SOMGD_pmc_parent_clsGetWindowsIconFileName
    #undef parent_clsGetWindowsIconFileName
  #else
#define parent_clsGetWindowsIconFileName M_HelloPart_parent_M_ODPart_clsGetWindowsIconFileName
  #endif
#endif
#ifndef SOMGD_pmc_parent_M_ODPart_clsGetWindowsIconFileName
  #ifdef parent_M_ODPart_clsGetWindowsIconFileName
    #define SOMGD_pmc_parent_M_ODPart_clsGetWindowsIconFileName
    #undef parent_M_ODPart_clsGetWindowsIconFileName
  #else
    #define parent_M_ODPart_clsGetWindowsIconFileName M_HelloPart_parent_M_ODPart_clsGetWindowsIconFileName
  #endif
#endif
#define M_HelloPart_parents_clsGetWindowsIconFileName(somSelf,ev) (\
   M_HelloPart_parent_M_ODPart_clsGetWindowsIconFileName(somSelf,ev))

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t M_HelloPartOM[] = {
    {    &somId_M_HelloPartclsGetODPartHandlerName,
         (somMethodProc *) M_HelloclsGetODPartHandlerName  },
    {    &somId_M_HelloPartclsGetODPartHandlerDisplayName,
         (somMethodProc *) M_HelloclsGetODPartHandlerDisplayName  },
    {    &somId_M_HelloPartclsGetODPartKinds,
         (somMethodProc *) M_HelloclsGetODPartKinds  },
    {    &somId_M_HelloPartclsGetOLE2ClassId,
         (somMethodProc *) M_HelloclsGetOLE2ClassId  },
    {    &somId_M_HelloPartclsGetWindowsIconFileName,
         (somMethodProc *) M_HelloclsGetWindowsIconFileName  },
};


/*
 *  class Ids
 */
static char * somCN_M_HelloPart = "M_HelloPart";
static char * somPCN_M_HelloPart_M_ODPart = "M_ODPart";

static somId somPCM_HelloPart[] = {
    &somPCN_M_HelloPart_M_ODPart,
};

static somStaticClassInfo M_HelloPartSCI = {
    4, 0, 5, 0, 0, 0, /* layout version 4 */ 
    M_HelloPart_MajorVersion, M_HelloPart_MinorVersion,
    0, M_HelloPart_MaxNoMethods, 1,
    &somCN_M_HelloPart,
    (somId) NULL, 1,
    somPCM_HelloPart,
    (somClassDataStructure *) &M_HelloPartClassData,
    (somCClassDataStructure *) &M_HelloPartCClassData,
    (somStaticMethod_t *) NULL, M_HelloPartOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    0, /* default alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    0, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not DTS a class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK M_HelloPartNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClass *result;
    M_ODPartNewClass(M_ODPart_MajorVersion,M_ODPart_MinorVersion);	/* static reference */
    result = (SOMClass*) ((void*)(somBuildClass(1,&M_HelloPartSCI, somtmajorVersion, somtminorVersion)));
    M_HelloPart_parent_M_ODPart_clsGetWindowsIconFileName_resolved = 
	somParentNumResolve(M_HelloPartCClassData.parentMtab, 1, M_ODPartClassData.clsGetWindowsIconFileName);
    M_HelloPart_parent_M_ODPart_clsGetOLE2ClassId_resolved = 
	somParentNumResolve(M_HelloPartCClassData.parentMtab, 1, M_ODPartClassData.clsGetOLE2ClassId);
    M_HelloPart_parent_M_ODPart_clsGetODPartKinds_resolved = 
	somParentNumResolve(M_HelloPartCClassData.parentMtab, 1, M_ODPartClassData.clsGetODPartKinds);
    M_HelloPart_parent_M_ODPart_clsGetODPartHandlerDisplayName_resolved = 
	somParentNumResolve(M_HelloPartCClassData.parentMtab, 1, M_ODPartClassData.clsGetODPartHandlerDisplayName);
    M_HelloPart_parent_M_ODPart_clsGetODPartHandlerName_resolved = 
	somParentNumResolve(M_HelloPartCClassData.parentMtab, 1, M_ODPartClassData.clsGetODPartHandlerName);
    return result;
}

/*
 * Functions for attributes.
 */

#endif /* Primary Implementation Support */

#endif       /* SOM_M_HelloPart_xih */
