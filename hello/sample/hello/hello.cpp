
/*
 *  This file was generated by the SOM Compiler.
 *  Generated using:
 *     SOM incremental update: 2.43
 */


#ifndef SOM_Module_hello_Source
#define SOM_Module_hello_Source
#endif
#define HelloPart_Class_Source
#define M_HelloPart_Class_Source

#include "hello.xih"

SOM_Scope void  SOMLINK HelloCommonInit(HelloPart *somSelf,  Environment *ev, ODPart * partWrapper)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloCommonInit");

    if (_fSession == 0);
    {
       _fSession = _GetStorageUnit(ev)->GetSession(ev);
       _fArb     = _fSession->GetArbitrator(ev);
       _fSelf    = partWrapper;

       _fDisplayFrames = new ODxOrderedCollection;

       _fFocusSet = _fArb->CreateFocusSet(ev);
          _fFocusSet->Add(ev, _fSession->Tokenize(ev, kODSelectionFocus));
          _fFocusSet->Add(ev, _fSession->Tokenize(ev, kODMenuFocus));
          _fFocusSet->Add(ev, _fSession->Tokenize(ev, kODKeyFocus));

       _fMenuBar = _fSession->GetWindowState(ev)->CopyBaseMenuBar(ev);
       _fPopup   = _fSession->GetWindowState(ev)->CopyBasePopup(ev);

       if (_fMenuBar) {
          ODPlatformMenuItem mi;
          memset((PCH)&mi, 0, sizeof(MENUITEM));
          mi.afStyle = MIS_TEXT;
          mi.id = IDS_OPENWINDOW;
          _fMenuBar->AddMenuItemLast(ev, IDMS_VIEW, VIEW_OPENAS, &mi);
          _fMenuBar->SetMenuItemText(ev, VIEW_OPENAS, mi.id, "Window");
       }

       if (_fPopup) {
          _fPopup->RemoveMenuItem(ev, VIEW_SHOWAS, VIEW_SALARGEICON);
          _fPopup->RemoveMenuItem(ev, VIEW_SHOWAS, VIEW_SASMALLICON);
          _fPopup->RemoveMenuItem(ev, VIEW_SHOWAS, VIEW_SATHUMBNAIL);
       }

//       Dump(_fSession);
       Dump(_GetStorageUnit(ev)->GetDraft(ev));
       Dump(_GetStorageUnit(ev)->GetDraft(ev)->GetDocument(ev));
       Dump(_GetStorageUnit(ev)->GetDraft(ev)->GetDocument(ev)->GetContainer(ev));
    }
}

SOM_Scope void  SOMLINK HelloReadContent(HelloPart *somSelf,
                                          Environment *ev)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloReadContent");

    ODStorageUnit * su = _GetStorageUnit(ev);
    char * suData;

    if (su->Exists(ev, kODPropContents, kODIntlText, 0) == kODTrue) {
       su->Focus(ev, kODPropContents, kODPosUndefined, kODIntlText, 0, kODPosUndefined);
       if (su->GetSize(ev) > 0) {
          suData = (char *) SOMMalloc(su->GetSize(ev) + 1);
          StorageUnitGetValue(su, ev, su->GetSize(ev) + 1, suData); }
       else {
          suData = (char *) SOMMalloc(11);
          strcpy(suData, "Dummy Data"); } }
    else {
       suData = (char *) SOMMalloc(11);
       strcpy(suData, "Dummy Data"); }

    __set_data(ev, suData);
}

SOM_Scope void  SOMLINK HelloWriteContent(HelloPart *somSelf,
                                           Environment *ev, ODStorageUnit* su)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloWriteContent");

    // Create our content property.
    if (su->Exists(ev, kODPropContents, kODNULL, 0) == kODTrue)
       su->Focus(ev, kODPropContents, kODPosUndefined, kODTypeAll, 0, kODPosUndefined);
    else su->AddProperty(ev, kODPropContents);

    if (su->Exists(ev, kODPropContents, kODIntlText, 0) == kODTrue)
       su->Focus(ev, kODPropContents, kODPosUndefined, kODIntlText, 0, kODPosUndefined);
    else su->AddValue(ev, kODIntlText);

    char * data = "Hello World";
    StorageUnitSetValue(su, ev, strlen(data) + 1 , data);
}

SOM_Scope void  SOMLINK HellosomInit(HelloPart *somSelf)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HellosomInit");

    HelloPart_parent_ODPart_somInit(somSelf);

    _fSession           = kODNULL;
    _fArb               = kODNULL;
    _fSelf              = kODNULL;
    _fFocusSet          = kODNULL;
    _fMenuBar           = kODNULL;
    _fPopup             = kODNULL;
    _fDisplayFrames     = kODNULL;
}

SOM_Scope void  SOMLINK HellosomUninit(HelloPart *somSelf)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HellosomUninit");

    delete _fMenuBar;
    delete _fPopup;

    if (_fDisplayFrames)
       delete _fDisplayFrames;

    HelloPart_parent_ODPart_somUninit(somSelf);
}

// OpenDoc supports persistence by allowing parts to externalize their data
// contents.  When a part is created, the OpenDoc invokes the parts InitPart
// method.  The part is responsible for initializing it's data content based
// on no pre-existing content.  When the document is closed, any open part is
// given the chance to externalize it's content by having it's Externalize
// method invoked.  When the document is later reopened, InitPart will not be
// invoked, but instead InitPartFromStorage will, and the part will reinitialize
// based on the content that it wrote in Externalize.

// OpenDoc predefines many properties and types, and programmers are strongly encouraged
// to use these definitions.  The programmer should assume that the storage content
// may be interpreted by another preferred editor, and that a scripting language
// provided by another vendor may want to automate this parts behavior.

SOM_Scope void  SOMLINK HelloInitPart(HelloPart *somSelf, Environment *ev,
                                      ODStorageUnit* storageUnit, ODPart* partWrapper)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloInitPart");

    // The parent's InitPart method must be called to initialize the parent.
    HelloPart_parent_ODPart_InitPart(somSelf, ev, storageUnit, partWrapper);

    _CommonInit(ev, partWrapper);

    _WriteContent(ev, storageUnit);
}

SOM_Scope void  SOMLINK HelloInitPartFromStorage(HelloPart *somSelf, Environment *ev,
                                                 ODStorageUnit* storageUnit,
                                                 ODPart* partWrapper)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloInitPartFromStorage");

    //  The parent's InitPartFromStorage method must be called to initialize the parent.
    HelloPart_parent_ODPart_InitPartFromStorage(somSelf, ev, storageUnit, partWrapper);

    _CommonInit(ev, partWrapper);

    _ReadContent(ev);

    // Look at what is in the passed storage unit
    Dump(storageUnit);
}

SOM_Scope void  SOMLINK HelloExternalize(HelloPart *somSelf, Environment *ev)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloExternalize");
}

SOM_Scope void  SOMLINK HelloAttachSourceFrame(HelloPart *somSelf,
                                                Environment *ev,
                                               ODFrame* frame,
                                               ODFrame* sourceFrame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloAttachSourceFrame");
}

SOM_Scope void  SOMLINK HelloContainingPartPropertiesUpdated(HelloPart *somSelf,
                                                              Environment *ev,
                                                             ODFrame* frame,
                                                             ODStorageUnit* propertyUnit)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloContainingPartPropertiesUpdated");

    // (1) Adopt any properties in propertyUnit as possible
    // (2) Propagate changes to embedded parts
}

SOM_Scope void  SOMLINK HelloDisplayFrameAdded(HelloPart *somSelf, Environment *ev,
                                               ODFrame* frame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloDisplayFrameAdded");

    // (1) Add frame to list of display frames
    frame->Acquire(ev);
    _fDisplayFrames->AddLast(frame);
    // (2) Set View Type
    frame->SetViewType(ev, _fSession->Tokenize(ev, kODViewAsFrame));
    // (3) Assign the content extent
    ODPoint offset = {0};
    frame->ChangeContentExtent(ev, &offset);
    // (4) assign a used shape (optional)
    // (5) Set the part info
    new FrameInfoRec(ev, frame);
    // (6) root - optional
    // (7) droppable (optional)

    Dump(frame);
}

SOM_Scope void  SOMLINK HelloDisplayFrameClosed(HelloPart *somSelf,
                                                 Environment *ev,
                                                ODFrame* frame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloDisplayFrameClosed");

    // (1) Delete frame from display frame collection
    _fDisplayFrames->Remove(frame);
    frame->Release(ev);
    // (2) Relinquish all foci
    _fSession->GetArbitrator(ev)->RelinquishFocusSet(ev, _fFocusSet, frame);
    // (3) Unregister frame from idle time
    // (4) Call Close method of embedded frames
}

SOM_Scope void  SOMLINK HelloDisplayFrameConnected(HelloPart *somSelf,
                                                    Environment *ev,
                                                   ODFrame* frame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloDisplayFrameConnected");

    // (1) Add frame to list of display frames
    frame->Acquire(ev);
    _fDisplayFrames->AddLast(frame);
    // (2) Assign the content extent
    ODPoint offset = {0};
    frame->ChangeContentExtent(ev, &offset);
    // (3) droppable (optional)

    Dump(frame);
}

SOM_Scope void  SOMLINK HelloDisplayFrameRemoved(HelloPart *somSelf, Environment *ev,
                                                 ODFrame* frame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloDisplayFrameRemoved");

    // (1) Relinquish all focii
    _fSession->GetArbitrator(ev)->RelinquishFocusSet(ev, _fFocusSet, frame);
    // (2) Delete the part info
    if (frame  != kODNULL)
       delete ((FrameInfoRec *) frame->GetPartInfo(ev));
    // (3) Unregister part from idle time (optional)
    // (4) Delete frame from display frame collection
    _fDisplayFrames->Remove(frame);
    frame->Release(ev);
    // (5) Remove frames embedded in removed frame
}

SOM_Scope void  SOMLINK HelloFacetAdded(HelloPart *somSelf,  Environment *ev,
                                        ODFacet* facet)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloFacetAdded");

    // (1) Examine facets canvas to determine if drawing possible
    // (2) Store any necessary facet part info
    // (3) Assign active shape (optional)
    // (4) Create facets for all embedded frames

    Dump(facet->GetFrame(ev));
}

SOM_Scope void  SOMLINK HelloFacetRemoved(HelloPart *somSelf,
                                           Environment *ev, ODFacet* facet)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloFacetRemoved");

    // (1) Remove facets for embedded frames that were visible
    // (2) Delete facet part info
}

SOM_Scope void  SOMLINK HelloExternalizeKinds(HelloPart *somSelf,
                                               Environment *ev,
                                              ODTypeList* kindset)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloExternalizeKinds");

    _Externalize(ev);
}

SOM_Scope void  SOMLINK HelloCloneInto(HelloPart *somSelf,  Environment *ev,
                                       ODDraftKey key, ODStorageUnit* toSU,
                                       ODFrame* scope)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloCloneInto");

    // We must first verify that we've never written to this storage unit.
    // If we have, we should do nothing, otherwise we need to write out
    // the current state of the part content.
    if ( toSU->Exists(ev, kODPropContents, kODIntlText, 0) == kODFalse )
    {
       _WriteContent(ev, toSU);
    }
}

SOM_Scope void  SOMLINK HelloClonePartInfo(HelloPart *somSelf,
                                            Environment *ev,
                                           ODDraftKey key, ODInfoType partInfo,
                                           ODStorageUnitView* storageUnitView,
                                           ODFrame* scope)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloClonePartInfo");
}

SOM_Scope ODInfoType  SOMLINK HelloReadPartInfo(HelloPart *somSelf,  Environment *ev,
                                                ODFrame* frame, ODStorageUnitView* storageUnitView)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloReadPartInfo");

    return (ODInfoType) new FrameInfoRec(ev, frame, storageUnitView);
}

SOM_Scope void  SOMLINK HelloWritePartInfo(HelloPart *somSelf,  Environment *ev,
                                           ODInfoType partInfo, ODStorageUnitView* storageUnitView)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloWritePartInfo");

    ((FrameInfoRec *) partInfo)->Externalize(storageUnitView);
}

SOM_Scope ODID  SOMLINK HelloOpen(HelloPart *somSelf,  Environment *ev,
                                  ODFrame* frame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloOpen");

    return (ODID) 0;
}

SOM_Scope void  SOMLINK HelloSequenceChanged(HelloPart *somSelf,
                                              Environment *ev,
                                             ODFrame* frame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloSequenceChanged");
}

SOM_Scope void  SOMLINK HelloCanvasChanged(HelloPart *somSelf,
                                            Environment *ev,
                                           ODFacet* facet)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloCanvasChanged");
}

SOM_Scope void  SOMLINK HelloDraw(HelloPart *somSelf,  Environment *ev,
                                  ODFacet* facet, ODShape* invalidShape)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloDraw");

    HPS hpsDraw;
    ODRect rect;

    facet->GetFrame(ev)->AcquireFrameShape(ev, kODNULL)->GetBoundingBox(ev, &rect);
    ODRECTL frameRect(rect);

    CFocus f(ev, facet, invalidShape, &hpsDraw);

    GpiSetColor(hpsDraw, CLR_RED);
    POINTL ptl = {frameRect.xRight, frameRect.yTop};
    GpiBox(hpsDraw, DRO_FILL, &ptl, 0, 0);

    GpiSetColor(hpsDraw, CLR_BLACK);
    POINTL ptlString = {frameRect.xLeft + 20, frameRect.yBottom + (frameRect.yTop / 2)};
    GpiCharStringAt(hpsDraw, &ptlString, 11, __get_data(ev));
}

SOM_Scope void  SOMLINK HelloFrameShapeChanged(HelloPart *somSelf,
                                                Environment *ev,
                                               ODFrame* frame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloFrameShapeChanged");
}

SOM_Scope void  SOMLINK HelloGeometryChanged(HelloPart *somSelf,
                                              Environment *ev,
                                             ODFacet* facet,
                                             ODBoolean clipShapeChanged,
                                             ODBoolean externalTransformChanged)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloGeometryChanged");


    if (clipShapeChanged)
       // Specifying kODNULL means to invalidate the clipShape (which was
       // calculated from the usedShape).
       facet->Invalidate(ev, kODNULL, kODNULL);
}

SOM_Scope ODULong  SOMLINK HelloGetPrintResolution(HelloPart *somSelf,
                                                    Environment *ev,
                                                   ODFrame* frame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloGetPrintResolution");

    return (ODULong) 0;
}

SOM_Scope void  SOMLINK HelloHighlightChanged(HelloPart *somSelf,
                                               Environment *ev,
                                              ODFacet* facet)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloHighlightChanged");
}

SOM_Scope void  SOMLINK HelloPresentationChanged(HelloPart *somSelf,
                                                  Environment *ev,
                                                 ODFrame* frame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloPresentationChanged");
}

SOM_Scope void  SOMLINK HelloViewTypeChanged(HelloPart *somSelf,
                                              Environment *ev,
                                             ODFrame* frame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloViewTypeChanged");
}

SOM_Scope ODBoolean  SOMLINK HelloBeginRelinquishFocus(HelloPart *somSelf,
                                                        Environment *ev,
                                                       ODTypeToken focus,
                                                       ODFrame* ownerFrame,
                                                       ODFrame* proposedFrame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloBeginRelinquishFocus");

    return kODTrue;
}

SOM_Scope void  SOMLINK HelloCommitRelinquishFocus(HelloPart *somSelf,
                                                    Environment *ev,
                                                   ODTypeToken focus,
                                                   ODFrame* ownerFrame,
                                                   ODFrame* proposedFrame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloCommitRelinquishFocus");
}

SOM_Scope void  SOMLINK HelloAbortRelinquishFocus(HelloPart *somSelf,
                                                   Environment *ev,
                                                  ODTypeToken focus,
                                                  ODFrame* ownerFrame,
                                                  ODFrame* proposedFrame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloAbortRelinquishFocus");
}

SOM_Scope void  SOMLINK HelloFocusAcquired(HelloPart *somSelf,
                                            Environment *ev,
                                           ODTypeToken focus,
                                           ODFrame* ownerFrame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloFocusAcquired");
}

SOM_Scope void  SOMLINK HelloFocusLost(HelloPart *somSelf,  Environment *ev,
                                       ODTypeToken focus, ODFrame* ownerFrame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloFocusLost");
}

SOM_Scope ODBoolean  SOMLINK HelloHandleEvent(HelloPart *somSelf, Environment *ev,
                                              ODEventData* event, ODFrame* frame,
                                              ODFacet* facet, ODEventInfo* eventInfo)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloHandleEvent");

    Dump(event);

    ODBoolean handled = kODFalse;

    switch (event->msg)
    {
       case WM_BUTTON1CLICK:
       {
          if ((_fArb->AcquireFocusOwner(ev, _fSession->Tokenize(ev, kODSelectionFocus))) != frame) {
             if (_fArb->RequestFocusSet(ev, _fFocusSet,frame) == kODTrue)
                _fMenuBar->Display(ev);
          }
          handled = kODTrue;
          break;
       }
       case WM_CONTEXTMENU:
       {
          _fPopup->Display(ev);
          handled = kODTrue;
          break;
       }
       case WM_ACTIVATE:
       {
          if ((SHORT1FROMMP(event->mp1) == TRUE))
             DebugLog("Activating, window IsActive = %d", (long) facet->GetWindow(ev)->IsActive(ev));
          else
             DebugLog("Deactivating, window IsActive = %d", (long) facet->GetWindow(ev)->IsActive(ev));
          handled = kODTrue;
          break;
       }
       case WM_COMMAND:
       {
          if (SHORT1FROMMP(event->mp2) & CMDSRC_MENU ||
              SHORT1FROMMP(event->mp2) & CMDSRC_ACCELERATOR) {

             ODCommandID command = LONGFROMMP(event->mp1);

             switch (command)
             {
                case EDIT_SELPROPERTIES:
                case VIEW_PROPERTIES:
                {
                   ODFrameFacetIterator* facets = frame->CreateFacetIterator(ev);
                   _fSession->GetInfo(ev)->ShowPartFrameInfo(ev,facets->First(ev), kODFalse);
                   delete facets;
                   handled = kODTrue;
                   break;
                }
                case EDIT_SEL_SAFRAME:
                case VIEW_SAFRAME:
                {
                   frame->SetViewType(ev, _fSession->Tokenize(ev, kODViewAsFrame));
                   handled = kODTrue;
                   break;
                }
                case EDIT_SEL_SALARGEICON:
                case VIEW_SALARGEICON:
                {
                   frame->SetViewType(ev, _fSession->Tokenize(ev, kODViewAsLargeIcon));
                   handled = kODTrue;
                   break;
                }
                case EDIT_SEL_SASMALLICON:
                case VIEW_SASMALLICON:
                {
                   frame->SetViewType(ev, _fSession->Tokenize(ev, kODViewAsSmallIcon));
                   handled = kODTrue;
                   break;
                }
                case EDIT_SEL_SATHUMBNAIL:
                case VIEW_SATHUMBNAIL:
                {
                   frame->SetViewType(ev, _fSession->Tokenize(ev, kODViewAsThumbnail));
                   handled = kODTrue;
                   break;
                }
                default:
                   break;
             }
          break;
          }
       }
       default:
          handled = kODFalse;
    }
    return handled;
}

SOM_Scope void  SOMLINK HelloAdjustMenus(HelloPart *somSelf, Environment *ev,
                                         ODFrame* frame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloAdjustMenus");

    if (_fMenuBar) {
       _fMenuBar->EnableMenuItem(ev, IDMS_VIEW, VIEW_OAICON, kODFalse);
       _fMenuBar->EnableMenuItem(ev, IDMS_VIEW, VIEW_OATREE, kODFalse);
       _fMenuBar->EnableMenuItem(ev, IDMS_VIEW, VIEW_OADETAILS, kODFalse);
       _fMenuBar->EnableMenuItem(ev, IDMS_VIEW, EDIT_SEL_SALARGEICON, kODFalse);
       _fMenuBar->EnableMenuItem(ev, IDMS_VIEW, EDIT_SEL_SASMALLICON, kODFalse);
       _fMenuBar->EnableMenuItem(ev, IDMS_VIEW, EDIT_SEL_SATHUMBNAIL, kODFalse);
    }
}

SOM_Scope void  SOMLINK HelloChangeKind(HelloPart *somSelf,  Environment *ev,
                                        ODType kind)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloChangeKind");
}

SOM_Scope void  SOMLINK HelloReleaseAll(HelloPart *somSelf,  Environment *ev)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloReleaseAll");

    // (1) Release all reference counted objects
    // (2) Remove link specifications from clipboard
    // (3) Fulfill promises on clipboard
    // (4) relinquish all foci
    // (5) clear undo stack
    // (6) call BaseRemoved of extensions
    // (7) call PartRemoved of embedded frames
}

SOM_Scope void  SOMLINK HelloLinkStatusChanged(HelloPart *somSelf,
                                                Environment *ev,
                                               ODFrame* frame)
{
    HelloPartData *somThis = HelloPartGetData(somSelf);
    HelloPartMethodDebug("HelloPart","HelloLinkStatusChanged");
}


SOM_Scope ISOString  SOMLINK M_HelloclsGetODPartHandlerName(M_HelloPart *somSelf, Environment *ev)
{
    M_HelloPartMethodDebug("M_HelloPart","M_HelloclsGetODPartHandlerName");

    return (ISOString) "Hello";
}
SOM_Scope string  SOMLINK M_HelloclsGetODPartHandlerDisplayName(M_HelloPart *somSelf, Environment *ev)
{
    M_HelloPartMethodDebug("M_HelloPart","M_HelloclsGetODPartHandlerDisplayName");

    return (string) "Hello World!";
}
SOM_Scope _IDL_SEQUENCE_PartKindInfo  SOMLINK M_HelloclsGetODPartKinds(M_HelloPart *somSelf, Environment *ev)
{
    M_HelloPartMethodDebug("M_HelloPart","M_HelloclsGetODPartKinds");

    const char *  kHelloPartKindDisplayName("Intl Text");
    const char *  kHelloPartCategory("HelloCategory");

    _IDL_SEQUENCE_PartKindInfo HelloPartInfo;

    // Create structure PartKindInfo and allocate memory for variable
    PartKindInfo * info = (PartKindInfo *) SOMMalloc(sizeof(PartKindInfo));

    info->partKindName = (ISOString) SOMMalloc(strlen(kODIntlText)+1);
    strcpy(info->partKindName, kODIntlText);
    info->partKindDisplayName = (string)SOMMalloc(strlen(kHelloPartKindDisplayName)+1);
    strcpy(info->partKindDisplayName, kHelloPartKindDisplayName);
    info->filenameFilters = (string)SOMMalloc(strlen("")+1);
    strcpy(info->filenameFilters, "");
    info->filenameTypes = (string)SOMMalloc(strlen("")+1);
    strcpy(info->filenameTypes, "");
    info->categories = (string) SOMMalloc(2*strlen(kHelloPartCategory)+2);
    strcpy(info->categories, kHelloPartCategory);
    strcat(info->categories, ",");
    strcat(info->categories, kHelloPartCategory);
    info->objectID = (string)SOMMalloc(strlen("")+1);
    strcpy(info->objectID, "");

    // copy the information into the structure
    HelloPartInfo._maximum = 1;
    HelloPartInfo._length = 1;
    HelloPartInfo._buffer = info;

    return HelloPartInfo;
}
SOM_Scope string  SOMLINK M_HelloclsGetOLE2ClassId(M_HelloPart *somSelf, Environment *ev)
{
    M_HelloPartMethodDebug("M_HelloPart","M_HelloclsGetOLE2ClassId");

    return (string) "";
}
SOM_Scope string  SOMLINK M_HelloclsGetWindowsIconFileName(M_HelloPart *somSelf, Environment *ev)
{
    M_HelloPartMethodDebug("M_HelloPart","M_HelloclsGetWindowsIconFileName");

    return (string) "";
}
