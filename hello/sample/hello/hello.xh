
/*
 * This file was generated by the SOM Compiler.
 * FileName: hello.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

#ifndef SOM_HelloPart_xh
#define SOM_HelloPart_xh

class HelloPart;

#define HelloPart_MajorVersion 0
#define HelloPart_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */
#define METHOD_MACROS
#define VARIABLE_MACROS

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_ODPart_xh
#include <part.xh>
#endif

#ifndef HelloPart_API
#define HelloPart_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class ODFrame;
class ODFacet;
class ODPlatformCanvas;
class ODObject;
class ODExtension;
class ODRefCntObject;
class ODPersistentObject;
class ODStorageUnit;
class ODPart;
class ODCanvas;
class ODDragItemIterator;
class ODEmbeddedFramesIterator;
class ODLink;
class ODLinkSource;
class ODMenuBar;
class ODObjectSpec;
class ODShape;
class ODStorageUnitView;
class ODTypeList;
class PartInfoRec;
class FrameInfoRec;
class ODxOrderedCollection;
class ODArbitrator;
class ODFocusSet;
class ODPopup;
class ODSession;
class M_HelloPart;

/*
 * End of bindings for IDL types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */


/* A procedure to create the HelloPart Class */
class M_HelloPart;
SOMEXTERN M_HelloPart * SOMLINK HelloPartNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the HelloPart class object, and the methods it introduces. */
SOMEXTERN struct HelloPartClassDataStructure {
	M_HelloPart *classObject;
	somMToken CommonInit;
	somMToken ReadContent;
	somMToken WriteContent;
	somMToken _get_data;
	somMToken _set_data;
} SOMDLINK HelloPartClassData;
#define _HelloPart HelloPartClassData.classObject

/* The API to parentMtabs for HelloPart, and the instance data it introduces. */
SOMEXTERN struct HelloPartCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK HelloPartCClassData;

/*
 * -- Typedefs for HelloPart Method Procedures
 */
SOMEXTERN {
typedef void   SOMLINK somTP_HelloPart_CommonInit(HelloPart *somSelf, Environment *ev, 
		ODPart* partWrapper);
typedef somTP_HelloPart_CommonInit *somTD_HelloPart_CommonInit;
typedef void   SOMLINK somTP_HelloPart_ReadContent(HelloPart *somSelf, Environment *ev);
typedef somTP_HelloPart_ReadContent *somTD_HelloPart_ReadContent;
typedef void   SOMLINK somTP_HelloPart_WriteContent(HelloPart *somSelf, Environment *ev, 
		ODStorageUnit* su);
typedef somTP_HelloPart_WriteContent *somTD_HelloPart_WriteContent;
typedef string   SOMLINK somTP_HelloPart__get_data(HelloPart *somSelf, Environment *ev);
typedef somTP_HelloPart__get_data *somTD_HelloPart__get_data;
typedef void   SOMLINK somTP_HelloPart__set_data(HelloPart *somSelf, Environment *ev, 
		string data);
typedef somTP_HelloPart__set_data *somTD_HelloPart__set_data;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_HelloPart*   SOMLINK somTP_HelloPart_somGetClass(HelloPart *somSelf);
typedef somTP_HelloPart_somGetClass *somTD_HelloPart_somGetClass;
}

#endif /* HelloPart_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for HelloPart
 */
class HelloPart : public ODPart
{
public:

// HelloPart::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_HelloPart) HelloPartNewClass(HelloPart_MajorVersion,HelloPart_MinorVersion);
   return (void*)
      SOM_Resolve(_HelloPart,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_HelloPart));
}

// HelloPart::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

HelloPart& operator=(HelloPart& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

HelloPart()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (HelloPartCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

HelloPart(HelloPart* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (HelloPartCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

HelloPart(const HelloPart* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (HelloPartCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: CommonInit */
void   CommonInit(Environment *ev, 
		ODPart* partWrapper)
{
   SOM_ResolveD(this,HelloPart,HelloPart,CommonInit)
	(this, ev,partWrapper);
}


/* method: ReadContent */
void   ReadContent(Environment *ev)
{
   SOM_ResolveD(this,HelloPart,HelloPart,ReadContent)
	(this, ev);
}


/* method: WriteContent */
void   WriteContent(Environment *ev, 
		ODStorageUnit* su)
{
   SOM_ResolveD(this,HelloPart,HelloPart,WriteContent)
	(this, ev,su);
}


/* method: _get_data */
string   _get_data(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string data"
 */
   return SOM_ResolveD(this,HelloPart,HelloPart,_get_data)
	(this, ev);
}


/* method: _set_data */
void   _set_data(Environment *ev, 
		string data)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string data"
 */
   SOM_ResolveD(this,HelloPart,HelloPart,_set_data)
	(this, ev,data);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_HelloPart*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,HelloPart,SOMObject,somGetClass)
	(this);
}



};   /* HelloPart */



#endif       /* SOM_HelloPart_xh */

#ifndef SOM_M_HelloPart_xh
#define SOM_M_HelloPart_xh

class M_HelloPart;

#define M_HelloPart_MajorVersion 0
#define M_HelloPart_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_ODPart_xh
#include <part.xh>
#endif

#ifndef M_HelloPart_API
#define M_HelloPart_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_HelloPart is a metaclass for HelloPart. Make sure HelloPart is known.
 */
class HelloPart;


/* A procedure to create the M_HelloPart Class */
SOMEXTERN SOMClass * SOMLINK M_HelloPartNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_HelloPart class object, and the methods it introduces. */
SOMEXTERN struct M_HelloPartClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_HelloPartClassData;
#define _M_HelloPart M_HelloPartClassData.classObject

/* The API to parentMtabs for M_HelloPart, and the instance data it introduces. */
SOMEXTERN struct M_HelloPartCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_HelloPartCClassData;

/*
 * -- Typedefs for M_HelloPart Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef HelloPart*   SOMLINK somTP_M_HelloPart_somNew(M_HelloPart *somSelf);
typedef somTP_M_HelloPart_somNew *somTD_M_HelloPart_somNew;
}

#endif /* M_HelloPart_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_HelloPart
 */
class M_HelloPart : public M_ODPart
{
public:

// M_HelloPart::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_HelloPart) M_HelloPartNewClass(M_HelloPart_MajorVersion,M_HelloPart_MinorVersion);
   return (void*)
      SOM_Resolve(_M_HelloPart,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_HelloPart));
}

// M_HelloPart::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_HelloPart& operator=(M_HelloPart& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_HelloPart()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_HelloPartCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_HelloPart(M_HelloPart* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_HelloPartCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_HelloPart(const M_HelloPart* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_HelloPartCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
HelloPart*  somNew()
{
   return SOM_ResolveD(this,M_HelloPart,SOMClass,somNew)
	(this);
}



};   /* M_HelloPart */



#endif       /* SOM_M_HelloPart_xh */
