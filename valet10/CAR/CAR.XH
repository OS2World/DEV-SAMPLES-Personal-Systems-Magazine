
/*
 * This file was generated by the SOM Compiler.
 * FileName: car.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.3
 *     SOM Emitter emitxh: 2.41
 */

#ifndef SOM_Car_xh
#define SOM_Car_xh

class Car;

#define Car_MajorVersion 0
#define Car_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_somf_MLinkable_xh
#include <mlink.xh>
#endif

#ifndef Car_API
#define Car_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;

/*
 * End of user-defined types.
 */

/* A procedure to create the Car Class */
SOMEXTERN SOMClass * SOMLINK CarNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Car class object, and the methods it introduces. */
SOMEXTERN struct CarClassDataStructure {
	SOMClass *classObject;
	somMToken _get_color;
	somMToken _set_color;
	somMToken _get_make;
	somMToken _set_make;
	somMToken _get_model;
	somMToken _set_model;
} SOMDLINK CarClassData;
#define _Car CarClassData.classObject

/* The API to parentMtabs for Car, and the instance data it introduces. */
SOMEXTERN struct CarCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK CarCClassData;

/*
 * -- Typedefs for Car Method Procedures
 */
SOMEXTERN {
typedef string   (SOMLINK * somTD_Car__get_color)(Car *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_Car__set_color)(Car *somSelf, Environment *ev,
		string color);
typedef string   (SOMLINK * somTD_Car__get_make)(Car *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_Car__set_make)(Car *somSelf, Environment *ev,
		string make);
typedef string   (SOMLINK * somTD_Car__get_model)(Car *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_Car__set_model)(Car *somSelf, Environment *ev,
		string model);

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef somf_MLinkable*   (SOMLINK * somTD_Car_somfMLinkableInit)(Car *somSelf, Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p);
typedef somf_MLinkable*   (SOMLINK * somTD_Car_somfGetNext)(Car *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_Car_somfSetNext)(Car *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef somf_MLinkable*   (SOMLINK * somTD_Car_somfGetPrevious)(Car *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_Car_somfSetPrevious)(Car *somSelf, Environment *ev,
		somf_MLinkable* aLink);
typedef void   (SOMLINK * somTD_Car_somInit)(Car *somSelf);
typedef void   (SOMLINK * somTD_Car_somDefaultInit)(Car *somSelf,
		somInitCtrl* ctrl);
typedef void   (SOMLINK * somTD_Car_somDestruct)(Car *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef void   (SOMLINK * somTD_Car_somDefaultCopyInit)(Car *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef Car*   (SOMLINK * somTD_Car_somDefaultAssign)(Car *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_Car_somDefaultConstCopyInit)(Car *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_Car_somDefaultVCopyInit)(Car *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_Car_somDefaultConstVCopyInit)(Car *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef Car*   (SOMLINK * somTD_Car_somDefaultConstAssign)(Car *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef Car*   (SOMLINK * somTD_Car_somDefaultVAssign)(Car *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef Car*   (SOMLINK * somTD_Car_somDefaultConstVAssign)(Car *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_Car_somFree)(Car *somSelf);
typedef void   (SOMLINK * somTD_Car_somUninit)(Car *somSelf);
typedef SOMClass*   (SOMLINK * somTD_Car_somGetClass)(Car *somSelf);
typedef string   (SOMLINK * somTD_Car_somGetClassName)(Car *somSelf);
typedef long   (SOMLINK * somTD_Car_somGetSize)(Car *somSelf);
typedef boolean   (SOMLINK * somTD_Car_somIsA)(Car *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_Car_somIsInstanceOf)(Car *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_Car_somRespondsTo)(Car *somSelf,
		somId mId);
typedef boolean   (SOMLINK * somTD_Car_somDispatch)(Car *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef boolean   (SOMLINK * somTD_Car_somClassDispatch)(Car *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef boolean   (SOMLINK * somTD_Car_somCastObj)(Car *somSelf,
		SOMClass* cls);
typedef boolean   (SOMLINK * somTD_Car_somResetObj)(Car *somSelf);
typedef void   (SOMLINK * somTD_Car_somDispatchV)(Car *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef long   (SOMLINK * somTD_Car_somDispatchL)(Car *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef void*   (SOMLINK * somTD_Car_somDispatchA)(Car *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef double   (SOMLINK * somTD_Car_somDispatchD)(Car *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef SOMObject*   (SOMLINK * somTD_Car_somPrintSelf)(Car *somSelf);
typedef void   (SOMLINK * somTD_Car_somDumpSelf)(Car *somSelf,
		long level);
typedef void   (SOMLINK * somTD_Car_somDumpSelfInt)(Car *somSelf,
		long level);
}

#endif /* Car_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Car
 */
class Car : public somf_MLinkable
{
public:

// Car::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!_Car) CarNewClass(Car_MajorVersion,Car_MinorVersion);
   return (void*)
      SOM_Resolve(_Car,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_Car));
}

// Car::delete uses the default deallocator for the object's class.
void operator delete(void * obj)
{
   somToken objCls = obj ? *(void**)obj : (somToken) NULL;
   if (somIsObj(objCls)) {
      SOM_Resolve(objCls,SOMClass,somDeallocate)
         ((SOMClass*)objCls, (string)obj);
   }
}

Car()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (CarCClassData.parentMtab))->mtab)
      return;
   somDefaultInit(0);
}

Car(Car* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (CarCClassData.parentMtab))->mtab)
      return;
   somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

Car(const Car* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (CarCClassData.parentMtab))->mtab)
      return;
   somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

~Car()
{
   if (!somIsObj(this)) return;
   somDestruct(0,0);
   *(void**)this = **(void***)this;
}


/* method: _get_color */
string   _get_color(Environment *ev)
{
   return SOM_ResolveD(this,Car,Car,_get_color)
	(this, ev);
}


/* method: _set_color */
void   _set_color(Environment *ev,
		string color)
{
   SOM_ResolveD(this,Car,Car,_set_color)
	(this, ev,color);
}


/* method: _get_make */
string   _get_make(Environment *ev)
{
   return SOM_ResolveD(this,Car,Car,_get_make)
	(this, ev);
}


/* method: _set_make */
void   _set_make(Environment *ev,
		string make)
{
   SOM_ResolveD(this,Car,Car,_set_make)
	(this, ev,make);
}


/* method: _get_model */
string   _get_model(Environment *ev)
{
   return SOM_ResolveD(this,Car,Car,_get_model)
	(this, ev);
}


/* method: _set_model */
void   _set_model(Environment *ev,
		string model)
{
   SOM_ResolveD(this,Car,Car,_set_model)
	(this, ev,model);
}


/*
 * Reintroduce inherited methods
 */

/* method: somfMLinkableInit */
somf_MLinkable*   somfMLinkableInit(Environment *ev,
		somf_MLinkable* n,
		somf_MLinkable* p)
{
   return SOM_ResolveD(this,Car,somf_MLinkable,somfMLinkableInit)
	(this, ev,n,p);
}


/* method: somfGetNext */
somf_MLinkable*   somfGetNext(Environment *ev)
{
   return SOM_ResolveD(this,Car,somf_MLinkable,somfGetNext)
	(this, ev);
}


/* method: somfSetNext */
void   somfSetNext(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,Car,somf_MLinkable,somfSetNext)
	(this, ev,aLink);
}


/* method: somfGetPrevious */
somf_MLinkable*   somfGetPrevious(Environment *ev)
{
   return SOM_ResolveD(this,Car,somf_MLinkable,somfGetPrevious)
	(this, ev);
}


/* method: somfSetPrevious */
void   somfSetPrevious(Environment *ev,
		somf_MLinkable* aLink)
{
   SOM_ResolveD(this,Car,somf_MLinkable,somfSetPrevious)
	(this, ev,aLink);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,Car,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,Car,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,Car,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,Car,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
Car*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,Car,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,Car,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,Car,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,Car,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
Car*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,Car,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
Car*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,Car,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
Car*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,Car,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,Car,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,Car,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,Car,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,Car,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,Car,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,Car,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,Car,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,Car,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   Car_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,Car,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,Car,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   Car_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,Car,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,Car,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,Car,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,Car,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */
/* the va_list invocation form */
void   Car_somDispatchV(somId methodId,
		somId descriptor,
		va_list ap)
{
   SOM_ResolveD(this,Car,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,Car,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */
/* the va_list invocation form */
long   Car_somDispatchL(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,Car,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,Car,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */
/* the va_list invocation form */
void*   Car_somDispatchA(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,Car,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,Car,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */
/* the va_list invocation form */
double   Car_somDispatchD(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,Car,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,Car,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,Car,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,Car,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,Car,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* Car */



#endif       /* SOM_Car_xh */
