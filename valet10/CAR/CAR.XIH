
/*
 * This file was generated by the SOM Compiler.
 * FileName: car.xih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.3
 *     SOM Emitter emitxih: 2.41
 */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_Car_xih
#define SOM_Car_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_Car_xh
#include <car.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif

#define Car_MaxNoMethods 6

/*
 * -- Instance Data
 */
typedef struct {
	string color;
	string make;
	string model;
} CarData;

/*
 * -- Getdata Macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef CarData* (SOMLINK * somTD_Car_DataThunk)(void*);
#define CarGetData(somSelf) \
   (((somTD_Car_DataThunk)(CarCClassData.instanceDataToken))(somSelf))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _color (somThis->color)
  #define _make (somThis->make)
  #define _model (somThis->model)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(Car_Class_Source) || defined(SOM_Module_car_Source))

/*
 * Trace/Debug macro
 */
#ifndef CarMethodDebug
   #define CarMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _somfMLinkableInit somSelf->somfMLinkableInit
  #define _somfGetNext somSelf->somfGetNext
  #define _somfSetNext somSelf->somfSetNext
  #define _somfGetPrevious somSelf->somfGetPrevious
  #define _somfSetPrevious somSelf->somfSetPrevious
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define __get_color somSelf->_get_color
  #define __set_color somSelf->_set_color
  #define __get_make somSelf->_get_make
  #define __set_make somSelf->_set_make
  #define __get_model somSelf->_get_model
  #define __set_model somSelf->_set_model
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
#endif


/*
 * -- The Car ClassData Structure
 */
SOMEXTERN struct CarClassDataStructure SOMDLINK CarClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary Car ClassData structure
 */
SOMEXTERN struct CarCClassDataStructure SOMDLINK CarCClassData = {(somMethodTabs) NULL};


/*
 * -- Apply Stubs for New Methods
 */
static void SOMLINK somAP__get_color(Car *somSelf,
		string *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, Car*);
	Environment *ev = va_arg(__ap, Environment*);
	SOM_IgnoreWarning(__ap);

	*__retVal = ((somTD_Car__get_color) __methodPtr) (somSelf, ev);
}

static void SOMLINK somAP__set_color(Car *somSelf,
		void *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, Car*);
	Environment *ev = va_arg(__ap, Environment*);
	string color = va_arg(__ap, string);
	SOM_IgnoreWarning(__retVal);

	((somTD_Car__set_color) __methodPtr) (somSelf, ev, color);
}

static void SOMLINK somAP__get_make(Car *somSelf,
		string *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, Car*);
	Environment *ev = va_arg(__ap, Environment*);
	SOM_IgnoreWarning(__ap);

	*__retVal = ((somTD_Car__get_make) __methodPtr) (somSelf, ev);
}

static void SOMLINK somAP__set_make(Car *somSelf,
		void *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, Car*);
	Environment *ev = va_arg(__ap, Environment*);
	string make = va_arg(__ap, string);
	SOM_IgnoreWarning(__retVal);

	((somTD_Car__set_make) __methodPtr) (somSelf, ev, make);
}

static void SOMLINK somAP__get_model(Car *somSelf,
		string *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, Car*);
	Environment *ev = va_arg(__ap, Environment*);
	SOM_IgnoreWarning(__ap);

	*__retVal = ((somTD_Car__get_model) __methodPtr) (somSelf, ev);
}

static void SOMLINK somAP__set_model(Car *somSelf,
		void *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, Car*);
	Environment *ev = va_arg(__ap, Environment*);
	string model = va_arg(__ap, string);
	SOM_IgnoreWarning(__retVal);

	((somTD_Car__set_model) __methodPtr) (somSelf, ev, model);
}


/*
 * New Method: _get_color
 */
SOM_Scope string  SOMLINK _get_color(Car *somSelf, Environment *ev);
#ifndef somMN__get_color_defined
#define somMN__get_color_defined
static char *somMN__get_color = "_get_color";
static somId somId__get_color = &somMN__get_color;
#endif  /* somMN__get_color_defined */
#ifndef somDS__get_color_defined
#define somDS__get_color_defined
static char *somDS__get_color = "::Car::color";
static somId somDI__get_color = &somDS__get_color;
#endif  /* somDS__get_color_defined */
static string  SOMLINK somRD__get_color(Car *somSelf, Environment *ev)
{
	string __retVal;

	somSelf->somDispatch((void **)&__retVal, somId__get_color, somSelf , ev
		);
	return __retVal;
}

/*
 * New Method: _set_color
 */
SOM_Scope void  SOMLINK _set_color(Car *somSelf, Environment *ev,
		string color);
#ifndef somMN__set_color_defined
#define somMN__set_color_defined
static char *somMN__set_color = "_set_color";
static somId somId__set_color = &somMN__set_color;
#endif  /* somMN__set_color_defined */
#ifndef somDS__set_color_defined
#define somDS__set_color_defined
static char *somDS__set_color = "::Car::color";
static somId somDI__set_color = &somDS__set_color;
#endif  /* somDS__set_color_defined */
static void  SOMLINK somRD__set_color(Car *somSelf, Environment *ev,
		string color)
{
	void* __retVal;

	somSelf->somDispatch((void **)&__retVal, somId__set_color, somSelf , ev
		,color);
}

/*
 * New Method: _get_make
 */
SOM_Scope string  SOMLINK _get_make(Car *somSelf, Environment *ev);
#ifndef somMN__get_make_defined
#define somMN__get_make_defined
static char *somMN__get_make = "_get_make";
static somId somId__get_make = &somMN__get_make;
#endif  /* somMN__get_make_defined */
#ifndef somDS__get_make_defined
#define somDS__get_make_defined
static char *somDS__get_make = "::Car::make";
static somId somDI__get_make = &somDS__get_make;
#endif  /* somDS__get_make_defined */
static string  SOMLINK somRD__get_make(Car *somSelf, Environment *ev)
{
	string __retVal;

	somSelf->somDispatch((void **)&__retVal, somId__get_make, somSelf , ev
		);
	return __retVal;
}

/*
 * New Method: _set_make
 */
SOM_Scope void  SOMLINK _set_make(Car *somSelf, Environment *ev,
		string make);
#ifndef somMN__set_make_defined
#define somMN__set_make_defined
static char *somMN__set_make = "_set_make";
static somId somId__set_make = &somMN__set_make;
#endif  /* somMN__set_make_defined */
#ifndef somDS__set_make_defined
#define somDS__set_make_defined
static char *somDS__set_make = "::Car::make";
static somId somDI__set_make = &somDS__set_make;
#endif  /* somDS__set_make_defined */
static void  SOMLINK somRD__set_make(Car *somSelf, Environment *ev,
		string make)
{
	void* __retVal;

	somSelf->somDispatch((void **)&__retVal, somId__set_make, somSelf , ev
		,make);
}

/*
 * New Method: _get_model
 */
SOM_Scope string  SOMLINK _get_model(Car *somSelf, Environment *ev);
#ifndef somMN__get_model_defined
#define somMN__get_model_defined
static char *somMN__get_model = "_get_model";
static somId somId__get_model = &somMN__get_model;
#endif  /* somMN__get_model_defined */
#ifndef somDS__get_model_defined
#define somDS__get_model_defined
static char *somDS__get_model = "::Car::model";
static somId somDI__get_model = &somDS__get_model;
#endif  /* somDS__get_model_defined */
static string  SOMLINK somRD__get_model(Car *somSelf, Environment *ev)
{
	string __retVal;

	somSelf->somDispatch((void **)&__retVal, somId__get_model, somSelf , ev
		);
	return __retVal;
}

/*
 * New Method: _set_model
 */
SOM_Scope void  SOMLINK _set_model(Car *somSelf, Environment *ev,
		string model);
#ifndef somMN__set_model_defined
#define somMN__set_model_defined
static char *somMN__set_model = "_set_model";
static somId somId__set_model = &somMN__set_model;
#endif  /* somMN__set_model_defined */
#ifndef somDS__set_model_defined
#define somDS__set_model_defined
static char *somDS__set_model = "::Car::model";
static somId somDI__set_model = &somDS__set_model;
#endif  /* somDS__set_model_defined */
static void  SOMLINK somRD__set_model(Car *somSelf, Environment *ev,
		string model)
{
	void* __retVal;

	somSelf->somDispatch((void **)&__retVal, somId__set_model, somSelf , ev
		,model);
}

/*
 * Overridden method: somDefaultInit
 */
SOM_Scope void  SOMLINK somDefaultInit(Car *somSelf,
		somInitCtrl* ctrl);
static char *somMN_CarsomDefaultInit = "SOMObject::somDefaultInit";
static somId somId_CarsomDefaultInit = &somMN_CarsomDefaultInit;
#ifdef somId_somDefaultInit
#undef somId_somDefaultInit
#else
#define somId_somDefaultInit somId_CarsomDefaultInit
#endif

/*
 * Overridden method: somDestruct
 */
SOM_Scope void  SOMLINK somDestruct(Car *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
static char *somMN_CarsomDestruct = "SOMObject::somDestruct";
static somId somId_CarsomDestruct = &somMN_CarsomDestruct;
#ifdef somId_somDestruct
#undef somId_somDestruct
#else
#define somId_somDestruct somId_CarsomDestruct
#endif
typedef void   (SOMLINK * somTD_xih_Car_somDestruct)(Car *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t CarSM[] = {
    {    &CarClassData._get_color,
         &somId__get_color,
         &somDI__get_color,
         (somMethodProc *) _get_color,
         (somMethodProc *) somRD__get_color,
         (somMethodProc *) somAP__get_color    },
    {    &CarClassData._set_color,
         &somId__set_color,
         &somDI__set_color,
         (somMethodProc *) _set_color,
         (somMethodProc *) somRD__set_color,
         (somMethodProc *) somAP__set_color    },
    {    &CarClassData._get_make,
         &somId__get_make,
         &somDI__get_make,
         (somMethodProc *) _get_make,
         (somMethodProc *) somRD__get_make,
         (somMethodProc *) somAP__get_make    },
    {    &CarClassData._set_make,
         &somId__set_make,
         &somDI__set_make,
         (somMethodProc *) _set_make,
         (somMethodProc *) somRD__set_make,
         (somMethodProc *) somAP__set_make    },
    {    &CarClassData._get_model,
         &somId__get_model,
         &somDI__get_model,
         (somMethodProc *) _get_model,
         (somMethodProc *) somRD__get_model,
         (somMethodProc *) somAP__get_model    },
    {    &CarClassData._set_model,
         &somId__set_model,
         &somDI__set_model,
         (somMethodProc *) _set_model,
         (somMethodProc *) somRD__set_model,
         (somMethodProc *) somAP__set_model    },
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t CarOM[] = {
    {    &somId_CarsomDefaultInit,
         (somMethodProc *) somDefaultInit  },
    {    &somId_CarsomDestruct,
         (somMethodProc *) somDestruct  },
};


/*
 *  class Ids
 */
static char * somCN_Car = "Car";
static char * somPCN_Car_somf_MLinkable = "somf_MLinkable";

static somId somPCCar[] = {
    &somPCN_Car_somf_MLinkable,
};

static somStaticClassInfo CarSCI = {
    4, 6, 2, 0, 0, 0, /* layout version 4 */ 
    Car_MajorVersion, Car_MinorVersion,
    sizeof(CarData), Car_MaxNoMethods, 1,
    &somCN_Car,
    (somId) NULL, 1,
    somPCCar,
    (somClassDataStructure *) &CarClassData,
    (somCClassDataStructure *) &CarCClassData,
    CarSM, CarOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    0, /* default alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    6, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not a DTS class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK CarNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    somf_MLinkableNewClass(somf_MLinkable_MajorVersion,somf_MLinkable_MinorVersion);	/* static reference */
    return (SOMClass*) ((void*)(somBuildClass(1,&CarSCI, somtmajorVersion, somtminorVersion)));
}

/*
 * Functions for attributes.
 */
SOM_Scope string  SOMLINK _get_color(Car *somSelf, Environment *ev){
    CarData *somThis = CarGetData(somSelf);
    CarMethodDebug("Car","_get_color");
    SOM_IgnoreWarning(ev);

    return (somThis->color);
}
SOM_Scope string  SOMLINK _get_make(Car *somSelf, Environment *ev){
    CarData *somThis = CarGetData(somSelf);
    CarMethodDebug("Car","_get_make");
    SOM_IgnoreWarning(ev);

    return (somThis->make);
}
SOM_Scope string  SOMLINK _get_model(Car *somSelf, Environment *ev){
    CarData *somThis = CarGetData(somSelf);
    CarMethodDebug("Car","_get_model");
    SOM_IgnoreWarning(ev);

    return (somThis->model);
}

/*
 * Macros for initializer/destructor entry/exit
 */
#define Car_BeginInitializer_somDefaultInit \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)CarCClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   somThis = (CarData*)((char*)somSelf + ctrl->info->dataOffset);\
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;
#define Car_BeginDestructor \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)CarCClassData.parentMtab)->destructCtrl),sizeof(somDestructCtrl)); \
   } \
   somThis = (CarData*)((char*)somSelf + ctrl->info->dataOffset);\
   myMask = ctrl->mask; 
#define Car_EndDestructor \
   ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1; \
   Car_DeInit_somf_MLinkable_somDestruct(somSelf,0,ctrl); \
   if (doFree) _Car->somDeallocate((string)somSelf);

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for somf_MLinkable */
#define Car_Init_somf_MLinkable_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDefaultInit) \
               ctrl->info->defaultInit) \
                   ((SOMObject *)((void *) somSelf), ctrl)
#define Car_DeInit_somf_MLinkable_somDestruct(somSelf, doFree, ctrl) \
        if (myMask[0]&1) \
           ((somTD_SOMObject_somDestruct) \
               ctrl->info->defaultDestruct) \
                   ((SOMObject *)((void *) somSelf), 0, ctrl)

#endif /* Primary Implementation Support */

#endif       /* SOM_Car_xih */
