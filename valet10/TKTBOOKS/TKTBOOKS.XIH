
/*
 * This file was generated by the SOM Compiler.
 * FileName: tktbooks.xih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.3
 *     SOM Emitter emitxih: 2.41
 */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_TktBookS_xih
#define SOM_TktBookS_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_TktBookS_xh
#include <tktbooks.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif

#define TktBookS_MaxNoMethods 1

/*
 * -- Instance Data
 */
typedef struct {
	long nextTicketNum;
} TktBookSData;

/*
 * -- Getdata Macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef TktBookSData* (SOMLINK * somTD_TktBookS_DataThunk)(void*);
#define TktBookSGetData(somSelf) \
   (((somTD_TktBookS_DataThunk)(TktBookSCClassData.instanceDataToken))(somSelf))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _nextTicketNum (somThis->nextTicketNum)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(TktBookS_Class_Source) || defined(SOM_Module_tktbooks_Source))

/*
 * Trace/Debug macro
 */
#ifndef TktBookSMethodDebug
   #define TktBookSMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define _getTicket somSelf->getTicket
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
#endif


/*
 * -- The TktBookS ClassData Structure
 */
SOMEXTERN struct TktBookSClassDataStructure SOMDLINK TktBookSClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary TktBookS ClassData structure
 */
SOMEXTERN struct TktBookSCClassDataStructure SOMDLINK TktBookSCClassData = {(somMethodTabs) NULL};


/*
 * -- Apply Stubs for New Methods
 */
static void SOMLINK somAP_getTicket(TktBookS *somSelf,
		Ticket* *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, TktBookS*);
	Environment *ev = va_arg(__ap, Environment*);
	Garage* aGarage = va_arg(__ap, Garage*);

	*__retVal = ((somTD_TktBookS_getTicket) __methodPtr) (somSelf, ev, aGarage);
}


/*
 * New Method: getTicket
 */
SOM_Scope Ticket*  SOMLINK getTicket(TktBookS *somSelf, Environment *ev,
		Garage* aGarage);
#ifndef somMN_getTicket_defined
#define somMN_getTicket_defined
static char *somMN_getTicket = "getTicket";
static somId somId_getTicket = &somMN_getTicket;
#endif  /* somMN_getTicket_defined */
#ifndef somDS_getTicket_defined
#define somDS_getTicket_defined
static char *somDS_getTicket = "::TktBookS::getTicket";
static somId somDI_getTicket = &somDS_getTicket;
#endif  /* somDS_getTicket_defined */
static Ticket*  SOMLINK somRD_getTicket(TktBookS *somSelf, Environment *ev,
		Garage* aGarage)
{
	Ticket* __retVal;

	somSelf->somDispatch((void **)&__retVal, somId_getTicket, somSelf , ev
		,aGarage);
	return __retVal;
}

/*
 * Overridden method: somDefaultInit
 */
SOM_Scope void  SOMLINK somDefaultInit(TktBookS *somSelf,
		somInitCtrl* ctrl);
static char *somMN_TktBookSsomDefaultInit = "SOMObject::somDefaultInit";
static somId somId_TktBookSsomDefaultInit = &somMN_TktBookSsomDefaultInit;
#ifdef somId_somDefaultInit
#undef somId_somDefaultInit
#else
#define somId_somDefaultInit somId_TktBookSsomDefaultInit
#endif

/*
 * Overridden method: somDestruct
 */
SOM_Scope void  SOMLINK somDestruct(TktBookS *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
static char *somMN_TktBookSsomDestruct = "SOMObject::somDestruct";
static somId somId_TktBookSsomDestruct = &somMN_TktBookSsomDestruct;
#ifdef somId_somDestruct
#undef somId_somDestruct
#else
#define somId_somDestruct somId_TktBookSsomDestruct
#endif
typedef void   (SOMLINK * somTD_xih_TktBookS_somDestruct)(TktBookS *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t TktBookSSM[] = {
    {    &TktBookSClassData.getTicket,
         &somId_getTicket,
         &somDI_getTicket,
         (somMethodProc *) getTicket,
         (somMethodProc *) somRD_getTicket,
         (somMethodProc *) somAP_getTicket    },
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t TktBookSOM[] = {
    {    &somId_TktBookSsomDefaultInit,
         (somMethodProc *) somDefaultInit  },
    {    &somId_TktBookSsomDestruct,
         (somMethodProc *) somDestruct  },
};


/*
 *  class Ids
 */
static char * somCN_TktBookS = "TktBookS";
static char * somPCN_TktBookS_SOMObject = "SOMObject";

static somId somPCTktBookS[] = {
    &somPCN_TktBookS_SOMObject,
};

static somStaticClassInfo TktBookSSCI = {
    4, 1, 2, 0, 0, 0, /* layout version 4 */ 
    TktBookS_MajorVersion, TktBookS_MinorVersion,
    sizeof(TktBookSData), TktBookS_MaxNoMethods, 1,
    &somCN_TktBookS,
    (somId) NULL, 1,
    somPCTktBookS,
    (somClassDataStructure *) &TktBookSClassData,
    (somCClassDataStructure *) &TktBookSCClassData,
    TktBookSSM, TktBookSOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    0, /* default alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    2, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not a DTS class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK TktBookSNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMObjectNewClass(SOMObject_MajorVersion,SOMObject_MinorVersion);	/* static reference */
    return (SOMClass*) ((void*)(somBuildClass(1,&TktBookSSCI, somtmajorVersion, somtminorVersion)));
}

/*
 * Functions for attributes.
 */

/*
 * Macros for initializer/destructor entry/exit
 */
#define TktBookS_BeginInitializer_somDefaultInit \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)TktBookSCClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   somThis = (TktBookSData*)((char*)somSelf + ctrl->info->dataOffset);\
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;
#define TktBookS_BeginDestructor \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)TktBookSCClassData.parentMtab)->destructCtrl),sizeof(somDestructCtrl)); \
   } \
   somThis = (TktBookSData*)((char*)somSelf + ctrl->info->dataOffset);\
   myMask = ctrl->mask; 
#define TktBookS_EndDestructor \
   ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1; \
   TktBookS_DeInit_SOMObject_somDestruct(somSelf,0,ctrl); \
   if (doFree) _TktBookS->somDeallocate((string)somSelf);

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for SOMObject */
#define TktBookS_Init_SOMObject_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
        /* special case SOMObject */\
        ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info));
#define TktBookS_DeInit_SOMObject_somDestruct(somSelf, doFree, ctrl) \
        if (myMask[0]&1) \
        /* special case SOMObject */\
        ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info));

#endif /* Primary Implementation Support */

#endif       /* SOM_TktBookS_xih */
