
/*
 * This file was generated by the SOM Compiler.
 * FileName: valet.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.3
 *     SOM Emitter emitxh: 2.41
 */

#ifndef SOM_Valet_xh
#define SOM_Valet_xh

class Valet;

#define Valet_MajorVersion 0
#define Valet_MinorVersion 0

/*
 * Passthru lines: File: "C.xh", "before"
 */
#include "Ticket.xh"
#include "Car.xh"
#include "Garage.xh"
#include <TktBooks.xh>

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Valet_API
#define Valet_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Ticket;

/*
 * End of user-defined types.
 */

/* A procedure to create the Valet Class */
SOMEXTERN SOMClass * SOMLINK ValetNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Valet class object, and the methods it introduces. */
SOMEXTERN struct ValetClassDataStructure {
	SOMClass *classObject;
	somMToken _get_valetName;
	somMToken _set_valetName;
	somMToken _get_valetID;
	somMToken _set_valetID;
	somMToken parkCar;
	somMToken retrieveCar;
} SOMDLINK ValetClassData;
#define _Valet ValetClassData.classObject

/* The API to parentMtabs for Valet, and the instance data it introduces. */
SOMEXTERN struct ValetCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ValetCClassData;

/*
 * -- Typedefs for Valet Method Procedures
 */
SOMEXTERN {
typedef string   (SOMLINK * somTD_Valet__get_valetName)(Valet *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_Valet__set_valetName)(Valet *somSelf, Environment *ev,
		string valetName);
typedef long   (SOMLINK * somTD_Valet__get_valetID)(Valet *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_Valet__set_valetID)(Valet *somSelf, Environment *ev,
		long valetID);
typedef Ticket*   (SOMLINK * somTD_Valet_parkCar)(Valet *somSelf, Environment *ev,
		Car* aCar);
typedef Car*   (SOMLINK * somTD_Valet_retrieveCar)(Valet *somSelf, Environment *ev,
		Ticket* aTicket);

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   (SOMLINK * somTD_Valet_somDefaultInit)(Valet *somSelf,
		somInitCtrl* ctrl);
typedef void   (SOMLINK * somTD_Valet_somDestruct)(Valet *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef void   (SOMLINK * somTD_Valet_somDefaultCopyInit)(Valet *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef Valet*   (SOMLINK * somTD_Valet_somDefaultAssign)(Valet *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_Valet_somDefaultConstCopyInit)(Valet *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_Valet_somDefaultVCopyInit)(Valet *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_Valet_somDefaultConstVCopyInit)(Valet *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef Valet*   (SOMLINK * somTD_Valet_somDefaultConstAssign)(Valet *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef Valet*   (SOMLINK * somTD_Valet_somDefaultVAssign)(Valet *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef Valet*   (SOMLINK * somTD_Valet_somDefaultConstVAssign)(Valet *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_Valet_somInit)(Valet *somSelf);
typedef void   (SOMLINK * somTD_Valet_somFree)(Valet *somSelf);
typedef void   (SOMLINK * somTD_Valet_somUninit)(Valet *somSelf);
typedef SOMClass*   (SOMLINK * somTD_Valet_somGetClass)(Valet *somSelf);
typedef string   (SOMLINK * somTD_Valet_somGetClassName)(Valet *somSelf);
typedef long   (SOMLINK * somTD_Valet_somGetSize)(Valet *somSelf);
typedef boolean   (SOMLINK * somTD_Valet_somIsA)(Valet *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_Valet_somIsInstanceOf)(Valet *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_Valet_somRespondsTo)(Valet *somSelf,
		somId mId);
typedef boolean   (SOMLINK * somTD_Valet_somDispatch)(Valet *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef boolean   (SOMLINK * somTD_Valet_somClassDispatch)(Valet *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef boolean   (SOMLINK * somTD_Valet_somCastObj)(Valet *somSelf,
		SOMClass* cls);
typedef boolean   (SOMLINK * somTD_Valet_somResetObj)(Valet *somSelf);
typedef void   (SOMLINK * somTD_Valet_somDispatchV)(Valet *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef long   (SOMLINK * somTD_Valet_somDispatchL)(Valet *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef void*   (SOMLINK * somTD_Valet_somDispatchA)(Valet *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef double   (SOMLINK * somTD_Valet_somDispatchD)(Valet *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef SOMObject*   (SOMLINK * somTD_Valet_somPrintSelf)(Valet *somSelf);
typedef void   (SOMLINK * somTD_Valet_somDumpSelf)(Valet *somSelf,
		long level);
typedef void   (SOMLINK * somTD_Valet_somDumpSelfInt)(Valet *somSelf,
		long level);
}

#endif /* Valet_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Valet
 */
class Valet : public SOMObject
{
public:

// Valet::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!_Valet) ValetNewClass(Valet_MajorVersion,Valet_MinorVersion);
   return (void*)
      SOM_Resolve(_Valet,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_Valet));
}

// Valet::delete uses the default deallocator for the object's class.
void operator delete(void * obj)
{
   somToken objCls = obj ? *(void**)obj : (somToken) NULL;
   if (somIsObj(objCls)) {
      SOM_Resolve(objCls,SOMClass,somDeallocate)
         ((SOMClass*)objCls, (string)obj);
   }
}

Valet()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ValetCClassData.parentMtab))->mtab)
      return;
   somDefaultInit(0);
}

Valet(Valet* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ValetCClassData.parentMtab))->mtab)
      return;
   somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

Valet(const Valet* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ValetCClassData.parentMtab))->mtab)
      return;
   somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

~Valet()
{
   if (!somIsObj(this)) return;
   somDestruct(0,0);
   *(void**)this = **(void***)this;
}


/* method: _get_valetName */
string   _get_valetName(Environment *ev)
{
   return SOM_ResolveD(this,Valet,Valet,_get_valetName)
	(this, ev);
}


/* method: _set_valetName */
void   _set_valetName(Environment *ev,
		string valetName)
{
   SOM_ResolveD(this,Valet,Valet,_set_valetName)
	(this, ev,valetName);
}


/* method: _get_valetID */
long   _get_valetID(Environment *ev)
{
   return SOM_ResolveD(this,Valet,Valet,_get_valetID)
	(this, ev);
}


/* method: _set_valetID */
void   _set_valetID(Environment *ev,
		long valetID)
{
   SOM_ResolveD(this,Valet,Valet,_set_valetID)
	(this, ev,valetID);
}


/* method: parkCar */
Ticket*   parkCar(Environment *ev,
		Car* aCar)
{
   return SOM_ResolveD(this,Valet,Valet,parkCar)
	(this, ev,aCar);
}


/* method: retrieveCar */
Car*   retrieveCar(Environment *ev,
		Ticket* aTicket)
{
   return SOM_ResolveD(this,Valet,Valet,retrieveCar)
	(this, ev,aTicket);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,Valet,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,Valet,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,Valet,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
Valet*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,Valet,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,Valet,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,Valet,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,Valet,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
Valet*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,Valet,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
Valet*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,Valet,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
Valet*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,Valet,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,Valet,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,Valet,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,Valet,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,Valet,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,Valet,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,Valet,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,Valet,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,Valet,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,Valet,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   Valet_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,Valet,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,Valet,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   Valet_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,Valet,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,Valet,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,Valet,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,Valet,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */
/* the va_list invocation form */
void   Valet_somDispatchV(somId methodId,
		somId descriptor,
		va_list ap)
{
   SOM_ResolveD(this,Valet,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,Valet,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */
/* the va_list invocation form */
long   Valet_somDispatchL(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,Valet,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,Valet,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */
/* the va_list invocation form */
void*   Valet_somDispatchA(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,Valet,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,Valet,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */
/* the va_list invocation form */
double   Valet_somDispatchD(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,Valet,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,Valet,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,Valet,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,Valet,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,Valet,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* Valet */



#endif       /* SOM_Valet_xh */
