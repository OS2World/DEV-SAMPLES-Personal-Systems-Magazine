
/*
 * This file was generated by the SOM Compiler.
 * FileName: valet.xih.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.3
 *     SOM Emitter emitxih: 2.41
 */

/*
 * -- By default, for classes declared using IDL,
 * -- this emitter doesn't define redispatch/apply stubs.
 * -- Instead, it requests that the SOM kernel produce them.
 * -- To override this default, use the "notc" modifier.
 */

#ifndef SOM_Valet_xih
#define SOM_Valet_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_Valet_xh
#include <valet.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif

#define Valet_MaxNoMethods 6

/*
 * -- Instance Data
 */
typedef struct {
	string valetName;
	long valetID;
	Garage* aGarage;
	TktBookS* aTicketBookSystem;
} ValetData;

/*
 * -- Getdata Macro
 */

/*
 * -- This emitter treats Data Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to override this default.
 */
typedef ValetData* (SOMLINK * somTD_Valet_DataThunk)(void*);
#define ValetGetData(somSelf) \
   (((somTD_Valet_DataThunk)(ValetCClassData.instanceDataToken))(somSelf))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _valetName (somThis->valetName)
  #define _valetID (somThis->valetID)
  #define _aGarage (somThis->aGarage)
  #define _aTicketBookSystem (somThis->aTicketBookSystem)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(Valet_Class_Source) || defined(SOM_Module_valet_Source))

/*
 * Trace/Debug macro
 */
#ifndef ValetMethodDebug
   #define ValetMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somDefaultCopyInit somSelf->somDefaultCopyInit
  #define _somDefaultAssign somSelf->somDefaultAssign
  #define _somDefaultConstCopyInit somSelf->somDefaultConstCopyInit
  #define _somDefaultVCopyInit somSelf->somDefaultVCopyInit
  #define _somDefaultConstVCopyInit somSelf->somDefaultConstVCopyInit
  #define _somDefaultConstAssign somSelf->somDefaultConstAssign
  #define _somDefaultVAssign somSelf->somDefaultVAssign
  #define _somDefaultConstVAssign somSelf->somDefaultConstVAssign
  #define _somInit somSelf->somInit
  #define _somFree somSelf->somFree
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define __get_valetName somSelf->_get_valetName
  #define __set_valetName somSelf->_set_valetName
  #define __get_valetID somSelf->_get_valetID
  #define __set_valetID somSelf->_set_valetID
  #define _parkCar somSelf->parkCar
  #define _retrieveCar somSelf->retrieveCar
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
#endif


/*
 * -- The Valet ClassData Structure
 */
SOMEXTERN struct ValetClassDataStructure SOMDLINK ValetClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary Valet ClassData structure
 */
SOMEXTERN struct ValetCClassDataStructure SOMDLINK ValetCClassData = {(somMethodTabs) NULL};


/*
 * -- Apply Stubs for New Methods
 */
static void SOMLINK somAP__get_valetName(Valet *somSelf,
		string *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, Valet*);
	Environment *ev = va_arg(__ap, Environment*);
	SOM_IgnoreWarning(__ap);

	*__retVal = ((somTD_Valet__get_valetName) __methodPtr) (somSelf, ev);
}

static void SOMLINK somAP__set_valetName(Valet *somSelf,
		void *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, Valet*);
	Environment *ev = va_arg(__ap, Environment*);
	string valetName = va_arg(__ap, string);
	SOM_IgnoreWarning(__retVal);

	((somTD_Valet__set_valetName) __methodPtr) (somSelf, ev, valetName);
}

static void SOMLINK somAP__get_valetID(Valet *somSelf,
		long *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, Valet*);
	Environment *ev = va_arg(__ap, Environment*);
	SOM_IgnoreWarning(__ap);

	*__retVal = ((somTD_Valet__get_valetID) __methodPtr) (somSelf, ev);
}

static void SOMLINK somAP__set_valetID(Valet *somSelf,
		void *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, Valet*);
	Environment *ev = va_arg(__ap, Environment*);
	long valetID = va_arg(__ap, long);
	SOM_IgnoreWarning(__retVal);

	((somTD_Valet__set_valetID) __methodPtr) (somSelf, ev, valetID);
}

static void SOMLINK somAP_parkCar(Valet *somSelf,
		Ticket* *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, Valet*);
	Environment *ev = va_arg(__ap, Environment*);
	Car* aCar = va_arg(__ap, Car*);

	*__retVal = ((somTD_Valet_parkCar) __methodPtr) (somSelf, ev, aCar);
}

static void SOMLINK somAP_retrieveCar(Valet *somSelf,
		Car* *__retVal,
		somMethodProc *__methodPtr,
		va_list __ap)
{
	somSelf = va_arg(__ap, Valet*);
	Environment *ev = va_arg(__ap, Environment*);
	Ticket* aTicket = va_arg(__ap, Ticket*);

	*__retVal = ((somTD_Valet_retrieveCar) __methodPtr) (somSelf, ev, aTicket);
}


/*
 * New Method: _get_valetName
 */
SOM_Scope string  SOMLINK _get_valetName(Valet *somSelf, Environment *ev);
#ifndef somMN__get_valetName_defined
#define somMN__get_valetName_defined
static char *somMN__get_valetName = "_get_valetName";
static somId somId__get_valetName = &somMN__get_valetName;
#endif  /* somMN__get_valetName_defined */
#ifndef somDS__get_valetName_defined
#define somDS__get_valetName_defined
static char *somDS__get_valetName = "::Valet::valetName";
static somId somDI__get_valetName = &somDS__get_valetName;
#endif  /* somDS__get_valetName_defined */
static string  SOMLINK somRD__get_valetName(Valet *somSelf, Environment *ev)
{
	string __retVal;

	somSelf->somDispatch((void **)&__retVal, somId__get_valetName, somSelf , ev
		);
	return __retVal;
}

/*
 * New Method: _set_valetName
 */
SOM_Scope void  SOMLINK _set_valetName(Valet *somSelf, Environment *ev,
		string valetName);
#ifndef somMN__set_valetName_defined
#define somMN__set_valetName_defined
static char *somMN__set_valetName = "_set_valetName";
static somId somId__set_valetName = &somMN__set_valetName;
#endif  /* somMN__set_valetName_defined */
#ifndef somDS__set_valetName_defined
#define somDS__set_valetName_defined
static char *somDS__set_valetName = "::Valet::valetName";
static somId somDI__set_valetName = &somDS__set_valetName;
#endif  /* somDS__set_valetName_defined */
static void  SOMLINK somRD__set_valetName(Valet *somSelf, Environment *ev,
		string valetName)
{
	void* __retVal;

	somSelf->somDispatch((void **)&__retVal, somId__set_valetName, somSelf , ev
		,valetName);
}

/*
 * New Method: _get_valetID
 */
SOM_Scope long  SOMLINK _get_valetID(Valet *somSelf, Environment *ev);
#ifndef somMN__get_valetID_defined
#define somMN__get_valetID_defined
static char *somMN__get_valetID = "_get_valetID";
static somId somId__get_valetID = &somMN__get_valetID;
#endif  /* somMN__get_valetID_defined */
#ifndef somDS__get_valetID_defined
#define somDS__get_valetID_defined
static char *somDS__get_valetID = "::Valet::valetID";
static somId somDI__get_valetID = &somDS__get_valetID;
#endif  /* somDS__get_valetID_defined */
static long  SOMLINK somRD__get_valetID(Valet *somSelf, Environment *ev)
{
	long __retVal;

	somSelf->somDispatch((void **)&__retVal, somId__get_valetID, somSelf , ev
		);
	return __retVal;
}

/*
 * New Method: _set_valetID
 */
SOM_Scope void  SOMLINK _set_valetID(Valet *somSelf, Environment *ev,
		long valetID);
#ifndef somMN__set_valetID_defined
#define somMN__set_valetID_defined
static char *somMN__set_valetID = "_set_valetID";
static somId somId__set_valetID = &somMN__set_valetID;
#endif  /* somMN__set_valetID_defined */
#ifndef somDS__set_valetID_defined
#define somDS__set_valetID_defined
static char *somDS__set_valetID = "::Valet::valetID";
static somId somDI__set_valetID = &somDS__set_valetID;
#endif  /* somDS__set_valetID_defined */
static void  SOMLINK somRD__set_valetID(Valet *somSelf, Environment *ev,
		long valetID)
{
	void* __retVal;

	somSelf->somDispatch((void **)&__retVal, somId__set_valetID, somSelf , ev
		,valetID);
}

/*
 * New Method: parkCar
 */
SOM_Scope Ticket*  SOMLINK parkCar(Valet *somSelf, Environment *ev,
		Car* aCar);
#ifndef somMN_parkCar_defined
#define somMN_parkCar_defined
static char *somMN_parkCar = "parkCar";
static somId somId_parkCar = &somMN_parkCar;
#endif  /* somMN_parkCar_defined */
#ifndef somDS_parkCar_defined
#define somDS_parkCar_defined
static char *somDS_parkCar = "::Valet::parkCar";
static somId somDI_parkCar = &somDS_parkCar;
#endif  /* somDS_parkCar_defined */
static Ticket*  SOMLINK somRD_parkCar(Valet *somSelf, Environment *ev,
		Car* aCar)
{
	Ticket* __retVal;

	somSelf->somDispatch((void **)&__retVal, somId_parkCar, somSelf , ev
		,aCar);
	return __retVal;
}

/*
 * New Method: retrieveCar
 */
SOM_Scope Car*  SOMLINK retrieveCar(Valet *somSelf, Environment *ev,
		Ticket* aTicket);
#ifndef somMN_retrieveCar_defined
#define somMN_retrieveCar_defined
static char *somMN_retrieveCar = "retrieveCar";
static somId somId_retrieveCar = &somMN_retrieveCar;
#endif  /* somMN_retrieveCar_defined */
#ifndef somDS_retrieveCar_defined
#define somDS_retrieveCar_defined
static char *somDS_retrieveCar = "::Valet::retrieveCar";
static somId somDI_retrieveCar = &somDS_retrieveCar;
#endif  /* somDS_retrieveCar_defined */
static Car*  SOMLINK somRD_retrieveCar(Valet *somSelf, Environment *ev,
		Ticket* aTicket)
{
	Car* __retVal;

	somSelf->somDispatch((void **)&__retVal, somId_retrieveCar, somSelf , ev
		,aTicket);
	return __retVal;
}

/*
 * Overridden method: somDefaultInit
 */
SOM_Scope void  SOMLINK somDefaultInit(Valet *somSelf,
		somInitCtrl* ctrl);
static char *somMN_ValetsomDefaultInit = "SOMObject::somDefaultInit";
static somId somId_ValetsomDefaultInit = &somMN_ValetsomDefaultInit;
#ifdef somId_somDefaultInit
#undef somId_somDefaultInit
#else
#define somId_somDefaultInit somId_ValetsomDefaultInit
#endif

/*
 * Overridden method: somDestruct
 */
SOM_Scope void  SOMLINK somDestruct(Valet *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
static char *somMN_ValetsomDestruct = "SOMObject::somDestruct";
static somId somId_ValetsomDestruct = &somMN_ValetsomDestruct;
#ifdef somId_somDestruct
#undef somId_somDestruct
#else
#define somId_somDestruct somId_ValetsomDestruct
#endif
typedef void   (SOMLINK * somTD_xih_Valet_somDestruct)(Valet *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);

/*
 * -- Routines and Structures to create the class object
 */


/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t ValetSM[] = {
    {    &ValetClassData._get_valetName,
         &somId__get_valetName,
         &somDI__get_valetName,
         (somMethodProc *) _get_valetName,
         (somMethodProc *) somRD__get_valetName,
         (somMethodProc *) somAP__get_valetName    },
    {    &ValetClassData._set_valetName,
         &somId__set_valetName,
         &somDI__set_valetName,
         (somMethodProc *) _set_valetName,
         (somMethodProc *) somRD__set_valetName,
         (somMethodProc *) somAP__set_valetName    },
    {    &ValetClassData._get_valetID,
         &somId__get_valetID,
         &somDI__get_valetID,
         (somMethodProc *) _get_valetID,
         (somMethodProc *) somRD__get_valetID,
         (somMethodProc *) somAP__get_valetID    },
    {    &ValetClassData._set_valetID,
         &somId__set_valetID,
         &somDI__set_valetID,
         (somMethodProc *) _set_valetID,
         (somMethodProc *) somRD__set_valetID,
         (somMethodProc *) somAP__set_valetID    },
    {    &ValetClassData.parkCar,
         &somId_parkCar,
         &somDI_parkCar,
         (somMethodProc *) parkCar,
         (somMethodProc *) somRD_parkCar,
         (somMethodProc *) somAP_parkCar    },
    {    &ValetClassData.retrieveCar,
         &somId_retrieveCar,
         &somDI_retrieveCar,
         (somMethodProc *) retrieveCar,
         (somMethodProc *) somRD_retrieveCar,
         (somMethodProc *) somAP_retrieveCar    },
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t ValetOM[] = {
    {    &somId_ValetsomDefaultInit,
         (somMethodProc *) somDefaultInit  },
    {    &somId_ValetsomDestruct,
         (somMethodProc *) somDestruct  },
};


/*
 *  class Ids
 */
static char * somCN_Valet = "Valet";
static char * somPCN_Valet_SOMObject = "SOMObject";

static somId somPCValet[] = {
    &somPCN_Valet_SOMObject,
};

static somStaticClassInfo ValetSCI = {
    4, 6, 2, 0, 0, 0, /* layout version 4 */ 
    Valet_MajorVersion, Valet_MinorVersion,
    sizeof(ValetData), Valet_MaxNoMethods, 1,
    &somCN_Valet,
    (somId) NULL, 1,
    somPCValet,
    (somClassDataStructure *) &ValetClassData,
    (somCClassDataStructure *) &ValetCClassData,
    ValetSM, ValetOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,
   (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    0, /* default alignment */
    -1, /* use parents as DirectInitClasses */
    0, /* no explicit DirectInitClasses */
    0, /* number of general methods */
    (somMethods_t *) NULL,
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    6, /* number of classdata entries */
    0, /* no list provided currently */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not a DTS class */
    0, /* no dynamically computed info */
};


/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK ValetNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMObjectNewClass(SOMObject_MajorVersion,SOMObject_MinorVersion);	/* static reference */
    return (SOMClass*) ((void*)(somBuildClass(1,&ValetSCI, somtmajorVersion, somtminorVersion)));
}

/*
 * Functions for attributes.
 */
SOM_Scope string  SOMLINK _get_valetName(Valet *somSelf, Environment *ev){
    ValetData *somThis = ValetGetData(somSelf);
    ValetMethodDebug("Valet","_get_valetName");
    SOM_IgnoreWarning(ev);

    return (somThis->valetName);
}
SOM_Scope void  SOMLINK _set_valetName(Valet *somSelf, Environment *ev,
		string valetName){
    ValetData *somThis = ValetGetData(somSelf);
    ValetMethodDebug("Valet","_set_valetName");
    SOM_IgnoreWarning(ev);

    somThis->valetName = valetName;
}
SOM_Scope long  SOMLINK _get_valetID(Valet *somSelf, Environment *ev){
    ValetData *somThis = ValetGetData(somSelf);
    ValetMethodDebug("Valet","_get_valetID");
    SOM_IgnoreWarning(ev);

    return (somThis->valetID);
}
SOM_Scope void  SOMLINK _set_valetID(Valet *somSelf, Environment *ev,
		long valetID){
    ValetData *somThis = ValetGetData(somSelf);
    ValetMethodDebug("Valet","_set_valetID");
    SOM_IgnoreWarning(ev);

    somThis->valetID = valetID;
}

/*
 * Macros for initializer/destructor entry/exit
 */
#define Valet_BeginInitializer_somDefaultInit \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)ValetCClassData.parentMtab)->initCtrl),sizeof(somInitCtrl)); \
   } \
   myMask = ctrl->mask; \
   somThis = (ValetData*)((char*)somSelf + ctrl->info->dataOffset);\
   ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1;
#define Valet_BeginDestructor \
   if (!ctrl) { \
      ctrl = &globalCtrl; \
      memcpy(ctrl,&(((somParentMtabStructPtr)ValetCClassData.parentMtab)->destructCtrl),sizeof(somDestructCtrl)); \
   } \
   somThis = (ValetData*)((char*)somSelf + ctrl->info->dataOffset);\
   myMask = ctrl->mask; 
#define Valet_EndDestructor \
   ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info)); \
   ctrl->mask += 1; \
   Valet_DeInit_SOMObject_somDestruct(somSelf,0,ctrl); \
   if (doFree) _Valet->somDeallocate((string)somSelf);

/*
 * Ancestor_Init/DeInit Macros
 */

/* ...for SOMObject */
#define Valet_Init_SOMObject_somDefaultInit(somSelf, ctrl) \
        if (myMask[0]&1) \
        /* special case SOMObject */\
        ctrl->info = (somInitInfo*)(ctrl->infoSize + (char*)(ctrl->info));
#define Valet_DeInit_SOMObject_somDestruct(somSelf, doFree, ctrl) \
        if (myMask[0]&1) \
        /* special case SOMObject */\
        ctrl->info = (somDestructInfo*)(ctrl->infoSize + (char*)(ctrl->info));

#endif /* Primary Implementation Support */

#endif       /* SOM_Valet_xih */
